{
  "address": "0x1F3f9D3068568F8040775be2e8C03C103C61f3aF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_metadataManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_supplyManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_firstSupplyChangeAllowed",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "authorizer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        }
      ],
      "name": "AuthorizationUsed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newManager",
          "type": "address"
        }
      ],
      "name": "MetadataManagerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "oldMintCap",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "newMintCap",
          "type": "uint16"
        }
      ],
      "name": "MintCapChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "oldWaitingPeriod",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "newWaitingPeriod",
          "type": "uint32"
        }
      ],
      "name": "SupplyChangeWaitingPeriodChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newManager",
          "type": "address"
        }
      ],
      "name": "SupplyManagerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "TokenMetaUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RECEIVE_WITH_AUTHORIZATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRANSFER_WITH_AUTHORIZATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "authorizationState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metadataManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintCap",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validAfter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validBefore",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "receiveWithAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newMetadataManager",
          "type": "address"
        }
      ],
      "name": "setMetadataManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "newCap",
          "type": "uint16"
        }
      ],
      "name": "setMintCap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "period",
          "type": "uint32"
        }
      ],
      "name": "setSupplyChangeWaitingPeriod",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newSupplyManager",
          "type": "address"
        }
      ],
      "name": "setSupplyManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supplyChangeAllowedAfter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supplyChangeWaitingPeriod",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supplyChangeWaitingPeriodMinimum",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supplyManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validAfter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validBefore",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "transferWithAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        }
      ],
      "name": "updateTokenMetadata",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x59b4766daecbba42f05d073a2ce07dc0e7782266785e4f7f3ec4955441996c53",
  "receipt": {
    "to": null,
    "from": "0x4F8f512Dab59F227EA70B1D8A0044aFa95CC80C3",
    "contractAddress": "0x1F3f9D3068568F8040775be2e8C03C103C61f3aF",
    "transactionIndex": 104,
    "gasUsed": "2788356",
    "logsBloom": "0x
    "blockHash": "0xe4883d55554f227344a611d257623137fa0c4c3342f66c2af08360bfc50b96e4",
    "transactionHash": "0x59b4766daecbba42f05d073a2ce07dc0e7782266785e4f7f3ec4955441996c53",
    "logs": [
      {
        "transactionIndex": 104,
        "blockNumber": 11309825,
        "transactionHash": "0x59b4766daecbba42f05d073a2ce07dc0e7782266785e4f7f3ec4955441996c53",
        "address": "0x1F3f9D3068568F8040775be2e8C03C103C61f3aF",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004f8f512dab59f227ea70b1d8a0044afa95cc80c3"
        ],
        "data": "0x00000000000000000000000000000000000000000052b7d2dcc80cd2e4000000",
        "logIndex": 101,
        "blockHash": "0xe4883d55554f227344a611d257623137fa0c4c3342f66c2af08360bfc50b96e4"
      },
      {
        "transactionIndex": 104,
        "blockNumber": 11309825,
        "transactionHash": "0x59b4766daecbba42f05d073a2ce07dc0e7782266785e4f7f3ec4955441996c53",
        "address": "0x1F3f9D3068568F8040775be2e8C03C103C61f3aF",
        "topics": [
          "0x0cff5c8e2b1e51135595ff4ebaefab9ef5b26373c3b84cbdc4677bb41468843b",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004f8f512dab59f227ea70b1d8a0044afa95cc80c3"
        ],
        "data": "0x",
        "logIndex": 102,
        "blockHash": "0xe4883d55554f227344a611d257623137fa0c4c3342f66c2af08360bfc50b96e4"
      },
      {
        "transactionIndex": 104,
        "blockNumber": 11309825,
        "transactionHash": "0x59b4766daecbba42f05d073a2ce07dc0e7782266785e4f7f3ec4955441996c53",
        "address": "0x1F3f9D3068568F8040775be2e8C03C103C61f3aF",
        "topics": [
          "0x65e484da94d3a093b70b54f45dda42146a4e7f7f6507a09e39f67ca388987d3e",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000013d5b8fc84f73fc5a0a5832aa8373044371314d3"
        ],
        "data": "0x",
        "logIndex": 103,
        "blockHash": "0xe4883d55554f227344a611d257623137fa0c4c3342f66c2af08360bfc50b96e4"
      }
    ],
    "blockNumber": 11309825,
    "cumulativeGasUsed": "7737197",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x13d5B8Fc84F73fc5a0A5832Aa8373044371314d3",
    "0x4F8f512Dab59F227EA70B1D8A0044aFa95CC80C3",
    1621425600
  ],
  "solcInputHash": "5bf4568ab804ae51559c23ee44b86063",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_metadataManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_supplyManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_firstSupplyChangeAllowed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"AuthorizationUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"MetadataManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"oldMintCap\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"newMintCap\",\"type\":\"uint16\"}],\"name\":\"MintCapChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"oldWaitingPeriod\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"newWaitingPeriod\",\"type\":\"uint32\"}],\"name\":\"SupplyChangeWaitingPeriodChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"SupplyManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"TokenMetaUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RECEIVE_WITH_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSFER_WITH_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"authorizationState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCap\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"receiveWithAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMetadataManager\",\"type\":\"address\"}],\"name\":\"setMetadataManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newCap\",\"type\":\"uint16\"}],\"name\":\"setMintCap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"period\",\"type\":\"uint32\"}],\"name\":\"setSupplyChangeWaitingPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSupplyManager\",\"type\":\"address\"}],\"name\":\"setSupplyManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyChangeAllowedAfter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyChangeWaitingPeriod\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyChangeWaitingPeriodMinimum\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"transferWithAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"name\":\"updateTokenMetadata\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The governance token for Archer DAO ERC-20 with supply controls + add-ons to allow for offchain signing See EIP-712, EIP-2612, and EIP-3009 for details\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"account\":\"The address of the account holding the funds\",\"spender\":\"The address of the account spending the funds\"},\"returns\":{\"_0\":\"The number of tokens approved\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead\",\"params\":{\"amount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address of the account to get the balance of\"},\"returns\":{\"_0\":\"The number of tokens held\"}},\"burn(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to be burned\",\"src\":\"The account that will burn tokens\"},\"returns\":{\"_0\":\"Boolean indicating success of burn\"}},\"constructor\":{\"params\":{\"_firstSupplyChangeAllowed\":\"The timestamp after which the first supply change may occur\",\"_metadataManager\":\"The account with the ability to change token metadata\",\"_supplyManager\":\"The address with minting ability\"}},\"decreaseAllowance(address,uint256)\":{\"params\":{\"spender\":\"Spender's address\",\"subtractedValue\":\"Amount of decrease in allowance\"},\"returns\":{\"_0\":\"True if successful\"}},\"getDomainSeparator()\":{\"returns\":{\"_0\":\"Separator\"}},\"increaseAllowance(address,uint256)\":{\"params\":{\"addedValue\":\"Amount of increase in allowance\",\"spender\":\"Spender's address\"},\"returns\":{\"_0\":\"True if successful\"}},\"mint(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to be minted\",\"dst\":\"The address of the destination account\"},\"returns\":{\"_0\":\"Boolean indicating success of mint\"}},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The time at which to expire the signature\",\"owner\":\"The address to approve from\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"spender\":\"The address to be approved\",\"v\":\"The recovery byte of the signature\",\"value\":\"The number of tokens that are approved (2^256-1 means infinite)\"}},\"receiveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"details\":\"This has an additional check to ensure that the payee's address matches the caller of this function to prevent front-running attacks.\",\"params\":{\"from\":\"Payer's address (Authorizer)\",\"nonce\":\"Unique nonce\",\"r\":\"r of the signature\",\"s\":\"s of the signature\",\"to\":\"Payee's address\",\"v\":\"v of the signature\",\"validAfter\":\"The time after which this is valid (unix time)\",\"validBefore\":\"The time before which this is valid (unix time)\",\"value\":\"Amount to be transferred\"}},\"setMetadataManager(address)\":{\"params\":{\"newMetadataManager\":\"The address of the new metadata manager\"},\"returns\":{\"_0\":\"true if successful\"}},\"setMintCap(uint16)\":{\"params\":{\"newCap\":\"The new mint cap in bips (10,000 bips = 1% of totalSupply)\"},\"returns\":{\"_0\":\"true if successful\"}},\"setSupplyChangeWaitingPeriod(uint32)\":{\"params\":{\"period\":\"The new supply change waiting period\"},\"returns\":{\"_0\":\"true if succssful\"}},\"setSupplyManager(address)\":{\"params\":{\"newSupplyManager\":\"The address of the new supply manager\"},\"returns\":{\"_0\":\"true if successful\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"params\":{\"from\":\"Payer's address (Authorizer)\",\"nonce\":\"Unique nonce\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"to\":\"Payee's address\",\"v\":\"The recovery byte of the signature\",\"validAfter\":\"The time after which this is valid (unix time)\",\"validBefore\":\"The time before which this is valid (unix time)\",\"value\":\"Amount to be transferred\"}},\"updateTokenMetadata(string,string)\":{\"params\":{\"tokenName\":\"The new name for the token\",\"tokenSymbol\":\"The new symbol for the token\"},\"returns\":{\"_0\":\"true if successful\"}}},\"stateVariables\":{\"allowances\":{\"details\":\"Allowance amounts on behalf of others\"},\"authorizationState\":{\"details\":\"authorizer address > nonce > state (true = used / false = unused)\"},\"balances\":{\"details\":\"Official record of token balances for each account\"}},\"title\":\"ArchToken\",\"version\":1},\"userdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"The standard EIP-20 approval event\"},\"AuthorizationUsed(address,bytes32)\":{\"notice\":\"An event that's emitted whenever an authorized transfer occurs\"},\"MetadataManagerChanged(address,address)\":{\"notice\":\"An event that's emitted when the metadataManager address is changed\"},\"MintCapChanged(uint16,uint16)\":{\"notice\":\"An event that's emitted when the mintCap is changed\"},\"SupplyChangeWaitingPeriodChanged(uint32,uint32)\":{\"notice\":\"An event that's emitted when the supplyChangeWaitingPeriod is changed\"},\"SupplyManagerChanged(address,address)\":{\"notice\":\"An event that's emitted when the supplyManager address is changed\"},\"TokenMetaUpdated(string,string)\":{\"notice\":\"An event that's emitted when the token name and symbol are changed\"},\"Transfer(address,address,uint256)\":{\"notice\":\"The standard EIP-20 transfer event\"}},\"kind\":\"user\",\"methods\":{\"DOMAIN_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the contract's domain keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\"},\"PERMIT_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for permit (EIP-2612) keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\"},\"RECEIVE_WITH_AUTHORIZATION_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for receiveWithAuthorization (EIP-3009) keccak256(\\\"ReceiveWithAuthorization(address from,address to,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)\\\")\"},\"TRANSFER_WITH_AUTHORIZATION_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for transferWithAuthorization (EIP-3009) keccak256(\\\"TransferWithAuthorization(address from,address to,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)\\\");\"},\"VERSION_HASH()\":{\"notice\":\"The EIP-712 version hash keccak256(\\\"1\\\");\"},\"allowance(address,address)\":{\"notice\":\"Get the number of tokens `spender` is approved to spend on behalf of `account`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens held by the `account`\"},\"burn(address,uint256)\":{\"notice\":\"Burn tokens\"},\"constructor\":{\"notice\":\"Construct a new Arch token\"},\"decimals()\":{\"notice\":\"EIP-20 token decimals for this token\"},\"decreaseAllowance(address,uint256)\":{\"notice\":\"Decrease the allowance by a given amount\"},\"getDomainSeparator()\":{\"notice\":\"EIP-712 Domain separator\"},\"increaseAllowance(address,uint256)\":{\"notice\":\"Increase the allowance by a given amount\"},\"metadataManager()\":{\"notice\":\"Address which may change token metadata\"},\"mint(address,uint256)\":{\"notice\":\"Mint new tokens\"},\"mintCap()\":{\"notice\":\"Cap on the total amount that can be minted at each mint (measured in bips: 10,000 bips = 1% of current totalSupply)\"},\"name()\":{\"notice\":\"EIP-20 token name for this token\"},\"nonces(address)\":{\"notice\":\"A record of states for signing / validating signatures\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Triggers an approval from owner to spender\"},\"receiveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"notice\":\"Receive a transfer with a signed authorization from the payer\"},\"setMetadataManager(address)\":{\"notice\":\"Change the metadataManager address\"},\"setMintCap(uint16)\":{\"notice\":\"Set the maximum amount of tokens that can be minted at once\"},\"setSupplyChangeWaitingPeriod(uint32)\":{\"notice\":\"Set the minimum time between supply changes\"},\"setSupplyManager(address)\":{\"notice\":\"Change the supplyManager address\"},\"supplyChangeAllowedAfter()\":{\"notice\":\"The timestamp after which a supply change may occur\"},\"supplyChangeWaitingPeriod()\":{\"notice\":\"The initial minimum time between changing the token supply\"},\"supplyChangeWaitingPeriodMinimum()\":{\"notice\":\"Hard cap on the minimum time between changing the token supply\"},\"supplyManager()\":{\"notice\":\"Address which may mint/burn tokens\"},\"symbol()\":{\"notice\":\"EIP-20 token symbol for this token\"},\"totalSupply()\":{\"notice\":\"Total number of tokens in circulation\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"},\"transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"notice\":\"Transfer tokens with a signed authorization\"},\"updateTokenMetadata(string,string)\":{\"notice\":\"Update the token name and symbol\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ArchToken.sol\":\"ArchToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/ArchToken.sol\":{\"content\":\"\\n\\n/************************************************************************\\n ~~~ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\\\ ~~~~\\n ~~~ @@@@@@ \\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591 @@@@@@ | ~~~\\n ~~~ @@@@@  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  @@@@@ | ~~~\\n ~~~ @@@@@  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2591\\u2591\\u255a\\u2550\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d @@@@@@ | ~~~\\n ~~~ @@@@@  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2591\\u2591\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  @@@@@ | ~~~\\n ~~~ @@@@@  \\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551  @@@@@ | ~~~\\n ~~~ @@@@@  \\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u255d\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u255a\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u255d  @@@@@ | ~~~\\n ~~~ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ | ~~~\\n ~~~ \\\\_____________________________________________________________\\\\| ~~~\\n ************************************************************************/\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\n\\n/**\\n * @title ArchToken\\n * @dev The governance token for Archer DAO\\n * ERC-20 with supply controls + add-ons to allow for offchain signing\\n * See EIP-712, EIP-2612, and EIP-3009 for details\\n */\\ncontract ArchToken {\\n    using SafeMath for uint256;\\n\\n    /// @notice EIP-20 token name for this token\\n    string public name = \\\"Archer DAO Governance Token\\\";\\n\\n    /// @notice EIP-20 token symbol for this token\\n    string public symbol = \\\"ARCH\\\";\\n\\n    /// @notice EIP-20 token decimals for this token\\n    uint8 public constant decimals = 18;\\n\\n    /// @notice Total number of tokens in circulation\\n    uint256 public totalSupply = 100_000_000e18; // 100 million\\n\\n    /// @notice Address which may mint/burn tokens\\n    address public supplyManager;\\n\\n    /// @notice Address which may change token metadata\\n    address public metadataManager;\\n\\n    /// @notice The timestamp after which a supply change may occur\\n    uint256 public supplyChangeAllowedAfter;\\n\\n    /// @notice The initial minimum time between changing the token supply\\n    uint32 public supplyChangeWaitingPeriod = 1 days * 365;\\n\\n    /// @notice Hard cap on the minimum time between changing the token supply\\n    uint32 public constant supplyChangeWaitingPeriodMinimum = 1 days * 90;\\n\\n    /// @notice Cap on the total amount that can be minted at each mint (measured in bips: 10,000 bips = 1% of current totalSupply)\\n    uint16 public mintCap = 20_000;\\n\\n    /// @dev Allowance amounts on behalf of others\\n    mapping (address => mapping (address => uint256)) internal allowances;\\n\\n    /// @dev Official record of token balances for each account\\n    mapping (address => uint256) internal balances;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    /// keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n    bytes32 public constant DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n    \\n    /// @notice The EIP-712 version hash\\n    /// keccak256(\\\"1\\\");\\n    bytes32 public constant VERSION_HASH = 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;\\n\\n    /// @notice The EIP-712 typehash for permit (EIP-2612)\\n    /// keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    /// @notice The EIP-712 typehash for transferWithAuthorization (EIP-3009)\\n    /// keccak256(\\\"TransferWithAuthorization(address from,address to,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)\\\");\\n    bytes32 public constant TRANSFER_WITH_AUTHORIZATION_TYPEHASH = 0x7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a2267;\\n\\n    /// @notice The EIP-712 typehash for receiveWithAuthorization (EIP-3009)\\n    /// keccak256(\\\"ReceiveWithAuthorization(address from,address to,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)\\\")\\n    bytes32 public constant RECEIVE_WITH_AUTHORIZATION_TYPEHASH = 0xd099cc98ef71107a616c4f0f941f04c322d8e254fe26b3c6668db87aae413de8;\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping (address => uint) public nonces;\\n\\n    /// @dev authorizer address > nonce > state (true = used / false = unused)\\n    mapping (address => mapping (bytes32 => bool)) public authorizationState;\\n\\n    /// @notice An event that's emitted when the mintCap is changed\\n    event MintCapChanged(uint16 indexed oldMintCap, uint16 indexed newMintCap);\\n\\n    /// @notice An event that's emitted when the supplyManager address is changed\\n    event SupplyManagerChanged(address indexed oldManager, address indexed newManager);\\n\\n    /// @notice An event that's emitted when the supplyChangeWaitingPeriod is changed\\n    event SupplyChangeWaitingPeriodChanged(uint32 indexed oldWaitingPeriod, uint32 indexed newWaitingPeriod);\\n\\n    /// @notice An event that's emitted when the metadataManager address is changed\\n    event MetadataManagerChanged(address indexed oldManager, address indexed newManager);\\n\\n    /// @notice An event that's emitted when the token name and symbol are changed\\n    event TokenMetaUpdated(string indexed name, string indexed symbol);\\n\\n    /// @notice The standard EIP-20 transfer event\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice The standard EIP-20 approval event\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice An event that's emitted whenever an authorized transfer occurs\\n    event AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce);\\n\\n    /**\\n     * @notice Construct a new Arch token\\n     * @param _metadataManager The account with the ability to change token metadata\\n     * @param _supplyManager The address with minting ability\\n     * @param _firstSupplyChangeAllowed The timestamp after which the first supply change may occur\\n     */\\n    constructor(address _metadataManager, address _supplyManager, uint256 _firstSupplyChangeAllowed) {\\n        require(_firstSupplyChangeAllowed >= block.timestamp, \\\"Arch::constructor: minting can only begin after deployment\\\");\\n\\n        balances[msg.sender] = totalSupply;\\n        emit Transfer(address(0), msg.sender, totalSupply);\\n\\n        supplyChangeAllowedAfter = _firstSupplyChangeAllowed;\\n        supplyManager = _supplyManager;\\n        emit SupplyManagerChanged(address(0), _supplyManager);\\n\\n        metadataManager = _metadataManager;\\n        emit MetadataManagerChanged(address(0), metadataManager);\\n    }\\n\\n    /**\\n     * @notice Change the supplyManager address\\n     * @param newSupplyManager The address of the new supply manager\\n     * @return true if successful\\n     */\\n    function setSupplyManager(address newSupplyManager) external returns (bool) {\\n        require(msg.sender == supplyManager, \\\"Arch::setSupplyManager: only SM can change SM\\\");\\n        emit SupplyManagerChanged(supplyManager, newSupplyManager);\\n        supplyManager = newSupplyManager;\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Change the metadataManager address\\n     * @param newMetadataManager The address of the new metadata manager\\n     * @return true if successful\\n     */\\n    function setMetadataManager(address newMetadataManager) external returns (bool) {\\n        require(msg.sender == metadataManager, \\\"Arch::setMetadataManager: only MM can change MM\\\");\\n        emit MetadataManagerChanged(metadataManager, newMetadataManager);\\n        metadataManager = newMetadataManager;\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Mint new tokens\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to be minted\\n     * @return Boolean indicating success of mint\\n     */\\n    function mint(address dst, uint256 amount) external returns (bool) {\\n        require(msg.sender == supplyManager, \\\"Arch::mint: only the supplyManager can mint\\\");\\n        require(dst != address(0), \\\"Arch::mint: cannot transfer to the zero address\\\");\\n        require(amount <= totalSupply.mul(mintCap).div(1000000), \\\"Arch::mint: exceeded mint cap\\\");\\n        require(block.timestamp >= supplyChangeAllowedAfter, \\\"Arch::mint: minting not allowed yet\\\");\\n\\n        // update the next supply change allowed timestamp\\n        supplyChangeAllowedAfter = block.timestamp.add(supplyChangeWaitingPeriod);\\n\\n        // mint the amount\\n        _mint(dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Burn tokens\\n     * @param src The account that will burn tokens\\n     * @param amount The number of tokens to be burned\\n     * @return Boolean indicating success of burn\\n     */\\n    function burn(address src, uint256 amount) external returns (bool) {\\n        address spender = msg.sender;\\n        require(spender == supplyManager, \\\"Arch::burn: only the supplyManager can burn\\\");\\n        require(src != address(0), \\\"Arch::burn: cannot transfer from the zero address\\\");\\n        require(block.timestamp >= supplyChangeAllowedAfter, \\\"Arch::burn: burning not allowed yet\\\");\\n        \\n        uint256 spenderAllowance = allowances[src][spender];\\n        // check allowance and reduce by amount\\n        if (spender != src && spenderAllowance != uint256(-1)) {\\n            uint256 newAllowance = spenderAllowance.sub(\\n                amount,\\n                \\\"Arch::burn: burn amount exceeds allowance\\\"\\n            );\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        // update the next supply change allowed timestamp\\n        supplyChangeAllowedAfter = block.timestamp.add(supplyChangeWaitingPeriod);\\n\\n        // burn the amount\\n        _burn(src, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Set the maximum amount of tokens that can be minted at once\\n     * @param newCap The new mint cap in bips (10,000 bips = 1% of totalSupply)\\n     * @return true if successful\\n     */\\n    function setMintCap(uint16 newCap) external returns (bool) {\\n        require(msg.sender == supplyManager, \\\"Arch::setMintCap: only SM can change mint cap\\\");\\n        emit MintCapChanged(mintCap, newCap);\\n        mintCap = newCap;\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Set the minimum time between supply changes\\n     * @param period The new supply change waiting period\\n     * @return true if succssful\\n     */\\n    function setSupplyChangeWaitingPeriod(uint32 period) external returns (bool) {\\n        require(msg.sender == supplyManager, \\\"Arch::setSupplyChangeWaitingPeriod: only SM can change waiting period\\\");\\n        require(period >= supplyChangeWaitingPeriodMinimum, \\\"Arch::setSupplyChangeWaitingPeriod: waiting period must be > minimum\\\");\\n        emit SupplyChangeWaitingPeriodChanged(supplyChangeWaitingPeriod, period);\\n        supplyChangeWaitingPeriod = period;\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Update the token name and symbol\\n     * @param tokenName The new name for the token\\n     * @param tokenSymbol The new symbol for the token\\n     * @return true if successful\\n     */\\n    function updateTokenMetadata(string memory tokenName, string memory tokenSymbol) external returns (bool) {\\n        require(msg.sender == metadataManager, \\\"Arch::updateTokenMeta: only MM can update token metadata\\\");\\n        name = tokenName;\\n        symbol = tokenSymbol;\\n        emit TokenMetaUpdated(name, symbol);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     * and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * It is recommended to use increaseAllowance and decreaseAllowance instead\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Increase the allowance by a given amount\\n     * @param spender Spender's address\\n     * @param addedValue Amount of increase in allowance\\n     * @return True if successful\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        external\\n        returns (bool)\\n    {\\n        _increaseAllowance(msg.sender, spender, addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Decrease the allowance by a given amount\\n     * @param spender Spender's address\\n     * @param subtractedValue Amount of decrease in allowance\\n     * @return True if successful\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        external\\n        returns (bool)\\n    {\\n        _decreaseAllowance(msg.sender, spender, subtractedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Triggers an approval from owner to spender\\n     * @param owner The address to approve from\\n     * @param spender The address to be approved\\n     * @param value The number of tokens that are approved (2^256-1 means infinite)\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        require(deadline >= block.timestamp, \\\"Arch::permit: signature expired\\\");\\n\\n        bytes32 encodeData = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline));\\n        _validateSignedData(owner, encodeData, v, r, s);\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external returns (bool) {\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool) {\\n        address spender = msg.sender;\\n        uint256 spenderAllowance = allowances[src][spender];\\n\\n        if (spender != src && spenderAllowance != uint256(-1)) {\\n            uint256 newAllowance = spenderAllowance.sub(\\n                amount,\\n                \\\"Arch::transferFrom: transfer amount exceeds allowance\\\"\\n            );\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer tokens with a signed authorization\\n     * @param from Payer's address (Authorizer)\\n     * @param to Payee's address\\n     * @param value Amount to be transferred\\n     * @param validAfter The time after which this is valid (unix time)\\n     * @param validBefore The time before which this is valid (unix time)\\n     * @param nonce Unique nonce\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function transferWithAuthorization(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n        external\\n    {\\n        require(block.timestamp > validAfter, \\\"Arch::transferWithAuth: auth not yet valid\\\");\\n        require(block.timestamp < validBefore, \\\"Arch::transferWithAuth: auth expired\\\");\\n        require(!authorizationState[from][nonce],  \\\"Arch::transferWithAuth: auth already used\\\");\\n\\n        bytes32 encodeData = keccak256(abi.encode(TRANSFER_WITH_AUTHORIZATION_TYPEHASH, from, to, value, validAfter, validBefore, nonce));\\n        _validateSignedData(from, encodeData, v, r, s);\\n\\n        authorizationState[from][nonce] = true;\\n        emit AuthorizationUsed(from, nonce);\\n\\n        _transferTokens(from, to, value);\\n    }\\n\\n    /**\\n     * @notice Receive a transfer with a signed authorization from the payer\\n     * @dev This has an additional check to ensure that the payee's address matches\\n     * the caller of this function to prevent front-running attacks.\\n     * @param from Payer's address (Authorizer)\\n     * @param to Payee's address\\n     * @param value Amount to be transferred\\n     * @param validAfter The time after which this is valid (unix time)\\n     * @param validBefore The time before which this is valid (unix time)\\n     * @param nonce Unique nonce\\n     * @param v v of the signature\\n     * @param r r of the signature\\n     * @param s s of the signature\\n     */\\n    function receiveWithAuthorization(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(to == msg.sender, \\\"Arch::receiveWithAuth: caller must be the payee\\\");\\n        require(block.timestamp > validAfter, \\\"Arch::receiveWithAuth: auth not yet valid\\\");\\n        require(block.timestamp < validBefore, \\\"Arch::receiveWithAuth: auth expired\\\");\\n        require(!authorizationState[from][nonce],  \\\"Arch::receiveWithAuth: auth already used\\\");\\n\\n        bytes32 encodeData = keccak256(abi.encode(RECEIVE_WITH_AUTHORIZATION_TYPEHASH, from, to, value, validAfter, validBefore, nonce));\\n        _validateSignedData(from, encodeData, v, r, s);\\n\\n        authorizationState[from][nonce] = true;\\n        emit AuthorizationUsed(from, nonce);\\n\\n        _transferTokens(from, to, value);\\n    }\\n\\n    /**\\n     * @notice EIP-712 Domain separator\\n     * @return Separator\\n     */\\n    function getDomainSeparator() public view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                VERSION_HASH,\\n                _getChainId(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Recovers address from signed data and validates the signature\\n     * @param signer Address that signed the data\\n     * @param encodeData Data signed by the address\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function _validateSignedData(address signer, bytes32 encodeData, uint8 v, bytes32 r, bytes32 s) internal view {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                getDomainSeparator(),\\n                encodeData\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        // Explicitly disallow authorizations for address(0) as ecrecover returns address(0) on malformed messages\\n        require(recoveredAddress != address(0) && recoveredAddress == signer, \\\"Arch::validateSig: invalid signature\\\");\\n    }\\n\\n    /**\\n     * @notice Approval implementation\\n     * @param owner The address of the account which owns tokens\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"Arch::_approve: approve from the zero address\\\");\\n        require(spender != address(0), \\\"Arch::_approve: approve to the zero address\\\");\\n        allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _increaseAllowance(\\n        address owner,\\n        address spender,\\n        uint256 addedValue\\n    ) internal {\\n        _approve(owner, spender, allowances[owner][spender].add(addedValue));\\n    }\\n\\n    function _decreaseAllowance(\\n        address owner,\\n        address spender,\\n        uint256 subtractedValue\\n    ) internal {\\n        _approve(\\n            owner,\\n            spender,\\n            allowances[owner][spender].sub(\\n                subtractedValue,\\n                \\\"Arch::_decreaseAllowance: decreased allowance below zero\\\"\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Transfer implementation\\n     * @param from The address of the account which owns tokens\\n     * @param to The address of the account which is receiving tokens\\n     * @param value The number of tokens that are being transferred\\n     */\\n    function _transferTokens(address from, address to, uint256 value) internal {\\n        require(to != address(0), \\\"Arch::_transferTokens: cannot transfer to the zero address\\\");\\n\\n        balances[from] = balances[from].sub(\\n            value,\\n            \\\"Arch::_transferTokens: transfer exceeds from balance\\\"\\n        );\\n        balances[to] = balances[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @notice Mint implementation\\n     * @param to The address of the account which is receiving tokens\\n     * @param value The number of tokens that are being minted\\n     */\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balances[to] = balances[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    /**\\n     * @notice Burn implementation\\n     * @param from The address of the account which owns tokens\\n     * @param value The number of tokens that are being burned\\n     */\\n    function _burn(address from, uint256 value) internal {\\n        balances[from] = balances[from].sub(\\n            value,\\n            \\\"Arch::_burn: burn amount exceeds from balance\\\"\\n        );\\n        totalSupply = totalSupply.sub(\\n            value,\\n            \\\"Arch::_burn: burn amount exceeds total supply\\\"\\n        );\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /**\\n     * @notice Current id of the chain where this contract is deployed\\n     * @return Chain id\\n     */\\n    function _getChainId() internal pure returns (uint) {\\n        uint256 chainId;\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n}\",\"keccak256\":\"0x45e252b99f03a3341cd1307c9882e6cf8a8231b77429dd4659280720ab11ea8b\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x961855901713e710c05dd67f9a01e501a54e82e68a526fe3662e228c27f788d9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052601b60808190527f4172636865722044414f20476f7665726e616e636520546f6b656e000000000060a0908152620000409160009190620001f5565b5060408051808201909152600480825263082a486960e31b60209092019182526200006e91600191620001f5565b506a52b7d2dcc80cd2e4000000600255600680546301e1338063ffffffff199091161761ffff60201b1916654e2000000000179055348015620000b057600080fd5b50604051620031db380380620031db833981016040819052620000d391620002be565b42811015620000ff5760405162461bcd60e51b8152600401620000f690620002fe565b60405180910390fd5b6002543360008181526008602052604080822084905551919290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9162000147916200035b565b60405180910390a36005819055600380546001600160a01b0319166001600160a01b0384169081179091556040516000907f0cff5c8e2b1e51135595ff4ebaefab9ef5b26373c3b84cbdc4677bb41468843b908290a3600480546001600160a01b0319166001600160a01b0385811691909117918290556040519116906000907f65e484da94d3a093b70b54f45dda42146a4e7f7f6507a09e39f67ca388987d3e908290a350505062000364565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826200022d576000855562000278565b82601f106200024857805160ff191683800117855562000278565b8280016001018555821562000278579182015b82811115620002785782518255916020019190600101906200025b565b50620002869291506200028a565b5090565b5b808211156200028657600081556001016200028b565b80516001600160a01b0381168114620002b957600080fd5b919050565b600080600060608486031215620002d3578283fd5b620002de84620002a1565b9250620002ee60208501620002a1565b9150604084015190509250925092565b6020808252603a908201527f417263683a3a636f6e7374727563746f723a206d696e74696e672063616e206f60408201527f6e6c7920626567696e206166746572206465706c6f796d656e74000000000000606082015260800190565b90815260200190565b612e6780620003746000396000f3fe608060405234801561001057600080fd5b50600436106102415760003560e01c80637ecebe0011610145578063a9059cbb116100bd578063e54420261161008c578063ed24911d11610071578063ed24911d14610472578063ef55bec61461047a578063f147389f1461048d57610241565b8063e54420261461044c578063e94a01021461045f57610241565b8063a9059cbb146103fe578063d505accf14610411578063dd62ed3e14610426578063e3ee160e1461043957610241565b806395d89b41116101145780639e4e7318116100f95780639e4e7318146103db578063a0cc6a68146103e3578063a457c2d7146103eb57610241565b806395d89b41146103c05780639dc29fac146103c857610241565b80637ecebe00146103955780637f2eecc3146103a8578063892b0edf146103b0578063941acc49146103b857610241565b806320606b70116101d857806339509351116101a75780634c9e91a41161018c5780634c9e91a41461035857806370a082311461036d57806376c71ca11461038057610241565b8063395093511461033257806340c10f191461034557610241565b806320606b70146102fa57806323b872dd1461030257806330adf81f14610315578063313ce5671461031d57610241565b806318160ddd1161021457806318160ddd146102ac578063191250d7146102c15780631bb8a4c6146102d45780631d4f8072146102e757610241565b8063055c6e191461024657806306fdde0314610264578063095ea7b314610279578063124cc07714610299575b600080fd5b61024e610495565b60405161025b9190612ccd565b60405180910390f35b61026c61049c565b60405161025b9190612338565b61028c61028736600461208e565b610548565b60405161025b9190612243565b61028c6102a7366004611f21565b61055f565b6102b461064c565b60405161025b919061224e565b61028c6102cf366004611f21565b610652565b61028c6102e2366004612118565b610737565b61028c6102f536600461213a565b610807565b6102b461090f565b61028c610310366004611f6d565b610933565b6102b4610a52565b610325610a76565b60405161025b9190612cde565b61028c61034036600461208e565b610a7b565b61028c61035336600461208e565b610a88565b610360610bed565b60405161025b9190612222565b6102b461037b366004611f21565b610c09565b610388610c31565b60405161025b9190612cbe565b6102b46103a3366004611f21565b610c43565b6102b4610c55565b6102b4610c79565b61024e610c7f565b61026c610c8b565b61028c6103d636600461208e565b610d03565b6102b4610f1a565b6102b4610f3e565b61028c6103f936600461208e565b610f62565b61028c61040c36600461208e565b610f6f565b61042461041f366004612025565b610f7c565b005b6102b4610434366004611f3b565b611058565b610424610447366004611fa8565b611090565b61028c61045a3660046120b7565b61126a565b61028c61046d36600461208e565b611345565b6102b4611365565b610424610488366004611fa8565b6113fc565b610360611568565b6276a70081565b6000805460408051602060026001851615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190941693909304601f810184900484028201840190925281815292918301828280156105405780601f1061051557610100808354040283529160200191610540565b820191906000526020600020905b81548152906001019060200180831161052357829003601f168201915b505050505081565b6000610555338484611584565b5060015b92915050565b60045460009073ffffffffffffffffffffffffffffffffffffffff1633146105bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b39061260e565b60405180910390fd5b60045460405173ffffffffffffffffffffffffffffffffffffffff8085169216907f65e484da94d3a093b70b54f45dda42146a4e7f7f6507a09e39f67ca388987d3e90600090a350600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831617905560015b919050565b60025481565b60035460009073ffffffffffffffffffffffffffffffffffffffff1633146106a6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b390612c61565b60035460405173ffffffffffffffffffffffffffffffffffffffff8085169216907f0cff5c8e2b1e51135595ff4ebaefab9ef5b26373c3b84cbdc4677bb41468843b90600090a3506003805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff00000000000000000000000000000000000000009091161790556001919050565b60035460009073ffffffffffffffffffffffffffffffffffffffff16331461078b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b39061257a565b60065460405161ffff80851692640100000000900416907f57fc526a0acf7c7e07dc107529df54483128b205abc107af2fa47020f82f121490600090a3506006805461ffff8316640100000000027fffffffffffffffffffffffffffffffffffffffffffffffffffff0000ffffffff9091161790556001919050565b60035460009073ffffffffffffffffffffffffffffffffffffffff16331461085b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b390612bde565b6276a70063ffffffff8316101561089e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b3906128d0565b60065460405163ffffffff8085169216907f769f3176a8ee46ae63681a1a630bec4772f7af23a4eeec90eaff41a0e8f1ac6990600090a3506006805463ffffffff83167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000009091161790556001919050565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b73ffffffffffffffffffffffffffffffffffffffff831660008181526007602090815260408083203380855292528220549192909190821480159061099857507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114155b15610a3b5760006109c485604051806060016040528060358152602001612d1a60359139849190611693565b73ffffffffffffffffffffffffffffffffffffffff808916600081815260076020908152604080832094891680845294909152908190208490555192935090917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610a3190859061224e565b60405180910390a3505b610a46868686611744565b50600195945050505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b6000610555338484611876565b60035460009073ffffffffffffffffffffffffffffffffffffffff163314610adc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b39061275c565b73ffffffffffffffffffffffffffffffffffffffff8316610b29576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b3906124c0565b600654600254610b5391620f424091610b4d91640100000000900461ffff166118c5565b9061193f565b821115610b8c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b3906125d7565b600554421015610bc8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b390612406565b600654610be090429063ffffffff9081169061198116565b60055561055583836119f5565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff1660009081526008602052604090205490565b600654640100000000900461ffff1681565b60096020526000908152604090205481565b7fd099cc98ef71107a616c4f0f941f04c322d8e254fe26b3c6668db87aae413de881565b60055481565b60065463ffffffff1681565b60018054604080516020600284861615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190941693909304601f810184900484028201840190925281815292918301828280156105405780601f1061051557610100808354040283529160200191610540565b600354600090339073ffffffffffffffffffffffffffffffffffffffff168114610d59576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b390612ac7565b73ffffffffffffffffffffffffffffffffffffffff8416610da6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b390612a0d565b600554421015610de2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b390612463565b73ffffffffffffffffffffffffffffffffffffffff8085166000818152600760209081526040808320948616808452949091529020549114801590610e4757507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114155b15610eea576000610e7385604051806060016040528060298152602001612dd560299139849190611693565b73ffffffffffffffffffffffffffffffffffffffff808816600081815260076020908152604080832094891680845294909152908190208490555192935090917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610ee090859061224e565b60405180910390a3505b600654610f0290429063ffffffff9081169061198116565b600555610f0f8585611a9d565b506001949350505050565b7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b7f7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a226781565b6000610555338484611b9f565b6000610555338484611744565b42841015610fb6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b390612725565b73ffffffffffffffffffffffffffffffffffffffff87166000908152600960209081526040808320805460018101909155905161101e927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928c928c928c92918c9101612257565b6040516020818303038152906040528051906020012090506110438882868686611bfb565b61104e888888611584565b5050505050505050565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260076020908152604080832093909416825291909152205490565b8542116110c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b390612b81565b844210611102576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b390612953565b73ffffffffffffffffffffffffffffffffffffffff89166000908152600a6020908152604080832087845290915290205460ff161561116d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b390612873565b6040516000906111ad907f7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a2267908c908c908c908c908c908c90602001612298565b6040516020818303038152906040528051906020012090506111d28a82868686611bfb565b73ffffffffffffffffffffffffffffffffffffffff8a166000818152600a6020908152604080832089845290915280822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055518792917f98de503528ee59b575ef0c0a2576a82497bfc029a5685b209e9ec333479b10a591a361125e8a8a8a611744565b50505050505050505050565b60045460009073ffffffffffffffffffffffffffffffffffffffff1633146112be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b3906126c8565b82516112d1906000906020860190611db3565b5081516112e5906001906020850190611db3565b5060016040516112f5919061215e565b6040518091039020600060405161130c919061215e565b604051908190038120907febb95b1e6f8658c3f6a1f6f59a9bea23721d47f22a69339010082475f7db6b2c90600090a350600192915050565b600a60209081526000928352604080842090915290825290205460ff1681565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b600060405161139a919061215e565b6040519081900390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66113cc611d30565b306040516020016113e19594939291906122e1565b60405160208183030381529060405280519060200120905090565b73ffffffffffffffffffffffffffffffffffffffff8816331461144b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b39061266b565b854211611484576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b390612816565b8442106114bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b3906129b0565b73ffffffffffffffffffffffffffffffffffffffff89166000908152600a6020908152604080832087845290915290205460ff1615611528576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b3906123a9565b6040516000906111ad907fd099cc98ef71107a616c4f0f941f04c322d8e254fe26b3c6668db87aae413de8908c908c908c908c908c908c90602001612298565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff83166115d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b3906127b9565b73ffffffffffffffffffffffffffffffffffffffff821661161e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b390612b24565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526007602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061168690859061224e565b60405180910390a3505050565b6000818484111561173c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156117015781810151838201526020016116e9565b50505050905090810190601f16801561172e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b73ffffffffffffffffffffffffffffffffffffffff8216611791576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b390612a6a565b6117db81604051806060016040528060348152602001612dfe6034913973ffffffffffffffffffffffffffffffffffffffff86166000908152600860205260409020549190611693565b73ffffffffffffffffffffffffffffffffffffffff80851660009081526008602052604080822093909355908416815220546118179082611981565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526008602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061168690859061224e565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152600760209081526040808320938616835292905220546118c090849084906118bb9085611981565b611584565b505050565b6000826118d457506000610559565b828202828482816118e157fe5b0414611938576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180612d4f6021913960400191505060405180910390fd5b9392505050565b600061193883836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611d34565b60008282018381101561193857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600254611a029082611981565b60025573ffffffffffffffffffffffffffffffffffffffff8216600090815260086020526040902054611a359082611981565b73ffffffffffffffffffffffffffffffffffffffff83166000818152600860205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611a9190859061224e565b60405180910390a35050565b611ae7816040518060600160405280602d8152602001612ced602d913973ffffffffffffffffffffffffffffffffffffffff85166000908152600860205260409020549190611693565b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611b51816040518060600160405280602d8152602001612da8602d91396002549190611693565b60025560405160009073ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611a9190859061224e565b6118c083836118bb84604051806060016040528060388152602001612d706038913973ffffffffffffffffffffffffffffffffffffffff808a166000908152600760209081526040808320938c16835292905220549190611693565b6000611c05611365565b85604051602001611c179291906121ec565b604051602081830303815290604052805190602001209050600060018286868660405160008152602001604052604051611c54949392919061231a565b6020604051602081039080840390855afa158015611c76573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811615801590611cf157508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b611d27576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b39061251d565b50505050505050565b4690565b60008183611d9d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482018181528351602484015283519092839260449091019190850190808383600083156117015781810151838201526020016116e9565b506000838581611da957fe5b0495945050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282611de95760008555611e2f565b82601f10611e0257805160ff1916838001178555611e2f565b82800160010185558215611e2f579182015b82811115611e2f578251825591602001919060010190611e14565b50611e3b929150611e3f565b5090565b5b80821115611e3b5760008155600101611e40565b803573ffffffffffffffffffffffffffffffffffffffff8116811461064757600080fd5b600082601f830112611e88578081fd5b813567ffffffffffffffff80821115611e9d57fe5b60405160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501168201018181108382111715611ed957fe5b604052828152925082848301602001861015611ef457600080fd5b8260208601602083013760006020848301015250505092915050565b803560ff8116811461064757600080fd5b600060208284031215611f32578081fd5b61193882611e54565b60008060408385031215611f4d578081fd5b611f5683611e54565b9150611f6460208401611e54565b90509250929050565b600080600060608486031215611f81578081fd5b611f8a84611e54565b9250611f9860208501611e54565b9150604084013590509250925092565b60008060008060008060008060006101208a8c031215611fc6578485fd5b611fcf8a611e54565b9850611fdd60208b01611e54565b975060408a0135965060608a0135955060808a0135945060a08a0135935061200760c08b01611f10565b925060e08a013591506101008a013590509295985092959850929598565b600080600080600080600060e0888a03121561203f578283fd5b61204888611e54565b965061205660208901611e54565b9550604088013594506060880135935061207260808901611f10565b925060a0880135915060c0880135905092959891949750929550565b600080604083850312156120a0578182fd5b6120a983611e54565b946020939093013593505050565b600080604083850312156120c9578182fd5b823567ffffffffffffffff808211156120e0578384fd5b6120ec86838701611e78565b93506020850135915080821115612101578283fd5b5061210e85828601611e78565b9150509250929050565b600060208284031215612129578081fd5b813561ffff81168114611938578182fd5b60006020828403121561214b578081fd5b813563ffffffff81168114611938578182fd5b600080835460018082166000811461217d57600181146121b2576121e1565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0083168652607f6002840416860193506121e1565b600283048786526020808720875b838110156121d95781548a8201529085019082016121c0565b505050860193505b509195945050505050565b7f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b901515815260200190565b90815260200190565b95865273ffffffffffffffffffffffffffffffffffffffff94851660208701529290931660408501526060840152608083019190915260a082015260c00190565b96875273ffffffffffffffffffffffffffffffffffffffff95861660208801529390941660408601526060850191909152608084015260a083019190915260c082015260e00190565b94855260208501939093526040840191909152606083015273ffffffffffffffffffffffffffffffffffffffff16608082015260a00190565b93845260ff9290921660208401526040830152606082015260800190565b6000602080835283518082850152825b8181101561236457858101830151858201604001528201612348565b818111156123755783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60208082526028908201527f417263683a3a7265636569766557697468417574683a206175746820616c726560408201527f6164792075736564000000000000000000000000000000000000000000000000606082015260800190565b60208082526023908201527f417263683a3a6d696e743a206d696e74696e67206e6f7420616c6c6f7765642060408201527f7965740000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526023908201527f417263683a3a6275726e3a206275726e696e67206e6f7420616c6c6f7765642060408201527f7965740000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f417263683a3a6d696e743a2063616e6e6f74207472616e7366657220746f207460408201527f6865207a65726f20616464726573730000000000000000000000000000000000606082015260800190565b60208082526024908201527f417263683a3a76616c69646174655369673a20696e76616c6964207369676e6160408201527f7475726500000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602d908201527f417263683a3a7365744d696e744361703a206f6e6c7920534d2063616e20636860408201527f616e6765206d696e742063617000000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f417263683a3a6d696e743a206578636565646564206d696e7420636170000000604082015260600190565b6020808252602f908201527f417263683a3a7365744d657461646174614d616e616765723a206f6e6c79204d60408201527f4d2063616e206368616e6765204d4d0000000000000000000000000000000000606082015260800190565b6020808252602f908201527f417263683a3a7265636569766557697468417574683a2063616c6c6572206d7560408201527f7374206265207468652070617965650000000000000000000000000000000000606082015260800190565b60208082526038908201527f417263683a3a757064617465546f6b656e4d6574613a206f6e6c79204d4d206360408201527f616e2075706461746520746f6b656e206d657461646174610000000000000000606082015260800190565b6020808252601f908201527f417263683a3a7065726d69743a207369676e6174757265206578706972656400604082015260600190565b6020808252602b908201527f417263683a3a6d696e743a206f6e6c792074686520737570706c794d616e616760408201527f65722063616e206d696e74000000000000000000000000000000000000000000606082015260800190565b6020808252602d908201527f417263683a3a5f617070726f76653a20617070726f76652066726f6d2074686560408201527f207a65726f206164647265737300000000000000000000000000000000000000606082015260800190565b60208082526029908201527f417263683a3a7265636569766557697468417574683a2061757468206e6f742060408201527f7965742076616c69640000000000000000000000000000000000000000000000606082015260800190565b60208082526029908201527f417263683a3a7472616e7366657257697468417574683a206175746820616c7260408201527f6561647920757365640000000000000000000000000000000000000000000000606082015260800190565b60208082526044908201527f417263683a3a736574537570706c794368616e676557616974696e675065726960408201527f6f643a2077616974696e6720706572696f64206d757374206265203e206d696e60608201527f696d756d00000000000000000000000000000000000000000000000000000000608082015260a00190565b60208082526024908201527f417263683a3a7472616e7366657257697468417574683a20617574682065787060408201527f6972656400000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526023908201527f417263683a3a7265636569766557697468417574683a2061757468206578706960408201527f7265640000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526031908201527f417263683a3a6275726e3a2063616e6e6f74207472616e736665722066726f6d60408201527f20746865207a65726f2061646472657373000000000000000000000000000000606082015260800190565b6020808252603a908201527f417263683a3a5f7472616e73666572546f6b656e733a2063616e6e6f7420747260408201527f616e7366657220746f20746865207a65726f2061646472657373000000000000606082015260800190565b6020808252602b908201527f417263683a3a6275726e3a206f6e6c792074686520737570706c794d616e616760408201527f65722063616e206275726e000000000000000000000000000000000000000000606082015260800190565b6020808252602b908201527f417263683a3a5f617070726f76653a20617070726f766520746f20746865207a60408201527f65726f2061646472657373000000000000000000000000000000000000000000606082015260800190565b6020808252602a908201527f417263683a3a7472616e7366657257697468417574683a2061757468206e6f7460408201527f207965742076616c696400000000000000000000000000000000000000000000606082015260800190565b60208082526045908201527f417263683a3a736574537570706c794368616e676557616974696e675065726960408201527f6f643a206f6e6c7920534d2063616e206368616e67652077616974696e67207060608201527f6572696f64000000000000000000000000000000000000000000000000000000608082015260a00190565b6020808252602d908201527f417263683a3a736574537570706c794d616e616765723a206f6e6c7920534d2060408201527f63616e206368616e676520534d00000000000000000000000000000000000000606082015260800190565b61ffff91909116815260200190565b63ffffffff91909116815260200190565b60ff9190911681526020019056fe417263683a3a5f6275726e3a206275726e20616d6f756e7420657863656564732066726f6d2062616c616e6365417263683a3a7472616e7366657246726f6d3a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77417263683a3a5f6465637265617365416c6c6f77616e63653a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f417263683a3a5f6275726e3a206275726e20616d6f756e74206578636565647320746f74616c20737570706c79417263683a3a6275726e3a206275726e20616d6f756e74206578636565647320616c6c6f77616e6365417263683a3a5f7472616e73666572546f6b656e733a207472616e7366657220657863656564732066726f6d2062616c616e6365a26469706673582212203ba25741283c711284b3bc50fdb2f81f30640e7f941172cfa544cdd94c24d6a264736f6c63430007040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102415760003560e01c80637ecebe0011610145578063a9059cbb116100bd578063e54420261161008c578063ed24911d11610071578063ed24911d14610472578063ef55bec61461047a578063f147389f1461048d57610241565b8063e54420261461044c578063e94a01021461045f57610241565b8063a9059cbb146103fe578063d505accf14610411578063dd62ed3e14610426578063e3ee160e1461043957610241565b806395d89b41116101145780639e4e7318116100f95780639e4e7318146103db578063a0cc6a68146103e3578063a457c2d7146103eb57610241565b806395d89b41146103c05780639dc29fac146103c857610241565b80637ecebe00146103955780637f2eecc3146103a8578063892b0edf146103b0578063941acc49146103b857610241565b806320606b70116101d857806339509351116101a75780634c9e91a41161018c5780634c9e91a41461035857806370a082311461036d57806376c71ca11461038057610241565b8063395093511461033257806340c10f191461034557610241565b806320606b70146102fa57806323b872dd1461030257806330adf81f14610315578063313ce5671461031d57610241565b806318160ddd1161021457806318160ddd146102ac578063191250d7146102c15780631bb8a4c6146102d45780631d4f8072146102e757610241565b8063055c6e191461024657806306fdde0314610264578063095ea7b314610279578063124cc07714610299575b600080fd5b61024e610495565b60405161025b9190612ccd565b60405180910390f35b61026c61049c565b60405161025b9190612338565b61028c61028736600461208e565b610548565b60405161025b9190612243565b61028c6102a7366004611f21565b61055f565b6102b461064c565b60405161025b919061224e565b61028c6102cf366004611f21565b610652565b61028c6102e2366004612118565b610737565b61028c6102f536600461213a565b610807565b6102b461090f565b61028c610310366004611f6d565b610933565b6102b4610a52565b610325610a76565b60405161025b9190612cde565b61028c61034036600461208e565b610a7b565b61028c61035336600461208e565b610a88565b610360610bed565b60405161025b9190612222565b6102b461037b366004611f21565b610c09565b610388610c31565b60405161025b9190612cbe565b6102b46103a3366004611f21565b610c43565b6102b4610c55565b6102b4610c79565b61024e610c7f565b61026c610c8b565b61028c6103d636600461208e565b610d03565b6102b4610f1a565b6102b4610f3e565b61028c6103f936600461208e565b610f62565b61028c61040c36600461208e565b610f6f565b61042461041f366004612025565b610f7c565b005b6102b4610434366004611f3b565b611058565b610424610447366004611fa8565b611090565b61028c61045a3660046120b7565b61126a565b61028c61046d36600461208e565b611345565b6102b4611365565b610424610488366004611fa8565b6113fc565b610360611568565b6276a70081565b6000805460408051602060026001851615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190941693909304601f810184900484028201840190925281815292918301828280156105405780601f1061051557610100808354040283529160200191610540565b820191906000526020600020905b81548152906001019060200180831161052357829003601f168201915b505050505081565b6000610555338484611584565b5060015b92915050565b60045460009073ffffffffffffffffffffffffffffffffffffffff1633146105bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b39061260e565b60405180910390fd5b60045460405173ffffffffffffffffffffffffffffffffffffffff8085169216907f65e484da94d3a093b70b54f45dda42146a4e7f7f6507a09e39f67ca388987d3e90600090a350600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831617905560015b919050565b60025481565b60035460009073ffffffffffffffffffffffffffffffffffffffff1633146106a6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b390612c61565b60035460405173ffffffffffffffffffffffffffffffffffffffff8085169216907f0cff5c8e2b1e51135595ff4ebaefab9ef5b26373c3b84cbdc4677bb41468843b90600090a3506003805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff00000000000000000000000000000000000000009091161790556001919050565b60035460009073ffffffffffffffffffffffffffffffffffffffff16331461078b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b39061257a565b60065460405161ffff80851692640100000000900416907f57fc526a0acf7c7e07dc107529df54483128b205abc107af2fa47020f82f121490600090a3506006805461ffff8316640100000000027fffffffffffffffffffffffffffffffffffffffffffffffffffff0000ffffffff9091161790556001919050565b60035460009073ffffffffffffffffffffffffffffffffffffffff16331461085b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b390612bde565b6276a70063ffffffff8316101561089e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b3906128d0565b60065460405163ffffffff8085169216907f769f3176a8ee46ae63681a1a630bec4772f7af23a4eeec90eaff41a0e8f1ac6990600090a3506006805463ffffffff83167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000009091161790556001919050565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b73ffffffffffffffffffffffffffffffffffffffff831660008181526007602090815260408083203380855292528220549192909190821480159061099857507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114155b15610a3b5760006109c485604051806060016040528060358152602001612d1a60359139849190611693565b73ffffffffffffffffffffffffffffffffffffffff808916600081815260076020908152604080832094891680845294909152908190208490555192935090917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610a3190859061224e565b60405180910390a3505b610a46868686611744565b50600195945050505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b6000610555338484611876565b60035460009073ffffffffffffffffffffffffffffffffffffffff163314610adc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b39061275c565b73ffffffffffffffffffffffffffffffffffffffff8316610b29576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b3906124c0565b600654600254610b5391620f424091610b4d91640100000000900461ffff166118c5565b9061193f565b821115610b8c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b3906125d7565b600554421015610bc8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b390612406565b600654610be090429063ffffffff9081169061198116565b60055561055583836119f5565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff1660009081526008602052604090205490565b600654640100000000900461ffff1681565b60096020526000908152604090205481565b7fd099cc98ef71107a616c4f0f941f04c322d8e254fe26b3c6668db87aae413de881565b60055481565b60065463ffffffff1681565b60018054604080516020600284861615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190941693909304601f810184900484028201840190925281815292918301828280156105405780601f1061051557610100808354040283529160200191610540565b600354600090339073ffffffffffffffffffffffffffffffffffffffff168114610d59576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b390612ac7565b73ffffffffffffffffffffffffffffffffffffffff8416610da6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b390612a0d565b600554421015610de2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b390612463565b73ffffffffffffffffffffffffffffffffffffffff8085166000818152600760209081526040808320948616808452949091529020549114801590610e4757507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114155b15610eea576000610e7385604051806060016040528060298152602001612dd560299139849190611693565b73ffffffffffffffffffffffffffffffffffffffff808816600081815260076020908152604080832094891680845294909152908190208490555192935090917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610ee090859061224e565b60405180910390a3505b600654610f0290429063ffffffff9081169061198116565b600555610f0f8585611a9d565b506001949350505050565b7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b7f7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a226781565b6000610555338484611b9f565b6000610555338484611744565b42841015610fb6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b390612725565b73ffffffffffffffffffffffffffffffffffffffff87166000908152600960209081526040808320805460018101909155905161101e927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928c928c928c92918c9101612257565b6040516020818303038152906040528051906020012090506110438882868686611bfb565b61104e888888611584565b5050505050505050565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260076020908152604080832093909416825291909152205490565b8542116110c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b390612b81565b844210611102576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b390612953565b73ffffffffffffffffffffffffffffffffffffffff89166000908152600a6020908152604080832087845290915290205460ff161561116d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b390612873565b6040516000906111ad907f7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a2267908c908c908c908c908c908c90602001612298565b6040516020818303038152906040528051906020012090506111d28a82868686611bfb565b73ffffffffffffffffffffffffffffffffffffffff8a166000818152600a6020908152604080832089845290915280822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055518792917f98de503528ee59b575ef0c0a2576a82497bfc029a5685b209e9ec333479b10a591a361125e8a8a8a611744565b50505050505050505050565b60045460009073ffffffffffffffffffffffffffffffffffffffff1633146112be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b3906126c8565b82516112d1906000906020860190611db3565b5081516112e5906001906020850190611db3565b5060016040516112f5919061215e565b6040518091039020600060405161130c919061215e565b604051908190038120907febb95b1e6f8658c3f6a1f6f59a9bea23721d47f22a69339010082475f7db6b2c90600090a350600192915050565b600a60209081526000928352604080842090915290825290205460ff1681565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b600060405161139a919061215e565b6040519081900390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66113cc611d30565b306040516020016113e19594939291906122e1565b60405160208183030381529060405280519060200120905090565b73ffffffffffffffffffffffffffffffffffffffff8816331461144b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b39061266b565b854211611484576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b390612816565b8442106114bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b3906129b0565b73ffffffffffffffffffffffffffffffffffffffff89166000908152600a6020908152604080832087845290915290205460ff1615611528576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b3906123a9565b6040516000906111ad907fd099cc98ef71107a616c4f0f941f04c322d8e254fe26b3c6668db87aae413de8908c908c908c908c908c908c90602001612298565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff83166115d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b3906127b9565b73ffffffffffffffffffffffffffffffffffffffff821661161e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b390612b24565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526007602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061168690859061224e565b60405180910390a3505050565b6000818484111561173c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156117015781810151838201526020016116e9565b50505050905090810190601f16801561172e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b73ffffffffffffffffffffffffffffffffffffffff8216611791576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b390612a6a565b6117db81604051806060016040528060348152602001612dfe6034913973ffffffffffffffffffffffffffffffffffffffff86166000908152600860205260409020549190611693565b73ffffffffffffffffffffffffffffffffffffffff80851660009081526008602052604080822093909355908416815220546118179082611981565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526008602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061168690859061224e565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152600760209081526040808320938616835292905220546118c090849084906118bb9085611981565b611584565b505050565b6000826118d457506000610559565b828202828482816118e157fe5b0414611938576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180612d4f6021913960400191505060405180910390fd5b9392505050565b600061193883836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611d34565b60008282018381101561193857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600254611a029082611981565b60025573ffffffffffffffffffffffffffffffffffffffff8216600090815260086020526040902054611a359082611981565b73ffffffffffffffffffffffffffffffffffffffff83166000818152600860205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611a9190859061224e565b60405180910390a35050565b611ae7816040518060600160405280602d8152602001612ced602d913973ffffffffffffffffffffffffffffffffffffffff85166000908152600860205260409020549190611693565b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611b51816040518060600160405280602d8152602001612da8602d91396002549190611693565b60025560405160009073ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611a9190859061224e565b6118c083836118bb84604051806060016040528060388152602001612d706038913973ffffffffffffffffffffffffffffffffffffffff808a166000908152600760209081526040808320938c16835292905220549190611693565b6000611c05611365565b85604051602001611c179291906121ec565b604051602081830303815290604052805190602001209050600060018286868660405160008152602001604052604051611c54949392919061231a565b6020604051602081039080840390855afa158015611c76573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811615801590611cf157508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b611d27576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b39061251d565b50505050505050565b4690565b60008183611d9d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482018181528351602484015283519092839260449091019190850190808383600083156117015781810151838201526020016116e9565b506000838581611da957fe5b0495945050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282611de95760008555611e2f565b82601f10611e0257805160ff1916838001178555611e2f565b82800160010185558215611e2f579182015b82811115611e2f578251825591602001919060010190611e14565b50611e3b929150611e3f565b5090565b5b80821115611e3b5760008155600101611e40565b803573ffffffffffffffffffffffffffffffffffffffff8116811461064757600080fd5b600082601f830112611e88578081fd5b813567ffffffffffffffff80821115611e9d57fe5b60405160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501168201018181108382111715611ed957fe5b604052828152925082848301602001861015611ef457600080fd5b8260208601602083013760006020848301015250505092915050565b803560ff8116811461064757600080fd5b600060208284031215611f32578081fd5b61193882611e54565b60008060408385031215611f4d578081fd5b611f5683611e54565b9150611f6460208401611e54565b90509250929050565b600080600060608486031215611f81578081fd5b611f8a84611e54565b9250611f9860208501611e54565b9150604084013590509250925092565b60008060008060008060008060006101208a8c031215611fc6578485fd5b611fcf8a611e54565b9850611fdd60208b01611e54565b975060408a0135965060608a0135955060808a0135945060a08a0135935061200760c08b01611f10565b925060e08a013591506101008a013590509295985092959850929598565b600080600080600080600060e0888a03121561203f578283fd5b61204888611e54565b965061205660208901611e54565b9550604088013594506060880135935061207260808901611f10565b925060a0880135915060c0880135905092959891949750929550565b600080604083850312156120a0578182fd5b6120a983611e54565b946020939093013593505050565b600080604083850312156120c9578182fd5b823567ffffffffffffffff808211156120e0578384fd5b6120ec86838701611e78565b93506020850135915080821115612101578283fd5b5061210e85828601611e78565b9150509250929050565b600060208284031215612129578081fd5b813561ffff81168114611938578182fd5b60006020828403121561214b578081fd5b813563ffffffff81168114611938578182fd5b600080835460018082166000811461217d57600181146121b2576121e1565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0083168652607f6002840416860193506121e1565b600283048786526020808720875b838110156121d95781548a8201529085019082016121c0565b505050860193505b509195945050505050565b7f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b901515815260200190565b90815260200190565b95865273ffffffffffffffffffffffffffffffffffffffff94851660208701529290931660408501526060840152608083019190915260a082015260c00190565b96875273ffffffffffffffffffffffffffffffffffffffff95861660208801529390941660408601526060850191909152608084015260a083019190915260c082015260e00190565b94855260208501939093526040840191909152606083015273ffffffffffffffffffffffffffffffffffffffff16608082015260a00190565b93845260ff9290921660208401526040830152606082015260800190565b6000602080835283518082850152825b8181101561236457858101830151858201604001528201612348565b818111156123755783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60208082526028908201527f417263683a3a7265636569766557697468417574683a206175746820616c726560408201527f6164792075736564000000000000000000000000000000000000000000000000606082015260800190565b60208082526023908201527f417263683a3a6d696e743a206d696e74696e67206e6f7420616c6c6f7765642060408201527f7965740000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526023908201527f417263683a3a6275726e3a206275726e696e67206e6f7420616c6c6f7765642060408201527f7965740000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f417263683a3a6d696e743a2063616e6e6f74207472616e7366657220746f207460408201527f6865207a65726f20616464726573730000000000000000000000000000000000606082015260800190565b60208082526024908201527f417263683a3a76616c69646174655369673a20696e76616c6964207369676e6160408201527f7475726500000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602d908201527f417263683a3a7365744d696e744361703a206f6e6c7920534d2063616e20636860408201527f616e6765206d696e742063617000000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f417263683a3a6d696e743a206578636565646564206d696e7420636170000000604082015260600190565b6020808252602f908201527f417263683a3a7365744d657461646174614d616e616765723a206f6e6c79204d60408201527f4d2063616e206368616e6765204d4d0000000000000000000000000000000000606082015260800190565b6020808252602f908201527f417263683a3a7265636569766557697468417574683a2063616c6c6572206d7560408201527f7374206265207468652070617965650000000000000000000000000000000000606082015260800190565b60208082526038908201527f417263683a3a757064617465546f6b656e4d6574613a206f6e6c79204d4d206360408201527f616e2075706461746520746f6b656e206d657461646174610000000000000000606082015260800190565b6020808252601f908201527f417263683a3a7065726d69743a207369676e6174757265206578706972656400604082015260600190565b6020808252602b908201527f417263683a3a6d696e743a206f6e6c792074686520737570706c794d616e616760408201527f65722063616e206d696e74000000000000000000000000000000000000000000606082015260800190565b6020808252602d908201527f417263683a3a5f617070726f76653a20617070726f76652066726f6d2074686560408201527f207a65726f206164647265737300000000000000000000000000000000000000606082015260800190565b60208082526029908201527f417263683a3a7265636569766557697468417574683a2061757468206e6f742060408201527f7965742076616c69640000000000000000000000000000000000000000000000606082015260800190565b60208082526029908201527f417263683a3a7472616e7366657257697468417574683a206175746820616c7260408201527f6561647920757365640000000000000000000000000000000000000000000000606082015260800190565b60208082526044908201527f417263683a3a736574537570706c794368616e676557616974696e675065726960408201527f6f643a2077616974696e6720706572696f64206d757374206265203e206d696e60608201527f696d756d00000000000000000000000000000000000000000000000000000000608082015260a00190565b60208082526024908201527f417263683a3a7472616e7366657257697468417574683a20617574682065787060408201527f6972656400000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526023908201527f417263683a3a7265636569766557697468417574683a2061757468206578706960408201527f7265640000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526031908201527f417263683a3a6275726e3a2063616e6e6f74207472616e736665722066726f6d60408201527f20746865207a65726f2061646472657373000000000000000000000000000000606082015260800190565b6020808252603a908201527f417263683a3a5f7472616e73666572546f6b656e733a2063616e6e6f7420747260408201527f616e7366657220746f20746865207a65726f2061646472657373000000000000606082015260800190565b6020808252602b908201527f417263683a3a6275726e3a206f6e6c792074686520737570706c794d616e616760408201527f65722063616e206275726e000000000000000000000000000000000000000000606082015260800190565b6020808252602b908201527f417263683a3a5f617070726f76653a20617070726f766520746f20746865207a60408201527f65726f2061646472657373000000000000000000000000000000000000000000606082015260800190565b6020808252602a908201527f417263683a3a7472616e7366657257697468417574683a2061757468206e6f7460408201527f207965742076616c696400000000000000000000000000000000000000000000606082015260800190565b60208082526045908201527f417263683a3a736574537570706c794368616e676557616974696e675065726960408201527f6f643a206f6e6c7920534d2063616e206368616e67652077616974696e67207060608201527f6572696f64000000000000000000000000000000000000000000000000000000608082015260a00190565b6020808252602d908201527f417263683a3a736574537570706c794d616e616765723a206f6e6c7920534d2060408201527f63616e206368616e676520534d00000000000000000000000000000000000000606082015260800190565b61ffff91909116815260200190565b63ffffffff91909116815260200190565b60ff9190911681526020019056fe417263683a3a5f6275726e3a206275726e20616d6f756e7420657863656564732066726f6d2062616c616e6365417263683a3a7472616e7366657246726f6d3a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77417263683a3a5f6465637265617365416c6c6f77616e63653a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f417263683a3a5f6275726e3a206275726e20616d6f756e74206578636565647320746f74616c20737570706c79417263683a3a6275726e3a206275726e20616d6f756e74206578636565647320616c6c6f77616e6365417263683a3a5f7472616e73666572546f6b656e733a207472616e7366657220657863656564732066726f6d2062616c616e6365a26469706673582212203ba25741283c711284b3bc50fdb2f81f30640e7f941172cfa544cdd94c24d6a264736f6c63430007040033",
  "devdoc": {
    "details": "The governance token for Archer DAO ERC-20 with supply controls + add-ons to allow for offchain signing See EIP-712, EIP-2612, and EIP-3009 for details",
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "params": {
          "account": "The address of the account holding the funds",
          "spender": "The address of the account spending the funds"
        },
        "returns": {
          "_0": "The number of tokens approved"
        }
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead",
        "params": {
          "amount": "The number of tokens that are approved (2^256-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "Whether or not the approval succeeded"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address of the account to get the balance of"
        },
        "returns": {
          "_0": "The number of tokens held"
        }
      },
      "burn(address,uint256)": {
        "params": {
          "amount": "The number of tokens to be burned",
          "src": "The account that will burn tokens"
        },
        "returns": {
          "_0": "Boolean indicating success of burn"
        }
      },
      "constructor": {
        "params": {
          "_firstSupplyChangeAllowed": "The timestamp after which the first supply change may occur",
          "_metadataManager": "The account with the ability to change token metadata",
          "_supplyManager": "The address with minting ability"
        }
      },
      "decreaseAllowance(address,uint256)": {
        "params": {
          "spender": "Spender's address",
          "subtractedValue": "Amount of decrease in allowance"
        },
        "returns": {
          "_0": "True if successful"
        }
      },
      "getDomainSeparator()": {
        "returns": {
          "_0": "Separator"
        }
      },
      "increaseAllowance(address,uint256)": {
        "params": {
          "addedValue": "Amount of increase in allowance",
          "spender": "Spender's address"
        },
        "returns": {
          "_0": "True if successful"
        }
      },
      "mint(address,uint256)": {
        "params": {
          "amount": "The number of tokens to be minted",
          "dst": "The address of the destination account"
        },
        "returns": {
          "_0": "Boolean indicating success of mint"
        }
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "The time at which to expire the signature",
          "owner": "The address to approve from",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "spender": "The address to be approved",
          "v": "The recovery byte of the signature",
          "value": "The number of tokens that are approved (2^256-1 means infinite)"
        }
      },
      "receiveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
        "details": "This has an additional check to ensure that the payee's address matches the caller of this function to prevent front-running attacks.",
        "params": {
          "from": "Payer's address (Authorizer)",
          "nonce": "Unique nonce",
          "r": "r of the signature",
          "s": "s of the signature",
          "to": "Payee's address",
          "v": "v of the signature",
          "validAfter": "The time after which this is valid (unix time)",
          "validBefore": "The time before which this is valid (unix time)",
          "value": "Amount to be transferred"
        }
      },
      "setMetadataManager(address)": {
        "params": {
          "newMetadataManager": "The address of the new metadata manager"
        },
        "returns": {
          "_0": "true if successful"
        }
      },
      "setMintCap(uint16)": {
        "params": {
          "newCap": "The new mint cap in bips (10,000 bips = 1% of totalSupply)"
        },
        "returns": {
          "_0": "true if successful"
        }
      },
      "setSupplyChangeWaitingPeriod(uint32)": {
        "params": {
          "period": "The new supply change waiting period"
        },
        "returns": {
          "_0": "true if succssful"
        }
      },
      "setSupplyManager(address)": {
        "params": {
          "newSupplyManager": "The address of the new supply manager"
        },
        "returns": {
          "_0": "true if successful"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account",
          "src": "The address of the source account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
        "params": {
          "from": "Payer's address (Authorizer)",
          "nonce": "Unique nonce",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "to": "Payee's address",
          "v": "The recovery byte of the signature",
          "validAfter": "The time after which this is valid (unix time)",
          "validBefore": "The time before which this is valid (unix time)",
          "value": "Amount to be transferred"
        }
      },
      "updateTokenMetadata(string,string)": {
        "params": {
          "tokenName": "The new name for the token",
          "tokenSymbol": "The new symbol for the token"
        },
        "returns": {
          "_0": "true if successful"
        }
      }
    },
    "stateVariables": {
      "allowances": {
        "details": "Allowance amounts on behalf of others"
      },
      "authorizationState": {
        "details": "authorizer address > nonce > state (true = used / false = unused)"
      },
      "balances": {
        "details": "Official record of token balances for each account"
      }
    },
    "title": "ArchToken",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "notice": "The standard EIP-20 approval event"
      },
      "AuthorizationUsed(address,bytes32)": {
        "notice": "An event that's emitted whenever an authorized transfer occurs"
      },
      "MetadataManagerChanged(address,address)": {
        "notice": "An event that's emitted when the metadataManager address is changed"
      },
      "MintCapChanged(uint16,uint16)": {
        "notice": "An event that's emitted when the mintCap is changed"
      },
      "SupplyChangeWaitingPeriodChanged(uint32,uint32)": {
        "notice": "An event that's emitted when the supplyChangeWaitingPeriod is changed"
      },
      "SupplyManagerChanged(address,address)": {
        "notice": "An event that's emitted when the supplyManager address is changed"
      },
      "TokenMetaUpdated(string,string)": {
        "notice": "An event that's emitted when the token name and symbol are changed"
      },
      "Transfer(address,address,uint256)": {
        "notice": "The standard EIP-20 transfer event"
      }
    },
    "kind": "user",
    "methods": {
      "DOMAIN_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the contract's domain keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\")"
      },
      "PERMIT_TYPEHASH()": {
        "notice": "The EIP-712 typehash for permit (EIP-2612) keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");"
      },
      "RECEIVE_WITH_AUTHORIZATION_TYPEHASH()": {
        "notice": "The EIP-712 typehash for receiveWithAuthorization (EIP-3009) keccak256(\"ReceiveWithAuthorization(address from,address to,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)\")"
      },
      "TRANSFER_WITH_AUTHORIZATION_TYPEHASH()": {
        "notice": "The EIP-712 typehash for transferWithAuthorization (EIP-3009) keccak256(\"TransferWithAuthorization(address from,address to,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)\");"
      },
      "VERSION_HASH()": {
        "notice": "The EIP-712 version hash keccak256(\"1\");"
      },
      "allowance(address,address)": {
        "notice": "Get the number of tokens `spender` is approved to spend on behalf of `account`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens held by the `account`"
      },
      "burn(address,uint256)": {
        "notice": "Burn tokens"
      },
      "constructor": {
        "notice": "Construct a new Arch token"
      },
      "decimals()": {
        "notice": "EIP-20 token decimals for this token"
      },
      "decreaseAllowance(address,uint256)": {
        "notice": "Decrease the allowance by a given amount"
      },
      "getDomainSeparator()": {
        "notice": "EIP-712 Domain separator"
      },
      "increaseAllowance(address,uint256)": {
        "notice": "Increase the allowance by a given amount"
      },
      "metadataManager()": {
        "notice": "Address which may change token metadata"
      },
      "mint(address,uint256)": {
        "notice": "Mint new tokens"
      },
      "mintCap()": {
        "notice": "Cap on the total amount that can be minted at each mint (measured in bips: 10,000 bips = 1% of current totalSupply)"
      },
      "name()": {
        "notice": "EIP-20 token name for this token"
      },
      "nonces(address)": {
        "notice": "A record of states for signing / validating signatures"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Triggers an approval from owner to spender"
      },
      "receiveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
        "notice": "Receive a transfer with a signed authorization from the payer"
      },
      "setMetadataManager(address)": {
        "notice": "Change the metadataManager address"
      },
      "setMintCap(uint16)": {
        "notice": "Set the maximum amount of tokens that can be minted at once"
      },
      "setSupplyChangeWaitingPeriod(uint32)": {
        "notice": "Set the minimum time between supply changes"
      },
      "setSupplyManager(address)": {
        "notice": "Change the supplyManager address"
      },
      "supplyChangeAllowedAfter()": {
        "notice": "The timestamp after which a supply change may occur"
      },
      "supplyChangeWaitingPeriod()": {
        "notice": "The initial minimum time between changing the token supply"
      },
      "supplyChangeWaitingPeriodMinimum()": {
        "notice": "Hard cap on the minimum time between changing the token supply"
      },
      "supplyManager()": {
        "notice": "Address which may mint/burn tokens"
      },
      "symbol()": {
        "notice": "EIP-20 token symbol for this token"
      },
      "totalSupply()": {
        "notice": "Total number of tokens in circulation"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      },
      "transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
        "notice": "Transfer tokens with a signed authorization"
      },
      "updateTokenMetadata(string,string)": {
        "notice": "Update the token name and symbol"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11,
        "contract": "contracts/ArchToken.sol:ArchToken",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 15,
        "contract": "contracts/ArchToken.sol:ArchToken",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 23,
        "contract": "contracts/ArchToken.sol:ArchToken",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 26,
        "contract": "contracts/ArchToken.sol:ArchToken",
        "label": "supplyManager",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 29,
        "contract": "contracts/ArchToken.sol:ArchToken",
        "label": "metadataManager",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 32,
        "contract": "contracts/ArchToken.sol:ArchToken",
        "label": "supplyChangeAllowedAfter",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 38,
        "contract": "contracts/ArchToken.sol:ArchToken",
        "label": "supplyChangeWaitingPeriod",
        "offset": 0,
        "slot": "6",
        "type": "t_uint32"
      },
      {
        "astId": 48,
        "contract": "contracts/ArchToken.sol:ArchToken",
        "label": "mintCap",
        "offset": 4,
        "slot": "6",
        "type": "t_uint16"
      },
      {
        "astId": 55,
        "contract": "contracts/ArchToken.sol:ArchToken",
        "label": "allowances",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 60,
        "contract": "contracts/ArchToken.sol:ArchToken",
        "label": "balances",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 85,
        "contract": "contracts/ArchToken.sol:ArchToken",
        "label": "nonces",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 92,
        "contract": "contracts/ArchToken.sol:ArchToken",
        "label": "authorizationState",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}