{
  "address": "0x0AdB62b2E331E05c718b96184317D320548A9377",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "locker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "startTime",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "durationInDays",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "cliffInDays",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votingPower",
          "type": "uint256"
        }
      ],
      "name": "LockCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "oldDuration",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "newDuration",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "oldCliff",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "newCliff",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "startTime",
          "type": "uint48"
        }
      ],
      "name": "LockExtended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountClaimed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votingPowerRemoved",
          "type": "uint256"
        }
      ],
      "name": "UnlockedTokensClaimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "activeLockBalances",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "uint48",
                  "name": "startTime",
                  "type": "uint48"
                },
                {
                  "internalType": "uint16",
                  "name": "vestingDurationInDays",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "cliffDurationInDays",
                  "type": "uint16"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountClaimed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "votingPower",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Vault.Lock",
              "name": "lock",
              "type": "tuple"
            }
          ],
          "internalType": "struct Vault.LockBalance[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "activeLockIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "activeLocks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint48",
              "name": "startTime",
              "type": "uint48"
            },
            {
              "internalType": "uint16",
              "name": "vestingDurationInDays",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "cliffDurationInDays",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votingPower",
              "type": "uint256"
            }
          ],
          "internalType": "struct Vault.Lock[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allActiveLockBalances",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "uint48",
                  "name": "startTime",
                  "type": "uint48"
                },
                {
                  "internalType": "uint16",
                  "name": "vestingDurationInDays",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "cliffDurationInDays",
                  "type": "uint16"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountClaimed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "votingPower",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Vault.Lock",
              "name": "lock",
              "type": "tuple"
            }
          ],
          "internalType": "struct Vault.LockBalance[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allActiveLockIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allActiveLocks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint48",
              "name": "startTime",
              "type": "uint48"
            },
            {
              "internalType": "uint16",
              "name": "vestingDurationInDays",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "cliffDurationInDays",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votingPower",
              "type": "uint256"
            }
          ],
          "internalType": "struct Vault.Lock[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "allLocks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint48",
              "name": "startTime",
              "type": "uint48"
            },
            {
              "internalType": "uint16",
              "name": "vestingDurationInDays",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "cliffDurationInDays",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votingPower",
              "type": "uint256"
            }
          ],
          "internalType": "struct Vault.Lock[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "locks",
          "type": "uint256[]"
        }
      ],
      "name": "claimAllUnlockedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "locks",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "claimUnlockedTokenAmounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "claimableBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "vestingDaysToAdd",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "cliffDaysToAdd",
          "type": "uint16"
        }
      ],
      "name": "extendLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "lockBalance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "uint48",
                  "name": "startTime",
                  "type": "uint48"
                },
                {
                  "internalType": "uint16",
                  "name": "vestingDurationInDays",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "cliffDurationInDays",
                  "type": "uint16"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountClaimed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "votingPower",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Vault.Lock",
              "name": "lock",
              "type": "tuple"
            }
          ],
          "internalType": "struct Vault.LockBalance",
          "name": "balance",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockManager",
      "outputs": [
        {
          "internalType": "contract ILockManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "locker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint48",
          "name": "startTime",
          "type": "uint48"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "vestingDurationInDays",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "cliffDurationInDays",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "grantVotingPower",
          "type": "bool"
        }
      ],
      "name": "lockTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "locker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint48",
          "name": "startTime",
          "type": "uint48"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "vestingDurationInDays",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "cliffDurationInDays",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "grantVotingPower",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "lockTokensWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numLocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "tokenBalance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votingPower",
              "type": "uint256"
            }
          ],
          "internalType": "struct Vault.TokenBalance",
          "name": "balance",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenLocks",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint48",
          "name": "startTime",
          "type": "uint48"
        },
        {
          "internalType": "uint16",
          "name": "vestingDurationInDays",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "cliffDurationInDays",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountClaimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votingPower",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "totalTokenBalance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votingPower",
              "type": "uint256"
            }
          ],
          "internalType": "struct Vault.TokenBalance",
          "name": "balance",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x50896282b0eb6cbcb9fb9caa244c908a1d0d246fcb00e0137939124e9a617172",
  "receipt": {
    "to": null,
    "from": "0x62E0D8E38297E4A50D5abBb822CA7548b7d2F9ca",
    "contractAddress": "0x0AdB62b2E331E05c718b96184317D320548A9377",
    "transactionIndex": 97,
    "gasUsed": "3702948",
    "logsBloom": "0x
    "blockHash": "0x4dde92808ed66baed54f98ac2f3e666a7a9663dda298487d91cc7d82842d0034",
    "transactionHash": "0x50896282b0eb6cbcb9fb9caa244c908a1d0d246fcb00e0137939124e9a617172",
    "logs": [],
    "blockNumber": 11914121,
    "cumulativeGasUsed": "9571850",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB05834034b21531F1689456B1D79fb0569E23474"
  ],
  "solcInputHash": "2e9142a3380a2374076d02017f19bf74",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"durationInDays\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"cliffInDays\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"name\":\"LockCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"oldDuration\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"newDuration\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldCliff\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newCliff\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"}],\"name\":\"LockExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingPowerRemoved\",\"type\":\"uint256\"}],\"name\":\"UnlockedTokensClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"activeLockBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.Lock\",\"name\":\"lock\",\"type\":\"tuple\"}],\"internalType\":\"struct Vault.LockBalance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"activeLockIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"activeLocks\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.Lock[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allActiveLockBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.Lock\",\"name\":\"lock\",\"type\":\"tuple\"}],\"internalType\":\"struct Vault.LockBalance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allActiveLockIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allActiveLocks\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.Lock[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"allLocks\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.Lock[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"locks\",\"type\":\"uint256[]\"}],\"name\":\"claimAllUnlockedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"locks\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"claimUnlockedTokenAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"claimableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"vestingDaysToAdd\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDaysToAdd\",\"type\":\"uint16\"}],\"name\":\"extendLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"lockBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.Lock\",\"name\":\"lock\",\"type\":\"tuple\"}],\"internalType\":\"struct Vault.LockBalance\",\"name\":\"balance\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockManager\",\"outputs\":[{\"internalType\":\"contract ILockManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"grantVotingPower\",\"type\":\"bool\"}],\"name\":\"lockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"grantVotingPower\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"lockTokensWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numLocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.TokenBalance\",\"name\":\"balance\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenLocks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalTokenBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.TokenBalance\",\"name\":\"balance\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract for locking up tokens for set periods of time  + optionally providing locked tokens with voting power\",\"kind\":\"dev\",\"methods\":{\"activeLockBalances(address)\":{\"params\":{\"receiver\":\"The address that has locked balances\"},\"returns\":{\"_0\":\"the active lock balances\"}},\"activeLockIds(address)\":{\"params\":{\"receiver\":\"The address that has locked balances\"},\"returns\":{\"_0\":\"the active lock ids\"}},\"activeLocks(address)\":{\"params\":{\"receiver\":\"The address that has locked balances\"},\"returns\":{\"_0\":\"the locks\"}},\"allActiveLockBalances()\":{\"returns\":{\"_0\":\"the active lock balances\"}},\"allActiveLockIds()\":{\"returns\":{\"_0\":\"the lock ids\"}},\"allActiveLocks()\":{\"returns\":{\"_0\":\"the locks\"}},\"allLocks(address)\":{\"params\":{\"receiver\":\"The address that has locked balances\"},\"returns\":{\"_0\":\"the locks\"}},\"claimAllUnlockedTokens(uint256[])\":{\"details\":\"Errors if no tokens are claimableIt is advised receivers check they are entitled to claim via `claimableBalance` before calling this\",\"params\":{\"locks\":\"The lock ids for unlocked token balances\"}},\"claimUnlockedTokenAmounts(uint256[],uint256[])\":{\"details\":\"Errors if token amounts provided are > claimable amountsIt is advised receivers check they are entitled to claim via `claimableBalance` before calling this\",\"params\":{\"amounts\":\"The amount of each unlocked token to claim\",\"locks\":\"The lock ids for unlocked token balances\"}},\"claimableBalance(uint256)\":{\"details\":\"Returns 0 if cliff duration has not ended\",\"params\":{\"lockId\":\"The lock ID\"},\"returns\":{\"_0\":\"The amount that can be claimed\"}},\"extendLock(uint256,uint16,uint16)\":{\"params\":{\"cliffDaysToAdd\":\"The number of days to add to cliff duration\",\"lockId\":\"The lock id for a locked token balance\",\"vestingDaysToAdd\":\"The number of days to add to vesting duration\"}},\"lockBalance(uint256)\":{\"params\":{\"lockId\":\"The lock ID\"},\"returns\":{\"balance\":\"the lock balance\"}},\"lockTokens(address,address,address,uint48,uint256,uint16,uint16,bool)\":{\"params\":{\"amount\":\"The amount of tokens being locked\",\"cliffDurationInDays\":\"The cliff duration in days\",\"grantVotingPower\":\"if true, give user voting power from tokens\",\"locker\":\"The account that is locking tokens\",\"receiver\":\"The account that will be able to retrieve unlocked tokens\",\"startTime\":\"The unix timestamp when the lock period will start\",\"vestingDurationInDays\":\"The vesting period in days\"}},\"lockTokensWithPermit(address,address,address,uint48,uint256,uint16,uint16,bool,uint256,uint8,bytes32,bytes32)\":{\"details\":\"It is up to the frontend developer to ensure the token implements permit - otherwise this will fail\",\"params\":{\"amount\":\"The amount of tokens being locked\",\"cliffDurationInDays\":\"The lock cliff duration in days\",\"deadline\":\"The time at which to expire the signature\",\"grantVotingPower\":\"if true, give user voting power from tokens\",\"locker\":\"The account that is locking tokens\",\"r\":\"Half of the ECDSA signature pair\",\"receiver\":\"The account that will be able to retrieve unlocked tokens\",\"s\":\"Half of the ECDSA signature pair\",\"startTime\":\"The unix timestamp when the lock period will start\",\"token\":\"Address of token to lock\",\"v\":\"The recovery byte of the signature\",\"vestingDurationInDays\":\"The lock period in days\"}},\"tokenBalance(address,address)\":{\"params\":{\"receiver\":\"The address that has unlocked balances\",\"token\":\"The token to check\"},\"returns\":{\"balance\":\"the total active balance of `token` for `receiver`\"}},\"totalTokenBalance(address)\":{\"params\":{\"token\":\"The token to check\"},\"returns\":{\"balance\":\"the total active balance of `token`\"}}},\"stateVariables\":{\"SECONDS_PER_DAY\":{\"details\":\"Used to translate lock periods specified in days to seconds\"}},\"title\":\"Vault\",\"version\":1},\"userdoc\":{\"events\":{\"LockCreated(address,address,address,uint256,uint256,uint48,uint16,uint16,uint256)\":{\"notice\":\"Event emitted when a new lock is created\"},\"LockExtended(uint256,uint16,uint16,uint16,uint16,uint48)\":{\"notice\":\"Event emitted when lock duration extended\"},\"UnlockedTokensClaimed(address,address,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when tokens are claimed by a receiver from an unlocked balance\"}},\"kind\":\"user\",\"methods\":{\"activeLockBalances(address)\":{\"notice\":\"Get all active token lock balances for receiver\"},\"activeLockIds(address)\":{\"notice\":\"Get all active token lock ids for receiver\"},\"activeLocks(address)\":{\"notice\":\"Get all active token locks for receiver\"},\"allActiveLockBalances()\":{\"notice\":\"Get all active token lock balances\"},\"allActiveLockIds()\":{\"notice\":\"Get all active token lock ids\"},\"allActiveLocks()\":{\"notice\":\"Get all active token locks\"},\"allLocks(address)\":{\"notice\":\"Get all token locks for receiver\"},\"claimAllUnlockedTokens(uint256[])\":{\"notice\":\"Allows receiver to claim all of their unlocked tokens for a set of locks\"},\"claimUnlockedTokenAmounts(uint256[],uint256[])\":{\"notice\":\"Allows receiver to claim a portion of their unlocked tokens for a given lock\"},\"claimableBalance(uint256)\":{\"notice\":\"Get claimable balance for a given lock id\"},\"constructor\":{\"notice\":\"Create a new Vault contract\"},\"extendLock(uint256,uint16,uint16)\":{\"notice\":\"Allows receiver extend lock periods for a given lock\"},\"lockBalance(uint256)\":{\"notice\":\"Get lock balance for a given lock id\"},\"lockIds(address,uint256)\":{\"notice\":\"Mapping of address to lock id\"},\"lockManager()\":{\"notice\":\"lockManager contract\"},\"lockTokens(address,address,address,uint48,uint256,uint16,uint16,bool)\":{\"notice\":\"Lock tokens, optionally providing voting power\"},\"lockTokensWithPermit(address,address,address,uint48,uint256,uint16,uint16,bool,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Lock tokens, using permit for approval\"},\"numLocks()\":{\"notice\":\"Number of locks\"},\"tokenBalance(address,address)\":{\"notice\":\"Get token balance of receiver\"},\"tokenLocks(uint256)\":{\"notice\":\"Mapping of lock id > token locks\"},\"totalTokenBalance(address)\":{\"notice\":\"Get total token balance\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Vault.sol\":\"Vault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/ILockManager.sol\\\";\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\n\\n/**\\n * @title Vault\\n * @dev Contract for locking up tokens for set periods of time \\n * + optionally providing locked tokens with voting power\\n */\\ncontract Vault {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice lockManager contract\\n    ILockManager public lockManager;\\n\\n    /// @notice Lock definition\\n    struct Lock {\\n        address token;\\n        address receiver;\\n        uint48 startTime;\\n        uint16 vestingDurationInDays;\\n        uint16 cliffDurationInDays;\\n        uint256 amount;\\n        uint256 amountClaimed;\\n        uint256 votingPower;\\n    }\\n\\n    /// @notice Lock balance definition\\n    struct LockBalance {\\n        uint256 id;\\n        uint256 claimableAmount;\\n        Lock lock;\\n    }\\n\\n    ///@notice Token balance definition\\n    struct TokenBalance {\\n        uint256 totalAmount;\\n        uint256 claimableAmount;\\n        uint256 claimedAmount;\\n        uint256 votingPower;\\n    }\\n\\n    /// @dev Used to translate lock periods specified in days to seconds\\n    uint256 constant internal SECONDS_PER_DAY = 86400;\\n    \\n    /// @notice Mapping of lock id > token locks\\n    mapping (uint256 => Lock) public tokenLocks;\\n\\n    /// @notice Mapping of address to lock id\\n    mapping (address => uint256[]) public lockIds;\\n\\n    ///@notice Number of locks\\n    uint256 public numLocks;\\n\\n    /// @notice Event emitted when a new lock is created\\n    event LockCreated(address indexed token, address indexed locker, address indexed receiver, uint256 lockId, uint256 amount, uint48 startTime, uint16 durationInDays, uint16 cliffInDays, uint256 votingPower);\\n    \\n    /// @notice Event emitted when tokens are claimed by a receiver from an unlocked balance\\n    event UnlockedTokensClaimed(address indexed receiver, address indexed token, uint256 indexed lockId, uint256 amountClaimed, uint256 votingPowerRemoved);\\n\\n    /// @notice Event emitted when lock duration extended\\n    event LockExtended(uint256 indexed lockId, uint16 indexed oldDuration, uint16 indexed newDuration, uint16 oldCliff, uint16 newCliff, uint48 startTime);\\n\\n    /**\\n     * @notice Create a new Vault contract\\n     */\\n    constructor(address _lockManager) {\\n        lockManager = ILockManager(_lockManager);\\n    }\\n\\n    /**\\n     * @notice Lock tokens, optionally providing voting power\\n     * @param locker The account that is locking tokens\\n     * @param receiver The account that will be able to retrieve unlocked tokens\\n     * @param startTime The unix timestamp when the lock period will start\\n     * @param amount The amount of tokens being locked\\n     * @param vestingDurationInDays The vesting period in days\\n     * @param cliffDurationInDays The cliff duration in days\\n     * @param grantVotingPower if true, give user voting power from tokens\\n     */\\n    function lockTokens(\\n        address token,\\n        address locker,\\n        address receiver,\\n        uint48 startTime,\\n        uint256 amount,\\n        uint16 vestingDurationInDays,\\n        uint16 cliffDurationInDays,\\n        bool grantVotingPower\\n    )\\n        external\\n    {\\n        require(vestingDurationInDays > 0, \\\"Vault::lockTokens: vesting duration must be > 0\\\");\\n        require(vestingDurationInDays <= 25*365, \\\"Vault::lockTokens: vesting duration more than 25 years\\\");\\n        require(vestingDurationInDays >= cliffDurationInDays, \\\"Vault::lockTokens: vesting duration < cliff\\\");\\n        require(amount > 0, \\\"Vault::lockTokens: amount not > 0\\\");\\n        _lockTokens(token, locker, receiver, startTime, amount, vestingDurationInDays, cliffDurationInDays, grantVotingPower);\\n    }\\n\\n    /**\\n     * @notice Lock tokens, using permit for approval\\n     * @dev It is up to the frontend developer to ensure the token implements permit - otherwise this will fail\\n     * @param token Address of token to lock\\n     * @param locker The account that is locking tokens\\n     * @param receiver The account that will be able to retrieve unlocked tokens\\n     * @param startTime The unix timestamp when the lock period will start\\n     * @param amount The amount of tokens being locked\\n     * @param vestingDurationInDays The lock period in days\\n     * @param cliffDurationInDays The lock cliff duration in days\\n     * @param grantVotingPower if true, give user voting power from tokens\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function lockTokensWithPermit(\\n        address token,\\n        address locker,\\n        address receiver,\\n        uint48 startTime,\\n        uint256 amount,\\n        uint16 vestingDurationInDays,\\n        uint16 cliffDurationInDays,\\n        bool grantVotingPower,\\n        uint256 deadline,\\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) \\n        external\\n    {\\n        require(vestingDurationInDays > 0, \\\"Vault::lockTokensWithPermit: vesting duration must be > 0\\\");\\n        require(vestingDurationInDays <= 25*365, \\\"Vault::lockTokensWithPermit: vesting duration more than 25 years\\\");\\n        require(vestingDurationInDays >= cliffDurationInDays, \\\"Vault::lockTokensWithPermit: duration < cliff\\\");\\n        require(amount > 0, \\\"Vault::lockTokensWithPermit: amount not > 0\\\");\\n\\n        // Set approval using permit signature\\n        IERC20(token).permit(locker, address(this), amount, deadline, v, r, s);\\n        _lockTokens(token, locker, receiver, startTime, amount, vestingDurationInDays, cliffDurationInDays, grantVotingPower);\\n    }\\n\\n    /**\\n     * @notice Get all active token lock ids\\n     * @return the lock ids\\n     */\\n    function allActiveLockIds() external view returns(uint256[] memory){\\n        uint256 activeCount;\\n\\n        // Get number of active locks\\n        for (uint256 i; i < numLocks; i++) {\\n            Lock memory lock = tokenLocks[i];\\n            if(lock.amount != lock.amountClaimed) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Create result array of length `activeCount`\\n        uint256[] memory result = new uint256[](activeCount);\\n        uint256 j;\\n\\n        // Populate result array\\n        for (uint256 i; i < numLocks; i++) {\\n            Lock memory lock = tokenLocks[i];\\n            if(lock.amount != lock.amountClaimed) {\\n                result[j] = i;\\n                j++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get all active token locks\\n     * @return the locks\\n     */\\n    function allActiveLocks() external view returns(Lock[] memory){\\n        uint256 activeCount;\\n\\n        // Get number of active locks\\n        for (uint256 i; i < numLocks; i++) {\\n            Lock memory lock = tokenLocks[i];\\n            if(lock.amount != lock.amountClaimed) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Create result array of length `activeCount`\\n        Lock[] memory result = new Lock[](activeCount);\\n        uint256 j;\\n\\n        // Populate result array\\n        for (uint256 i; i < numLocks; i++) {\\n            Lock memory lock = tokenLocks[i];\\n            if(lock.amount != lock.amountClaimed) {\\n                result[j] = lock;\\n                j++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get all active token lock balances\\n     * @return the active lock balances\\n     */\\n    function allActiveLockBalances() external view returns(LockBalance[] memory){\\n        uint256 activeCount;\\n\\n        // Get number of active locks\\n        for (uint256 i; i < numLocks; i++) {\\n            Lock memory lock = tokenLocks[i];\\n            if(lock.amount != lock.amountClaimed) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Create result array of length `activeCount`\\n        LockBalance[] memory result = new LockBalance[](activeCount);\\n        uint256 j;\\n\\n        // Populate result array\\n        for (uint256 i; i < numLocks; i++) {\\n            Lock memory lock = tokenLocks[i];\\n            if(lock.amount != lock.amountClaimed) {\\n                result[j] = lockBalance(i);\\n                j++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get all active token lock ids for receiver\\n     * @param receiver The address that has locked balances\\n     * @return the active lock ids\\n     */\\n    function activeLockIds(address receiver) external view returns(uint256[] memory){\\n        uint256 activeCount;\\n        uint256[] memory receiverLockIds = lockIds[receiver];\\n\\n        // Get number of active locks\\n        for (uint256 i; i < receiverLockIds.length; i++) {\\n            Lock memory lock = tokenLocks[receiverLockIds[i]];\\n            if(lock.amount != lock.amountClaimed) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Create result array of length `activeCount`\\n        uint256[] memory result = new uint256[](activeCount);\\n        uint256 j;\\n\\n        // Populate result array\\n        for (uint256 i; i < receiverLockIds.length; i++) {\\n            Lock memory lock = tokenLocks[receiverLockIds[i]];\\n            if(lock.amount != lock.amountClaimed) {\\n                result[j] = receiverLockIds[i];\\n                j++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get all token locks for receiver\\n     * @param receiver The address that has locked balances\\n     * @return the locks\\n     */\\n    function allLocks(address receiver) external view returns(Lock[] memory){\\n        uint256[] memory allLockIds = lockIds[receiver];\\n        Lock[] memory result = new Lock[](allLockIds.length);\\n        for (uint256 i; i < allLockIds.length; i++) {\\n            result[i] = tokenLocks[allLockIds[i]];\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get all active token locks for receiver\\n     * @param receiver The address that has locked balances\\n     * @return the locks\\n     */\\n    function activeLocks(address receiver) external view returns(Lock[] memory){\\n        uint256 activeCount;\\n        uint256[] memory receiverLockIds = lockIds[receiver];\\n\\n        // Get number of active locks\\n        for (uint256 i; i < receiverLockIds.length; i++) {\\n            Lock memory lock = tokenLocks[receiverLockIds[i]];\\n            if(lock.amount != lock.amountClaimed) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Create result array of length `activeCount`\\n        Lock[] memory result = new Lock[](activeCount);\\n        uint256 j;\\n\\n        // Populate result array\\n        for (uint256 i; i < receiverLockIds.length; i++) {\\n            Lock memory lock = tokenLocks[receiverLockIds[i]];\\n            if(lock.amount != lock.amountClaimed) {\\n                result[j] = tokenLocks[receiverLockIds[i]];\\n                j++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get all active token lock balances for receiver\\n     * @param receiver The address that has locked balances\\n     * @return the active lock balances\\n     */\\n    function activeLockBalances(address receiver) external view returns(LockBalance[] memory){\\n        uint256 activeCount;\\n        uint256[] memory receiverLockIds = lockIds[receiver];\\n\\n        // Get number of active locks\\n        for (uint256 i; i < receiverLockIds.length; i++) {\\n            Lock memory lock = tokenLocks[receiverLockIds[i]];\\n            if(lock.amount != lock.amountClaimed) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Create result array of length `activeCount`\\n        LockBalance[] memory result = new LockBalance[](activeCount);\\n        uint256 j;\\n\\n        // Populate result array\\n        for (uint256 i; i < receiverLockIds.length; i++) {\\n            Lock memory lock = tokenLocks[receiverLockIds[i]];\\n            if(lock.amount != lock.amountClaimed) {\\n                result[j] = lockBalance(receiverLockIds[i]);\\n                j++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get total token balance\\n     * @param token The token to check\\n     * @return balance the total active balance of `token`\\n     */\\n    function totalTokenBalance(address token) external view returns(TokenBalance memory balance){\\n        for (uint256 i; i < numLocks; i++) {\\n            Lock memory tokenLock = tokenLocks[i];\\n            if(tokenLock.token == token && tokenLock.amount != tokenLock.amountClaimed){\\n                balance.totalAmount = balance.totalAmount.add(tokenLock.amount);\\n                balance.votingPower = balance.votingPower.add(tokenLock.votingPower);\\n                if(block.timestamp > tokenLock.startTime) {\\n                    balance.claimedAmount = balance.claimedAmount.add(tokenLock.amountClaimed);\\n\\n                    uint256 elapsedTime = block.timestamp.sub(tokenLock.startTime);\\n                    uint256 elapsedDays = elapsedTime.div(SECONDS_PER_DAY);\\n\\n                    if (\\n                        elapsedDays >= tokenLock.cliffDurationInDays\\n                    ) {\\n                        if (elapsedDays >= tokenLock.vestingDurationInDays) {\\n                            balance.claimableAmount = balance.claimableAmount.add(tokenLock.amount).sub(tokenLock.amountClaimed);\\n                        } else {\\n                            uint256 vestingDurationInSecs = uint256(tokenLock.vestingDurationInDays).mul(SECONDS_PER_DAY);\\n                            uint256 vestingAmountPerSec = tokenLock.amount.div(vestingDurationInSecs);\\n                            uint256 amountVested = vestingAmountPerSec.mul(elapsedTime);\\n                            balance.claimableAmount = balance.claimableAmount.add(amountVested.sub(tokenLock.amountClaimed));\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get token balance of receiver\\n     * @param token The token to check\\n     * @param receiver The address that has unlocked balances\\n     * @return balance the total active balance of `token` for `receiver`\\n     */\\n    function tokenBalance(address token, address receiver) external view returns(TokenBalance memory balance){\\n        uint256[] memory receiverLockIds = lockIds[receiver];\\n        for (uint256 i; i < receiverLockIds.length; i++) {\\n            Lock memory receiverLock = tokenLocks[receiverLockIds[i]];\\n            if(receiverLock.token == token && receiverLock.amount != receiverLock.amountClaimed){\\n                balance.totalAmount = balance.totalAmount.add(receiverLock.amount);\\n                balance.votingPower = balance.votingPower.add(receiverLock.votingPower);\\n                if(block.timestamp > receiverLock.startTime) {\\n                    balance.claimedAmount = balance.claimedAmount.add(receiverLock.amountClaimed);\\n\\n                    uint256 elapsedTime = block.timestamp.sub(receiverLock.startTime);\\n                    uint256 elapsedDays = elapsedTime.div(SECONDS_PER_DAY);\\n\\n                    if (\\n                        elapsedDays >= receiverLock.cliffDurationInDays\\n                    ) {\\n                        if (elapsedDays >= receiverLock.vestingDurationInDays) {\\n                            balance.claimableAmount = balance.claimableAmount.add(receiverLock.amount).sub(receiverLock.amountClaimed);\\n                        } else {\\n                            uint256 vestingDurationInSecs = uint256(receiverLock.vestingDurationInDays).mul(SECONDS_PER_DAY);\\n                            uint256 vestingAmountPerSec = receiverLock.amount.div(vestingDurationInSecs);\\n                            uint256 amountVested = vestingAmountPerSec.mul(elapsedTime);\\n                            balance.claimableAmount = balance.claimableAmount.add(amountVested.sub(receiverLock.amountClaimed));\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get lock balance for a given lock id\\n     * @param lockId The lock ID\\n     * @return balance the lock balance\\n     */\\n    function lockBalance(uint256 lockId) public view returns (LockBalance memory balance) {\\n        balance.id = lockId;\\n        balance.claimableAmount = claimableBalance(lockId);\\n        balance.lock = tokenLocks[lockId];\\n    }\\n\\n    /**\\n     * @notice Get claimable balance for a given lock id\\n     * @dev Returns 0 if cliff duration has not ended\\n     * @param lockId The lock ID\\n     * @return The amount that can be claimed\\n     */\\n    function claimableBalance(uint256 lockId) public view returns (uint256) {\\n        Lock storage lock = tokenLocks[lockId];\\n\\n        // For locks created with a future start date, that hasn't been reached, return 0\\n        if (block.timestamp < lock.startTime) {\\n            return 0;\\n        }\\n\\n        uint256 elapsedTime = block.timestamp.sub(lock.startTime);\\n        uint256 elapsedDays = elapsedTime.div(SECONDS_PER_DAY);\\n        \\n        if (elapsedDays < lock.cliffDurationInDays) {\\n            return 0;\\n        } \\n        \\n        if (elapsedDays >= lock.vestingDurationInDays) {\\n            return lock.amount.sub(lock.amountClaimed);\\n        } else {\\n            uint256 vestingDurationInSecs = uint256(lock.vestingDurationInDays).mul(SECONDS_PER_DAY);\\n            uint256 vestingAmountPerSec = lock.amount.div(vestingDurationInSecs);\\n            uint256 amountVested = vestingAmountPerSec.mul(elapsedTime);\\n            return amountVested.sub(lock.amountClaimed);\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows receiver to claim all of their unlocked tokens for a set of locks\\n     * @dev Errors if no tokens are claimable\\n     * @dev It is advised receivers check they are entitled to claim via `claimableBalance` before calling this\\n     * @param locks The lock ids for unlocked token balances\\n     */\\n    function claimAllUnlockedTokens(uint256[] memory locks) external {\\n        for (uint i = 0; i < locks.length; i++) {\\n            uint256 claimableAmount = claimableBalance(locks[i]);\\n            require(claimableAmount > 0, \\\"Vault::claimAllUnlockedTokens: claimableAmount is 0\\\");\\n            _claimTokens(locks[i], claimableAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows receiver to claim a portion of their unlocked tokens for a given lock\\n     * @dev Errors if token amounts provided are > claimable amounts\\n     * @dev It is advised receivers check they are entitled to claim via `claimableBalance` before calling this\\n     * @param locks The lock ids for unlocked token balances\\n     * @param amounts The amount of each unlocked token to claim\\n     */\\n    function claimUnlockedTokenAmounts(uint256[] memory locks, uint256[] memory amounts) external {\\n        require(locks.length == amounts.length, \\\"Vault::claimUnlockedTokenAmounts: arrays must be same length\\\");\\n        for (uint i = 0; i < locks.length; i++) {\\n            uint256 claimableAmount = claimableBalance(locks[i]);\\n            require(claimableAmount >= amounts[i], \\\"Vault::claimUnlockedTokenAmounts: claimableAmount < amount\\\");\\n            _claimTokens(locks[i], amounts[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows receiver extend lock periods for a given lock\\n     * @param lockId The lock id for a locked token balance\\n     * @param vestingDaysToAdd The number of days to add to vesting duration\\n     * @param cliffDaysToAdd The number of days to add to cliff duration\\n     */\\n    function extendLock(uint256 lockId, uint16 vestingDaysToAdd, uint16 cliffDaysToAdd) external {\\n        Lock storage lock = tokenLocks[lockId];\\n        require(msg.sender == lock.receiver, \\\"Vault::extendLock: msg.sender must be receiver\\\");\\n        uint16 oldVestingDuration = lock.vestingDurationInDays;\\n        uint16 newVestingDuration = _add16(oldVestingDuration, vestingDaysToAdd, \\\"Vault::extendLock: vesting max days exceeded\\\");\\n        uint16 oldCliffDuration = lock.cliffDurationInDays;\\n        uint16 newCliffDuration = _add16(oldCliffDuration, cliffDaysToAdd, \\\"Vault::extendLock: cliff max days exceeded\\\");\\n        require(newCliffDuration <= 10*365, \\\"Vault::extendLock: cliff more than 10 years\\\");\\n        require(newVestingDuration <= 25*365, \\\"Vault::extendLock: vesting duration more than 25 years\\\");\\n        require(newVestingDuration >= newCliffDuration, \\\"Vault::extendLock: duration < cliff\\\");\\n        lock.vestingDurationInDays = newVestingDuration;\\n        emit LockExtended(lockId, oldVestingDuration, newVestingDuration, oldCliffDuration, newCliffDuration, lock.startTime);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of lockTokens\\n     * @param locker The account that is locking tokens\\n     * @param receiver The account that will be able to retrieve unlocked tokens\\n     * @param startTime The unix timestamp when the lock period will start\\n     * @param amount The amount of tokens being locked\\n     * @param vestingDurationInDays The vesting period in days\\n     * @param cliffDurationInDays The cliff duration in days\\n     * @param grantVotingPower if true, give user voting power from tokens\\n     */\\n    function _lockTokens(\\n        address token,\\n        address locker,\\n        address receiver,\\n        uint48 startTime,\\n        uint256 amount,\\n        uint16 vestingDurationInDays,\\n        uint16 cliffDurationInDays,\\n        bool grantVotingPower\\n    ) internal {\\n\\n        // Transfer the tokens under the control of the vault contract\\n        IERC20(token).safeTransferFrom(locker, address(this), amount);\\n\\n        uint48 lockStartTime = startTime == 0 ? uint48(block.timestamp) : startTime;\\n        uint256 votingPowerGranted;\\n        \\n        // Grant voting power, if specified\\n        if(grantVotingPower) {\\n            votingPowerGranted = lockManager.grantVotingPower(receiver, token, amount);\\n        }\\n\\n        // Create lock\\n        Lock memory lock = Lock({\\n            token: token,\\n            receiver: receiver,\\n            startTime: lockStartTime,\\n            vestingDurationInDays: vestingDurationInDays,\\n            cliffDurationInDays: cliffDurationInDays,\\n            amount: amount,\\n            amountClaimed: 0,\\n            votingPower: votingPowerGranted\\n        });\\n\\n        tokenLocks[numLocks] = lock;\\n        lockIds[receiver].push(numLocks);\\n        emit LockCreated(token, locker, receiver, numLocks, amount, lockStartTime, vestingDurationInDays, cliffDurationInDays, votingPowerGranted);\\n        \\n        // Increment lock id\\n        numLocks++;\\n    }\\n\\n    /**\\n     * @notice Internal implementation of token claims\\n     * @param lockId The lock id for claim\\n     * @param claimAmount The amount to claim\\n     */\\n    function _claimTokens(uint256 lockId, uint256 claimAmount) internal {\\n        Lock storage lock = tokenLocks[lockId];\\n        uint256 votingPowerRemoved;\\n\\n        // Remove voting power, if exists\\n        if (lock.votingPower > 0) {\\n            votingPowerRemoved = lockManager.removeVotingPower(lock.receiver, lock.token, claimAmount);\\n            lock.votingPower = lock.votingPower.sub(votingPowerRemoved);\\n        }\\n\\n        // Update claimed amount\\n        lock.amountClaimed = lock.amountClaimed.add(claimAmount);\\n\\n        // Release tokens\\n        IERC20(lock.token).safeTransfer(lock.receiver, claimAmount);\\n        emit UnlockedTokensClaimed(lock.receiver, lock.token, lockId, claimAmount, votingPowerRemoved);\\n    }\\n\\n    /**\\n     * @notice Adds uint16 to uint16 safely\\n     * @param a First number\\n     * @param b Second number\\n     * @param errorMessage Error message to use if numbers cannot be added\\n     * @return uint16 number\\n     */\\n    function _add16(uint16 a, uint16 b, string memory errorMessage) internal pure returns (uint16) {\\n        uint16 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n}\",\"keccak256\":\"0x7fe698722fa13936d322d9ab9627d141b1911583caecc39dd526b71ab21616e5\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x2bac03f58760cfbe9fc44f16681bc9be8be40a99b40462f7d29c13134eb0d61b\",\"license\":\"MIT\"},\"contracts/interfaces/ILockManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface ILockManager {\\n    struct LockedStake {\\n        uint256 amount;\\n        uint256 votingPower;\\n    }\\n\\n    function getAmountStaked(address staker, address stakedToken) external view returns (uint256);\\n    function getStake(address staker, address stakedToken) external view returns (LockedStake memory);\\n    function calculateVotingPower(address token, uint256 amount) external view returns (uint256);\\n    function grantVotingPower(address receiver, address token, uint256 tokenAmount) external returns (uint256 votingPowerGranted);\\n    function removeVotingPower(address receiver, address token, uint256 tokenAmount) external returns (uint256 votingPowerRemoved);\\n}\",\"keccak256\":\"0x0b5197107da22c809febb82a6178b0dc8f1392dc7e679b4d55a3a177ccd93515\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0x3200dad4899dfc4a7b22d84e4b3768f23f50fd161c5b5997d6ae7004d90b0a94\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0xf5c6f7a4e202733b9bea8dc0c4be4bc16f765c08079418eb426ad490d9f4142e\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x961855901713e710c05dd67f9a01e501a54e82e68a526fe3662e228c27f788d9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620042b8380380620042b883398101604081905262000034916200005a565b600080546001600160a01b0319166001600160a01b03929092169190911790556200008a565b6000602082840312156200006c578081fd5b81516001600160a01b038116811462000083578182fd5b9392505050565b61421e806200009a6000396000f3fe608060405234801561001057600080fd5b506004361061016c5760003560e01c8063946ca949116100cd578063d422cf5811610081578063f339c50411610066578063f339c504146102ea578063f54659921461030a578063f742a1fa1461031d5761016c565b8063d422cf58146102cf578063d7da8bc2146102d75761016c565b8063ada748a5116100b2578063ada748a514610296578063ba4a051b146102a9578063bed5df7c146102bc5761016c565b8063946ca9491461025a578063acca30a2146102815761016c565b80634a176a4b11610124578063791ba92111610109578063791ba9211461022157806385d3374f146102345780638f204998146102475761016c565b80634a176a4b146101f957806354ac185e1461020c5761016c565b806319ac0d901161015557806319ac0d90146101af5780631c1a4710146101c45780633c4926d4146101e45761016c565b80631049334f146101715780631091e8071461019a575b600080fd5b61018461017f36600461357f565b610330565b6040516101919190614082565b60405180910390f35b6101a2610635565b6040516101919190613a35565b6101c26101bd3660046135b1565b6108bb565b005b6101d76101d2366004613708565b6109d8565b60405161019191906140d3565b6101ec610a09565b60405161019191906139a3565b6101ec610207366004613565565b610c9e565b610214610ffe565b60405161019191906139f2565b61021461022f366004613565565b61128b565b6101d76102423660046137c5565b6114a2565b6101c26102553660046137f5565b61163a565b61026d6102683660046137c5565b61189e565b604051610191989796959493929190613945565b61028961194f565b6040516101919190613a6d565b6101c26102a4366004613731565b61196b565b6102146102b7366004613565565b6119fb565b6101a26102ca366004613565565b611e2c565b6101d7612167565b6101c26102e5366004613764565b61216d565b6102fd6102f83660046137c5565b612252565b6040516101919190614073565b610184610318366004613565565b61234e565b6101c261032b366004613640565b6125b9565b6103386133e8565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600260209081526040918290208054835181840281018401909452808452606093928301828280156103a557602002820191906000526020600020905b815481526020019060010190808311610391575b5050505050905060005b815181101561062d576103c0613410565b600160008484815181106103d057fe5b6020908102919091018101518252818101929092526040908101600020815161010081018352815473ffffffffffffffffffffffffffffffffffffffff90811680835260018401548083169684019690965265ffffffffffff740100000000000000000000000000000000000000008704169483019490945261ffff7a0100000000000000000000000000000000000000000000000000008604811660608401527c01000000000000000000000000000000000000000000000000000000009095049094166080820152600282015460a0820152600382015460c082015260049091015460e082015292509087161480156104d357508060c001518160a0015114155b156106245760a081015184516104e891612761565b845260e081015160608501516104fd91612761565b6060850152604081015165ffffffffffff164211156106245760c0810151604085015161052991612761565b60408086019190915281015160009061054b90429065ffffffffffff166127de565b9050600061055c8262015180612820565b9050826080015161ffff16811061062157826060015161ffff1681106105af576105a58360c0015161059f8560a00151896020015161276190919063ffffffff16565b906127de565b6020870152610621565b60608301516000906105c89061ffff1662015180612862565b905060006105e3828660a0015161282090919063ffffffff16565b905060006105f18286612862565b905061061861060d8760c00151836127de90919063ffffffff16565b60208b015190612761565b60208a01525050505b50505b506001016103af565b505092915050565b60606000805b6003548110156107455761064d613410565b50600081815260016020818152604092839020835161010081018552815473ffffffffffffffffffffffffffffffffffffffff9081168252938201549384169281019290925265ffffffffffff740100000000000000000000000000000000000000008404169382019390935261ffff7a0100000000000000000000000000000000000000000000000000008304811660608301527c01000000000000000000000000000000000000000000000000000000009092049091166080820152600282015460a08201819052600383015460c0830181905260049093015460e083015290911461073c576001909201915b5060010161063b565b5060608167ffffffffffffffff8111801561075f57600080fd5b50604051908082528060200260200182016040528015610789578160200160208202803683370190505b5090506000805b6003548110156108b2576107a2613410565b50600081815260016020818152604092839020835161010081018552815473ffffffffffffffffffffffffffffffffffffffff9081168252938201549384169281019290925265ffffffffffff740100000000000000000000000000000000000000008404169382019390935261ffff7a0100000000000000000000000000000000000000000000000000008304811660608301527c01000000000000000000000000000000000000000000000000000000009092049091166080820152600282015460a08201819052600383015460c0830181905260049093015460e08301529091146108a9578184848151811061089757fe5b60209081029190910101526001909201915b50600101610790565b50909250505090565b60008361ffff1611610902576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f990613d8a565b60405180910390fd5b6123a58361ffff161115610942576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f990613c73565b8161ffff168361ffff161015610984576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f990613c16565b600084116109be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f990613cd0565b6109ce88888888888888886128d5565b5050505050505050565b600260205281600052604060002081815481106109f457600080fd5b90600052602060002001600091509150505481565b60606000805b600354811015610b1957610a21613410565b50600081815260016020818152604092839020835161010081018552815473ffffffffffffffffffffffffffffffffffffffff9081168252938201549384169281019290925265ffffffffffff740100000000000000000000000000000000000000008404169382019390935261ffff7a0100000000000000000000000000000000000000000000000000008304811660608301527c01000000000000000000000000000000000000000000000000000000009092049091166080820152600282015460a08201819052600383015460c0830181905260049093015460e0830152909114610b10576001909201915b50600101610a0f565b5060608167ffffffffffffffff81118015610b3357600080fd5b50604051908082528060200260200182016040528015610b6d57816020015b610b5a613454565b815260200190600190039081610b525790505b5090506000805b6003548110156108b257610b86613410565b50600081815260016020818152604092839020835161010081018552815473ffffffffffffffffffffffffffffffffffffffff9081168252938201549384169281019290925265ffffffffffff740100000000000000000000000000000000000000008404169382019390935261ffff7a0100000000000000000000000000000000000000000000000000008304811660608301527c01000000000000000000000000000000000000000000000000000000009092049091166080820152600282015460a08201819052600383015460c0830181905260049093015460e0830152909114610c9557610c7782612252565b848481518110610c8357fe5b60209081029190910101526001909201915b50600101610b74565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602090815260408083208054825181850281018501909352808352606094938593929190830182828015610d0f57602002820191906000526020600020905b815481526020019060010190808311610cfb575b5050505050905060005b8151811015610e3e57610d2a613410565b60016000848481518110610d3a57fe5b6020908102919091018101518252818101929092526040908101600020815161010081018352815473ffffffffffffffffffffffffffffffffffffffff908116825260018301549081169482019490945265ffffffffffff740100000000000000000000000000000000000000008504169281019290925261ffff7a0100000000000000000000000000000000000000000000000000008404811660608401527c01000000000000000000000000000000000000000000000000000000009093049092166080820152600282015460a08201819052600383015460c0830181905260049093015460e083015290925014610e35576001909301925b50600101610d19565b5060608267ffffffffffffffff81118015610e5857600080fd5b50604051908082528060200260200182016040528015610e9257816020015b610e7f613454565b815260200190600190039081610e775790505b5090506000805b8351811015610ff157610eaa613410565b60016000868481518110610eba57fe5b6020908102919091018101518252818101929092526040908101600020815161010081018352815473ffffffffffffffffffffffffffffffffffffffff908116825260018301549081169482019490945265ffffffffffff740100000000000000000000000000000000000000008504169281019290925261ffff7a0100000000000000000000000000000000000000000000000000008404811660608401527c01000000000000000000000000000000000000000000000000000000009093049092166080820152600282015460a08201819052600383015460c0830181905260049093015460e083015290925014610fe857610fca858381518110610fbd57fe5b6020026020010151612252565b848481518110610fd657fe5b60209081029190910101526001909201915b50600101610e99565b509093505050505b919050565b60606000805b60035481101561110e57611016613410565b50600081815260016020818152604092839020835161010081018552815473ffffffffffffffffffffffffffffffffffffffff9081168252938201549384169281019290925265ffffffffffff740100000000000000000000000000000000000000008404169382019390935261ffff7a0100000000000000000000000000000000000000000000000000008304811660608301527c01000000000000000000000000000000000000000000000000000000009092049091166080820152600282015460a08201819052600383015460c0830181905260049093015460e0830152909114611105576001909201915b50600101611004565b5060608167ffffffffffffffff8111801561112857600080fd5b5060405190808252806020026020018201604052801561116257816020015b61114f613410565b8152602001906001900390816111475790505b5090506000805b6003548110156108b25761117b613410565b50600081815260016020818152604092839020835161010081018552815473ffffffffffffffffffffffffffffffffffffffff9081168252938201549384169281019290925265ffffffffffff740100000000000000000000000000000000000000008404169382019390935261ffff7a0100000000000000000000000000000000000000000000000000008304811660608301527c01000000000000000000000000000000000000000000000000000000009092049091166080820152600282015460a08201819052600383015460c0830181905260049093015460e0830152909114611282578084848151811061127057fe5b60209081029190910101526001909201915b50600101611169565b606080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561131757602002820191906000526020600020905b815481526020019060010190808311611303575b505050505090506060815167ffffffffffffffff8111801561133857600080fd5b5060405190808252806020026020018201604052801561137257816020015b61135f613410565b8152602001906001900390816113575790505b50905060005b825181101561149a576001600084838151811061139157fe5b6020908102919091018101518252818101929092526040908101600020815161010081018352815473ffffffffffffffffffffffffffffffffffffffff908116825260018301549081169482019490945265ffffffffffff740100000000000000000000000000000000000000008504169281019290925261ffff7a0100000000000000000000000000000000000000000000000000008404811660608401527c01000000000000000000000000000000000000000000000000000000009093049092166080820152600282015460a0820152600382015460c082015260049091015460e0820152825183908390811061148757fe5b6020908102919091010152600101611378565b509392505050565b600081815260016020819052604082209081015474010000000000000000000000000000000000000000900465ffffffffffff164210156114e7576000915050610ff9565b600181015460009061151a90429074010000000000000000000000000000000000000000900465ffffffffffff166127de565b9050600061152b8262015180612820565b60018401549091507c0100000000000000000000000000000000000000000000000000000000900461ffff1681101561156a5760009350505050610ff9565b60018301547a010000000000000000000000000000000000000000000000000000900461ffff1681106115b457600383015460028401546115aa916127de565b9350505050610ff9565b60018301546000906115eb907a010000000000000000000000000000000000000000000000000000900461ffff1662015180612862565b9050600061160682866002015461282090919063ffffffff16565b905060006116148286612862565b905061162d8660030154826127de90919063ffffffff16565b9650505050505050610ff9565b60008381526001602081905260409091209081015473ffffffffffffffffffffffffffffffffffffffff16331461169d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f990613e45565b600081600101601a9054906101000a900461ffff16905060006116d982866040518060600160405280602c8152602001614122602c9139612c85565b9050600083600101601c9054906101000a900461ffff169050600061171782876040518060600160405280602a815260200161414e602a9139612c85565b9050610e428161ffff161115611759576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f990613b5c565b6123a58361ffff161115611799576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f990613eff565b8061ffff168361ffff1610156117db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f990613fb9565b6001850180547fffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffff167a01000000000000000000000000000000000000000000000000000061ffff86811691820292909217928390556040519092918716918b917f230404042daed14abd1b9cba00060fea5fc11a5aad4f4a2efb7bf2de5d0f92bf9161188c91889188917401000000000000000000000000000000000000000090910465ffffffffffff16906140ad565b60405180910390a45050505050505050565b60016020819052600091825260409091208054918101546002820154600383015460049093015473ffffffffffffffffffffffffffffffffffffffff9485169483169365ffffffffffff740100000000000000000000000000000000000000008504169361ffff7a01000000000000000000000000000000000000000000000000000082048116947c0100000000000000000000000000000000000000000000000000000000909204169290919088565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60005b81518110156119f757600061199583838151811061198857fe5b60200260200101516114a2565b9050600081116119d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f990613d2d565b6119ee8383815181106119e057fe5b602002602001015182612cd8565b5060010161196e565b5050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602090815260408083208054825181850281018501909352808352606094938593929190830182828015611a6c57602002820191906000526020600020905b815481526020019060010190808311611a58575b5050505050905060005b8151811015611b9b57611a87613410565b60016000848481518110611a9757fe5b6020908102919091018101518252818101929092526040908101600020815161010081018352815473ffffffffffffffffffffffffffffffffffffffff908116825260018301549081169482019490945265ffffffffffff740100000000000000000000000000000000000000008504169281019290925261ffff7a0100000000000000000000000000000000000000000000000000008404811660608401527c01000000000000000000000000000000000000000000000000000000009093049092166080820152600282015460a08201819052600383015460c0830181905260049093015460e083015290925014611b92576001909301925b50600101611a76565b5060608267ffffffffffffffff81118015611bb557600080fd5b50604051908082528060200260200182016040528015611bef57816020015b611bdc613410565b815260200190600190039081611bd45790505b5090506000805b8351811015610ff157611c07613410565b60016000868481518110611c1757fe5b6020908102919091018101518252818101929092526040908101600020815161010081018352815473ffffffffffffffffffffffffffffffffffffffff908116825260018301549081169482019490945265ffffffffffff740100000000000000000000000000000000000000008504169281019290925261ffff7a0100000000000000000000000000000000000000000000000000008404811660608401527c01000000000000000000000000000000000000000000000000000000009093049092166080820152600282015460a08201819052600383015460c0830181905260049093015460e083015290925014611e235760016000868481518110611d1b57fe5b6020908102919091018101518252818101929092526040908101600020815161010081018352815473ffffffffffffffffffffffffffffffffffffffff908116825260018301549081169482019490945265ffffffffffff740100000000000000000000000000000000000000008504169281019290925261ffff7a0100000000000000000000000000000000000000000000000000008404811660608401527c01000000000000000000000000000000000000000000000000000000009093049092166080820152600282015460a0820152600382015460c082015260049091015460e08201528451859085908110611e1157fe5b60209081029190910101526001909201915b50600101611bf6565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602090815260408083208054825181850281018501909352808352606094938593929190830182828015611e9d57602002820191906000526020600020905b815481526020019060010190808311611e89575b5050505050905060005b8151811015611fcc57611eb8613410565b60016000848481518110611ec857fe5b6020908102919091018101518252818101929092526040908101600020815161010081018352815473ffffffffffffffffffffffffffffffffffffffff908116825260018301549081169482019490945265ffffffffffff740100000000000000000000000000000000000000008504169281019290925261ffff7a0100000000000000000000000000000000000000000000000000008404811660608401527c01000000000000000000000000000000000000000000000000000000009093049092166080820152600282015460a08201819052600383015460c0830181905260049093015460e083015290925014611fc3576001909301925b50600101611ea7565b5060608267ffffffffffffffff81118015611fe657600080fd5b50604051908082528060200260200182016040528015612010578160200160208202803683370190505b5090506000805b8351811015610ff157612028613410565b6001600086848151811061203857fe5b6020908102919091018101518252818101929092526040908101600020815161010081018352815473ffffffffffffffffffffffffffffffffffffffff908116825260018301549081169482019490945265ffffffffffff740100000000000000000000000000000000000000008504169281019290925261ffff7a0100000000000000000000000000000000000000000000000000008404811660608401527c01000000000000000000000000000000000000000000000000000000009093049092166080820152600282015460a08201819052600383015460c0830181905260049093015460e08301529092501461215e5784828151811061213857fe5b602002602001015184848151811061214c57fe5b60209081029190910101526001909201915b50600101612017565b60035481565b80518251146121a8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f990613bb9565b60005b825181101561224d5760006121c584838151811061198857fe5b90508282815181106121d357fe5b6020026020010151811015612214576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f990613f5c565b61224484838151811061222357fe5b602002602001015184848151811061223757fe5b6020026020010151612cd8565b506001016121ab565b505050565b61225a613454565b818152612266826114a2565b60208083019190915260009283526001808252604093849020845161010081018652815473ffffffffffffffffffffffffffffffffffffffff9081168252928201549283169381019390935265ffffffffffff740100000000000000000000000000000000000000008304168386015261ffff7a0100000000000000000000000000000000000000000000000000008304811660608501527c01000000000000000000000000000000000000000000000000000000009092049091166080830152600281015460a0830152600381015460c08301526004015460e08201529181019190915290565b6123566133e8565b60005b6003548110156125b35761236b613410565b50600081815260016020818152604092839020835161010081018552815473ffffffffffffffffffffffffffffffffffffffff908116808352948301548082169483019490945265ffffffffffff740100000000000000000000000000000000000000008504169582019590955261ffff7a0100000000000000000000000000000000000000000000000000008404811660608301527c01000000000000000000000000000000000000000000000000000000009093049092166080830152600281015460a0830152600381015460c08301526004015460e082015291851614801561245f57508060c001518160a0015114155b156125aa5760a0810151835161247491612761565b835260e0810151606084015161248991612761565b6060840152604081015165ffffffffffff164211156125aa5760c081015160408401516124b591612761565b6040808501919091528101516000906124d790429065ffffffffffff166127de565b905060006124e88262015180612820565b9050826080015161ffff1681106125a757826060015161ffff1681106125355761252b8360c0015161059f8560a00151886020015161276190919063ffffffff16565b60208601526125a7565b606083015160009061254e9061ffff1662015180612862565b90506000612569828660a0015161282090919063ffffffff16565b905060006125778286612862565b905061259e6125938760c00151836127de90919063ffffffff16565b60208a015190612761565b60208901525050505b50505b50600101612359565b50919050565b60008761ffff16116125f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f990613aff565b6123a58761ffff161115612637576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f990613de7565b8561ffff168761ffff161015612679576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f990614016565b600088116126b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f990613ea2565b6040517fd505accf00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d169063d505accf90612711908e9030908d908a908a908a908a906004016138f7565b600060405180830381600087803b15801561272b57600080fd5b505af115801561273f573d6000803e3d6000fd5b505050506127538c8c8c8c8c8c8c8c6128d5565b505050505050505050505050565b6000828201838110156127d557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b60006127d583836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250612e64565b60006127d583836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612f15565b600082612871575060006127d8565b8282028284828161287e57fe5b04146127d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061419e6021913960400191505060405180910390fd5b6128f773ffffffffffffffffffffffffffffffffffffffff8916883087612f94565b600065ffffffffffff86161561290d578561290f565b425b9050600082156129c8576000546040517fbc61256e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063bc61256e90612973908b908e908b906004016138c6565b602060405180830381600087803b15801561298d57600080fd5b505af11580156129a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129c591906137dd565b90505b6129d0613410565b6040518061010001604052808c73ffffffffffffffffffffffffffffffffffffffff1681526020018a73ffffffffffffffffffffffffffffffffffffffff1681526020018465ffffffffffff1681526020018761ffff1681526020018661ffff168152602001888152602001600081526020018381525090508060016000600354815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548165ffffffffffff021916908365ffffffffffff160217905550606082015181600101601a6101000a81548161ffff021916908361ffff160217905550608082015181600101601c6101000a81548161ffff021916908361ffff16021790555060a0820151816002015560c0820151816003015560e08201518160040155905050600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060035490806001815401808255809150506001900390600052602060002001600090919091909150558873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff167f61a86a91d761a7322a10c3ff0cda14501ac0d019f088b470cb222e5e94747e896003548b888c8c8a604051612c67969594939291906140ea565b60405180910390a45050600380546001019055505050505050505050565b60008383018261ffff8087169083161015612ccd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f99190613a8e565b5090505b9392505050565b6000828152600160205260408120600481015490919015612dc157600054600183015483546040517fbc3e1b7a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9384169363bc3e1b7a93612d57939082169291169088906004016138c6565b602060405180830381600087803b158015612d7157600080fd5b505af1158015612d85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612da991906137dd565b6004830154909150612dbb90826127de565b60048301555b6003820154612dd09084612761565b600383015560018201548254612e009173ffffffffffffffffffffffffffffffffffffffff91821691168561302f565b81546001830154604051869273ffffffffffffffffffffffffffffffffffffffff9081169216907fbac91588ea67037e676b74f37797bcae8524aab9a7ba7431a24a72e6f29bc19790612e5690889087906140dc565b60405180910390a450505050565b60008184841115612f0d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612ed2578181015183820152602001612eba565b50505050905090810190601f168015612eff5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008183612f7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201818152835160248401528351909283926044909101919085019080838360008315612ed2578181015183820152602001612eba565b506000838581612f8a57fe5b0495945050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff80861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526130299085906130b8565b50505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261224d9084905b606061311a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166131909092919063ffffffff16565b80519091501561224d5780806020019051602081101561313957600080fd5b505161224d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001806141bf602a913960400191505060405180910390fd5b606061319f84846000856131a7565b949350505050565b606082471015613202576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806141786026913960400191505060405180910390fd5b61320b85613362565b61327657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b602083106132e057805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016132a3565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613342576040519150601f19603f3d011682016040523d82523d6000602084013e613347565b606091505b5091509150613357828286613368565b979650505050505050565b3b151590565b60608315613377575081612cd1565b8251156133875782518084602001fd5b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201818152845160248401528451859391928392604401919085019080838360008315612ed2578181015183820152602001612eba565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081019190915290565b60405180606001604052806000815260200160008152602001613475613410565b905290565b803573ffffffffffffffffffffffffffffffffffffffff81168114610ff957600080fd5b600082601f8301126134ae578081fd5b813567ffffffffffffffff808211156134c357fe5b6020808302604051828282010181811085821117156134de57fe5b6040528481529450818501925085820181870183018810156134ff57600080fd5b600091505b84821015613522578035845292820192600191909101908201613504565b505050505092915050565b80358015158114610ff957600080fd5b803561ffff81168114610ff957600080fd5b803565ffffffffffff81168114610ff957600080fd5b600060208284031215613576578081fd5b6127d58261347a565b60008060408385031215613591578081fd5b61359a8361347a565b91506135a86020840161347a565b90509250929050565b600080600080600080600080610100898b0312156135cd578384fd5b6135d68961347a565b97506135e460208a0161347a565b96506135f260408a0161347a565b955061360060608a0161354f565b94506080890135935061361560a08a0161353d565b925061362360c08a0161353d565b915061363160e08a0161352d565b90509295985092959890939650565b6000806000806000806000806000806000806101808d8f031215613662578384fd5b61366b8d61347a565b9b5061367960208e0161347a565b9a5061368760408e0161347a565b995061369560608e0161354f565b985060808d013597506136aa60a08e0161353d565b96506136b860c08e0161353d565b95506136c660e08e0161352d565b94506101008d013593506101208d013560ff811681146136e4578384fd5b809350506101408d013591506101608d013590509295989b509295989b509295989b565b6000806040838503121561371a578182fd5b6137238361347a565b946020939093013593505050565b600060208284031215613742578081fd5b813567ffffffffffffffff811115613758578182fd5b61319f8482850161349e565b60008060408385031215613776578182fd5b823567ffffffffffffffff8082111561378d578384fd5b6137998683870161349e565b935060208501359150808211156137ae578283fd5b506137bb8582860161349e565b9150509250929050565b6000602082840312156137d6578081fd5b5035919050565b6000602082840312156137ee578081fd5b5051919050565b600080600060608486031215613809578283fd5b833592506138196020850161353d565b91506138276040850161353d565b90509250925092565b8051825260208101516020830152604081015161224d60408401825b73ffffffffffffffffffffffffffffffffffffffff8082511683528060208301511660208401525065ffffffffffff6040820151166040830152606081015161ffff8082166060850152806080840151166080850152505060a081015160a083015260c081015160c083015260e081015160e08301525050565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff97881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b73ffffffffffffffffffffffffffffffffffffffff988916815296909716602087015265ffffffffffff94909416604086015261ffff92831660608601529116608084015260a083015260c082015260e08101919091526101000190565b6020808252825182820181905260009190848201906040850190845b818110156139e6576139d2838551613830565b9284019261014092909201916001016139bf565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156139e657613a2183855161384c565b928401926101009290920191600101613a0e565b6020808252825182820181905260009190848201906040850190845b818110156139e657835183529284019291840191600101613a51565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6000602080835283518082850152825b81811015613aba57858101830151858201604001528201613a9e565b81811115613acb5783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60208082526039908201527f5661756c743a3a6c6f636b546f6b656e73576974685065726d69743a2076657360408201527f74696e67206475726174696f6e206d757374206265203e203000000000000000606082015260800190565b6020808252602b908201527f5661756c743a3a657874656e644c6f636b3a20636c696666206d6f726520746860408201527f616e203130207965617273000000000000000000000000000000000000000000606082015260800190565b6020808252603c908201527f5661756c743a3a636c61696d556e6c6f636b6564546f6b656e416d6f756e747360408201527f3a20617272617973206d7573742062652073616d65206c656e67746800000000606082015260800190565b6020808252602b908201527f5661756c743a3a6c6f636b546f6b656e733a2076657374696e6720647572617460408201527f696f6e203c20636c696666000000000000000000000000000000000000000000606082015260800190565b60208082526036908201527f5661756c743a3a6c6f636b546f6b656e733a2076657374696e6720647572617460408201527f696f6e206d6f7265207468616e20323520796561727300000000000000000000606082015260800190565b60208082526021908201527f5661756c743a3a6c6f636b546f6b656e733a20616d6f756e74206e6f74203e2060408201527f3000000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526033908201527f5661756c743a3a636c61696d416c6c556e6c6f636b6564546f6b656e733a206360408201527f6c61696d61626c65416d6f756e74206973203000000000000000000000000000606082015260800190565b6020808252602f908201527f5661756c743a3a6c6f636b546f6b656e733a2076657374696e6720647572617460408201527f696f6e206d757374206265203e20300000000000000000000000000000000000606082015260800190565b602080825260409082018190527f5661756c743a3a6c6f636b546f6b656e73576974685065726d69743a20766573908201527f74696e67206475726174696f6e206d6f7265207468616e203235207965617273606082015260800190565b6020808252602e908201527f5661756c743a3a657874656e644c6f636b3a206d73672e73656e646572206d7560408201527f7374206265207265636569766572000000000000000000000000000000000000606082015260800190565b6020808252602b908201527f5661756c743a3a6c6f636b546f6b656e73576974685065726d69743a20616d6f60408201527f756e74206e6f74203e2030000000000000000000000000000000000000000000606082015260800190565b60208082526036908201527f5661756c743a3a657874656e644c6f636b3a2076657374696e6720647572617460408201527f696f6e206d6f7265207468616e20323520796561727300000000000000000000606082015260800190565b6020808252603a908201527f5661756c743a3a636c61696d556e6c6f636b6564546f6b656e416d6f756e747360408201527f3a20636c61696d61626c65416d6f756e74203c20616d6f756e74000000000000606082015260800190565b60208082526023908201527f5661756c743a3a657874656e644c6f636b3a206475726174696f6e203c20636c60408201527f6966660000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602d908201527f5661756c743a3a6c6f636b546f6b656e73576974685065726d69743a2064757260408201527f6174696f6e203c20636c69666600000000000000000000000000000000000000606082015260800190565b61014081016127d88284613830565b8151815260208083015190820152604080830151908201526060918201519181019190915260800190565b61ffff938416815291909216602082015265ffffffffffff909116604082015260600190565b90815260200190565b918252602082015260400190565b958652602086019490945265ffffffffffff92909216604085015261ffff908116606085015216608083015260a082015260c0019056fe5661756c743a3a657874656e644c6f636b3a2076657374696e67206d617820646179732065786365656465645661756c743a3a657874656e644c6f636b3a20636c696666206d61782064617973206578636565646564416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212203cc696c46b9c7892d13064ce1d88e7367a6bd1f559f0d7ee415d61a8f50373fd64736f6c63430007040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061016c5760003560e01c8063946ca949116100cd578063d422cf5811610081578063f339c50411610066578063f339c504146102ea578063f54659921461030a578063f742a1fa1461031d5761016c565b8063d422cf58146102cf578063d7da8bc2146102d75761016c565b8063ada748a5116100b2578063ada748a514610296578063ba4a051b146102a9578063bed5df7c146102bc5761016c565b8063946ca9491461025a578063acca30a2146102815761016c565b80634a176a4b11610124578063791ba92111610109578063791ba9211461022157806385d3374f146102345780638f204998146102475761016c565b80634a176a4b146101f957806354ac185e1461020c5761016c565b806319ac0d901161015557806319ac0d90146101af5780631c1a4710146101c45780633c4926d4146101e45761016c565b80631049334f146101715780631091e8071461019a575b600080fd5b61018461017f36600461357f565b610330565b6040516101919190614082565b60405180910390f35b6101a2610635565b6040516101919190613a35565b6101c26101bd3660046135b1565b6108bb565b005b6101d76101d2366004613708565b6109d8565b60405161019191906140d3565b6101ec610a09565b60405161019191906139a3565b6101ec610207366004613565565b610c9e565b610214610ffe565b60405161019191906139f2565b61021461022f366004613565565b61128b565b6101d76102423660046137c5565b6114a2565b6101c26102553660046137f5565b61163a565b61026d6102683660046137c5565b61189e565b604051610191989796959493929190613945565b61028961194f565b6040516101919190613a6d565b6101c26102a4366004613731565b61196b565b6102146102b7366004613565565b6119fb565b6101a26102ca366004613565565b611e2c565b6101d7612167565b6101c26102e5366004613764565b61216d565b6102fd6102f83660046137c5565b612252565b6040516101919190614073565b610184610318366004613565565b61234e565b6101c261032b366004613640565b6125b9565b6103386133e8565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600260209081526040918290208054835181840281018401909452808452606093928301828280156103a557602002820191906000526020600020905b815481526020019060010190808311610391575b5050505050905060005b815181101561062d576103c0613410565b600160008484815181106103d057fe5b6020908102919091018101518252818101929092526040908101600020815161010081018352815473ffffffffffffffffffffffffffffffffffffffff90811680835260018401548083169684019690965265ffffffffffff740100000000000000000000000000000000000000008704169483019490945261ffff7a0100000000000000000000000000000000000000000000000000008604811660608401527c01000000000000000000000000000000000000000000000000000000009095049094166080820152600282015460a0820152600382015460c082015260049091015460e082015292509087161480156104d357508060c001518160a0015114155b156106245760a081015184516104e891612761565b845260e081015160608501516104fd91612761565b6060850152604081015165ffffffffffff164211156106245760c0810151604085015161052991612761565b60408086019190915281015160009061054b90429065ffffffffffff166127de565b9050600061055c8262015180612820565b9050826080015161ffff16811061062157826060015161ffff1681106105af576105a58360c0015161059f8560a00151896020015161276190919063ffffffff16565b906127de565b6020870152610621565b60608301516000906105c89061ffff1662015180612862565b905060006105e3828660a0015161282090919063ffffffff16565b905060006105f18286612862565b905061061861060d8760c00151836127de90919063ffffffff16565b60208b015190612761565b60208a01525050505b50505b506001016103af565b505092915050565b60606000805b6003548110156107455761064d613410565b50600081815260016020818152604092839020835161010081018552815473ffffffffffffffffffffffffffffffffffffffff9081168252938201549384169281019290925265ffffffffffff740100000000000000000000000000000000000000008404169382019390935261ffff7a0100000000000000000000000000000000000000000000000000008304811660608301527c01000000000000000000000000000000000000000000000000000000009092049091166080820152600282015460a08201819052600383015460c0830181905260049093015460e083015290911461073c576001909201915b5060010161063b565b5060608167ffffffffffffffff8111801561075f57600080fd5b50604051908082528060200260200182016040528015610789578160200160208202803683370190505b5090506000805b6003548110156108b2576107a2613410565b50600081815260016020818152604092839020835161010081018552815473ffffffffffffffffffffffffffffffffffffffff9081168252938201549384169281019290925265ffffffffffff740100000000000000000000000000000000000000008404169382019390935261ffff7a0100000000000000000000000000000000000000000000000000008304811660608301527c01000000000000000000000000000000000000000000000000000000009092049091166080820152600282015460a08201819052600383015460c0830181905260049093015460e08301529091146108a9578184848151811061089757fe5b60209081029190910101526001909201915b50600101610790565b50909250505090565b60008361ffff1611610902576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f990613d8a565b60405180910390fd5b6123a58361ffff161115610942576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f990613c73565b8161ffff168361ffff161015610984576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f990613c16565b600084116109be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f990613cd0565b6109ce88888888888888886128d5565b5050505050505050565b600260205281600052604060002081815481106109f457600080fd5b90600052602060002001600091509150505481565b60606000805b600354811015610b1957610a21613410565b50600081815260016020818152604092839020835161010081018552815473ffffffffffffffffffffffffffffffffffffffff9081168252938201549384169281019290925265ffffffffffff740100000000000000000000000000000000000000008404169382019390935261ffff7a0100000000000000000000000000000000000000000000000000008304811660608301527c01000000000000000000000000000000000000000000000000000000009092049091166080820152600282015460a08201819052600383015460c0830181905260049093015460e0830152909114610b10576001909201915b50600101610a0f565b5060608167ffffffffffffffff81118015610b3357600080fd5b50604051908082528060200260200182016040528015610b6d57816020015b610b5a613454565b815260200190600190039081610b525790505b5090506000805b6003548110156108b257610b86613410565b50600081815260016020818152604092839020835161010081018552815473ffffffffffffffffffffffffffffffffffffffff9081168252938201549384169281019290925265ffffffffffff740100000000000000000000000000000000000000008404169382019390935261ffff7a0100000000000000000000000000000000000000000000000000008304811660608301527c01000000000000000000000000000000000000000000000000000000009092049091166080820152600282015460a08201819052600383015460c0830181905260049093015460e0830152909114610c9557610c7782612252565b848481518110610c8357fe5b60209081029190910101526001909201915b50600101610b74565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602090815260408083208054825181850281018501909352808352606094938593929190830182828015610d0f57602002820191906000526020600020905b815481526020019060010190808311610cfb575b5050505050905060005b8151811015610e3e57610d2a613410565b60016000848481518110610d3a57fe5b6020908102919091018101518252818101929092526040908101600020815161010081018352815473ffffffffffffffffffffffffffffffffffffffff908116825260018301549081169482019490945265ffffffffffff740100000000000000000000000000000000000000008504169281019290925261ffff7a0100000000000000000000000000000000000000000000000000008404811660608401527c01000000000000000000000000000000000000000000000000000000009093049092166080820152600282015460a08201819052600383015460c0830181905260049093015460e083015290925014610e35576001909301925b50600101610d19565b5060608267ffffffffffffffff81118015610e5857600080fd5b50604051908082528060200260200182016040528015610e9257816020015b610e7f613454565b815260200190600190039081610e775790505b5090506000805b8351811015610ff157610eaa613410565b60016000868481518110610eba57fe5b6020908102919091018101518252818101929092526040908101600020815161010081018352815473ffffffffffffffffffffffffffffffffffffffff908116825260018301549081169482019490945265ffffffffffff740100000000000000000000000000000000000000008504169281019290925261ffff7a0100000000000000000000000000000000000000000000000000008404811660608401527c01000000000000000000000000000000000000000000000000000000009093049092166080820152600282015460a08201819052600383015460c0830181905260049093015460e083015290925014610fe857610fca858381518110610fbd57fe5b6020026020010151612252565b848481518110610fd657fe5b60209081029190910101526001909201915b50600101610e99565b509093505050505b919050565b60606000805b60035481101561110e57611016613410565b50600081815260016020818152604092839020835161010081018552815473ffffffffffffffffffffffffffffffffffffffff9081168252938201549384169281019290925265ffffffffffff740100000000000000000000000000000000000000008404169382019390935261ffff7a0100000000000000000000000000000000000000000000000000008304811660608301527c01000000000000000000000000000000000000000000000000000000009092049091166080820152600282015460a08201819052600383015460c0830181905260049093015460e0830152909114611105576001909201915b50600101611004565b5060608167ffffffffffffffff8111801561112857600080fd5b5060405190808252806020026020018201604052801561116257816020015b61114f613410565b8152602001906001900390816111475790505b5090506000805b6003548110156108b25761117b613410565b50600081815260016020818152604092839020835161010081018552815473ffffffffffffffffffffffffffffffffffffffff9081168252938201549384169281019290925265ffffffffffff740100000000000000000000000000000000000000008404169382019390935261ffff7a0100000000000000000000000000000000000000000000000000008304811660608301527c01000000000000000000000000000000000000000000000000000000009092049091166080820152600282015460a08201819052600383015460c0830181905260049093015460e0830152909114611282578084848151811061127057fe5b60209081029190910101526001909201915b50600101611169565b606080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561131757602002820191906000526020600020905b815481526020019060010190808311611303575b505050505090506060815167ffffffffffffffff8111801561133857600080fd5b5060405190808252806020026020018201604052801561137257816020015b61135f613410565b8152602001906001900390816113575790505b50905060005b825181101561149a576001600084838151811061139157fe5b6020908102919091018101518252818101929092526040908101600020815161010081018352815473ffffffffffffffffffffffffffffffffffffffff908116825260018301549081169482019490945265ffffffffffff740100000000000000000000000000000000000000008504169281019290925261ffff7a0100000000000000000000000000000000000000000000000000008404811660608401527c01000000000000000000000000000000000000000000000000000000009093049092166080820152600282015460a0820152600382015460c082015260049091015460e0820152825183908390811061148757fe5b6020908102919091010152600101611378565b509392505050565b600081815260016020819052604082209081015474010000000000000000000000000000000000000000900465ffffffffffff164210156114e7576000915050610ff9565b600181015460009061151a90429074010000000000000000000000000000000000000000900465ffffffffffff166127de565b9050600061152b8262015180612820565b60018401549091507c0100000000000000000000000000000000000000000000000000000000900461ffff1681101561156a5760009350505050610ff9565b60018301547a010000000000000000000000000000000000000000000000000000900461ffff1681106115b457600383015460028401546115aa916127de565b9350505050610ff9565b60018301546000906115eb907a010000000000000000000000000000000000000000000000000000900461ffff1662015180612862565b9050600061160682866002015461282090919063ffffffff16565b905060006116148286612862565b905061162d8660030154826127de90919063ffffffff16565b9650505050505050610ff9565b60008381526001602081905260409091209081015473ffffffffffffffffffffffffffffffffffffffff16331461169d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f990613e45565b600081600101601a9054906101000a900461ffff16905060006116d982866040518060600160405280602c8152602001614122602c9139612c85565b9050600083600101601c9054906101000a900461ffff169050600061171782876040518060600160405280602a815260200161414e602a9139612c85565b9050610e428161ffff161115611759576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f990613b5c565b6123a58361ffff161115611799576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f990613eff565b8061ffff168361ffff1610156117db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f990613fb9565b6001850180547fffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffff167a01000000000000000000000000000000000000000000000000000061ffff86811691820292909217928390556040519092918716918b917f230404042daed14abd1b9cba00060fea5fc11a5aad4f4a2efb7bf2de5d0f92bf9161188c91889188917401000000000000000000000000000000000000000090910465ffffffffffff16906140ad565b60405180910390a45050505050505050565b60016020819052600091825260409091208054918101546002820154600383015460049093015473ffffffffffffffffffffffffffffffffffffffff9485169483169365ffffffffffff740100000000000000000000000000000000000000008504169361ffff7a01000000000000000000000000000000000000000000000000000082048116947c0100000000000000000000000000000000000000000000000000000000909204169290919088565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60005b81518110156119f757600061199583838151811061198857fe5b60200260200101516114a2565b9050600081116119d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f990613d2d565b6119ee8383815181106119e057fe5b602002602001015182612cd8565b5060010161196e565b5050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602090815260408083208054825181850281018501909352808352606094938593929190830182828015611a6c57602002820191906000526020600020905b815481526020019060010190808311611a58575b5050505050905060005b8151811015611b9b57611a87613410565b60016000848481518110611a9757fe5b6020908102919091018101518252818101929092526040908101600020815161010081018352815473ffffffffffffffffffffffffffffffffffffffff908116825260018301549081169482019490945265ffffffffffff740100000000000000000000000000000000000000008504169281019290925261ffff7a0100000000000000000000000000000000000000000000000000008404811660608401527c01000000000000000000000000000000000000000000000000000000009093049092166080820152600282015460a08201819052600383015460c0830181905260049093015460e083015290925014611b92576001909301925b50600101611a76565b5060608267ffffffffffffffff81118015611bb557600080fd5b50604051908082528060200260200182016040528015611bef57816020015b611bdc613410565b815260200190600190039081611bd45790505b5090506000805b8351811015610ff157611c07613410565b60016000868481518110611c1757fe5b6020908102919091018101518252818101929092526040908101600020815161010081018352815473ffffffffffffffffffffffffffffffffffffffff908116825260018301549081169482019490945265ffffffffffff740100000000000000000000000000000000000000008504169281019290925261ffff7a0100000000000000000000000000000000000000000000000000008404811660608401527c01000000000000000000000000000000000000000000000000000000009093049092166080820152600282015460a08201819052600383015460c0830181905260049093015460e083015290925014611e235760016000868481518110611d1b57fe5b6020908102919091018101518252818101929092526040908101600020815161010081018352815473ffffffffffffffffffffffffffffffffffffffff908116825260018301549081169482019490945265ffffffffffff740100000000000000000000000000000000000000008504169281019290925261ffff7a0100000000000000000000000000000000000000000000000000008404811660608401527c01000000000000000000000000000000000000000000000000000000009093049092166080820152600282015460a0820152600382015460c082015260049091015460e08201528451859085908110611e1157fe5b60209081029190910101526001909201915b50600101611bf6565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602090815260408083208054825181850281018501909352808352606094938593929190830182828015611e9d57602002820191906000526020600020905b815481526020019060010190808311611e89575b5050505050905060005b8151811015611fcc57611eb8613410565b60016000848481518110611ec857fe5b6020908102919091018101518252818101929092526040908101600020815161010081018352815473ffffffffffffffffffffffffffffffffffffffff908116825260018301549081169482019490945265ffffffffffff740100000000000000000000000000000000000000008504169281019290925261ffff7a0100000000000000000000000000000000000000000000000000008404811660608401527c01000000000000000000000000000000000000000000000000000000009093049092166080820152600282015460a08201819052600383015460c0830181905260049093015460e083015290925014611fc3576001909301925b50600101611ea7565b5060608267ffffffffffffffff81118015611fe657600080fd5b50604051908082528060200260200182016040528015612010578160200160208202803683370190505b5090506000805b8351811015610ff157612028613410565b6001600086848151811061203857fe5b6020908102919091018101518252818101929092526040908101600020815161010081018352815473ffffffffffffffffffffffffffffffffffffffff908116825260018301549081169482019490945265ffffffffffff740100000000000000000000000000000000000000008504169281019290925261ffff7a0100000000000000000000000000000000000000000000000000008404811660608401527c01000000000000000000000000000000000000000000000000000000009093049092166080820152600282015460a08201819052600383015460c0830181905260049093015460e08301529092501461215e5784828151811061213857fe5b602002602001015184848151811061214c57fe5b60209081029190910101526001909201915b50600101612017565b60035481565b80518251146121a8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f990613bb9565b60005b825181101561224d5760006121c584838151811061198857fe5b90508282815181106121d357fe5b6020026020010151811015612214576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f990613f5c565b61224484838151811061222357fe5b602002602001015184848151811061223757fe5b6020026020010151612cd8565b506001016121ab565b505050565b61225a613454565b818152612266826114a2565b60208083019190915260009283526001808252604093849020845161010081018652815473ffffffffffffffffffffffffffffffffffffffff9081168252928201549283169381019390935265ffffffffffff740100000000000000000000000000000000000000008304168386015261ffff7a0100000000000000000000000000000000000000000000000000008304811660608501527c01000000000000000000000000000000000000000000000000000000009092049091166080830152600281015460a0830152600381015460c08301526004015460e08201529181019190915290565b6123566133e8565b60005b6003548110156125b35761236b613410565b50600081815260016020818152604092839020835161010081018552815473ffffffffffffffffffffffffffffffffffffffff908116808352948301548082169483019490945265ffffffffffff740100000000000000000000000000000000000000008504169582019590955261ffff7a0100000000000000000000000000000000000000000000000000008404811660608301527c01000000000000000000000000000000000000000000000000000000009093049092166080830152600281015460a0830152600381015460c08301526004015460e082015291851614801561245f57508060c001518160a0015114155b156125aa5760a0810151835161247491612761565b835260e0810151606084015161248991612761565b6060840152604081015165ffffffffffff164211156125aa5760c081015160408401516124b591612761565b6040808501919091528101516000906124d790429065ffffffffffff166127de565b905060006124e88262015180612820565b9050826080015161ffff1681106125a757826060015161ffff1681106125355761252b8360c0015161059f8560a00151886020015161276190919063ffffffff16565b60208601526125a7565b606083015160009061254e9061ffff1662015180612862565b90506000612569828660a0015161282090919063ffffffff16565b905060006125778286612862565b905061259e6125938760c00151836127de90919063ffffffff16565b60208a015190612761565b60208901525050505b50505b50600101612359565b50919050565b60008761ffff16116125f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f990613aff565b6123a58761ffff161115612637576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f990613de7565b8561ffff168761ffff161015612679576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f990614016565b600088116126b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f990613ea2565b6040517fd505accf00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d169063d505accf90612711908e9030908d908a908a908a908a906004016138f7565b600060405180830381600087803b15801561272b57600080fd5b505af115801561273f573d6000803e3d6000fd5b505050506127538c8c8c8c8c8c8c8c6128d5565b505050505050505050505050565b6000828201838110156127d557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b60006127d583836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250612e64565b60006127d583836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612f15565b600082612871575060006127d8565b8282028284828161287e57fe5b04146127d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061419e6021913960400191505060405180910390fd5b6128f773ffffffffffffffffffffffffffffffffffffffff8916883087612f94565b600065ffffffffffff86161561290d578561290f565b425b9050600082156129c8576000546040517fbc61256e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063bc61256e90612973908b908e908b906004016138c6565b602060405180830381600087803b15801561298d57600080fd5b505af11580156129a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129c591906137dd565b90505b6129d0613410565b6040518061010001604052808c73ffffffffffffffffffffffffffffffffffffffff1681526020018a73ffffffffffffffffffffffffffffffffffffffff1681526020018465ffffffffffff1681526020018761ffff1681526020018661ffff168152602001888152602001600081526020018381525090508060016000600354815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548165ffffffffffff021916908365ffffffffffff160217905550606082015181600101601a6101000a81548161ffff021916908361ffff160217905550608082015181600101601c6101000a81548161ffff021916908361ffff16021790555060a0820151816002015560c0820151816003015560e08201518160040155905050600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060035490806001815401808255809150506001900390600052602060002001600090919091909150558873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff167f61a86a91d761a7322a10c3ff0cda14501ac0d019f088b470cb222e5e94747e896003548b888c8c8a604051612c67969594939291906140ea565b60405180910390a45050600380546001019055505050505050505050565b60008383018261ffff8087169083161015612ccd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f99190613a8e565b5090505b9392505050565b6000828152600160205260408120600481015490919015612dc157600054600183015483546040517fbc3e1b7a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9384169363bc3e1b7a93612d57939082169291169088906004016138c6565b602060405180830381600087803b158015612d7157600080fd5b505af1158015612d85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612da991906137dd565b6004830154909150612dbb90826127de565b60048301555b6003820154612dd09084612761565b600383015560018201548254612e009173ffffffffffffffffffffffffffffffffffffffff91821691168561302f565b81546001830154604051869273ffffffffffffffffffffffffffffffffffffffff9081169216907fbac91588ea67037e676b74f37797bcae8524aab9a7ba7431a24a72e6f29bc19790612e5690889087906140dc565b60405180910390a450505050565b60008184841115612f0d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612ed2578181015183820152602001612eba565b50505050905090810190601f168015612eff5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008183612f7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201818152835160248401528351909283926044909101919085019080838360008315612ed2578181015183820152602001612eba565b506000838581612f8a57fe5b0495945050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff80861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526130299085906130b8565b50505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261224d9084905b606061311a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166131909092919063ffffffff16565b80519091501561224d5780806020019051602081101561313957600080fd5b505161224d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001806141bf602a913960400191505060405180910390fd5b606061319f84846000856131a7565b949350505050565b606082471015613202576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806141786026913960400191505060405180910390fd5b61320b85613362565b61327657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b602083106132e057805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016132a3565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613342576040519150601f19603f3d011682016040523d82523d6000602084013e613347565b606091505b5091509150613357828286613368565b979650505050505050565b3b151590565b60608315613377575081612cd1565b8251156133875782518084602001fd5b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201818152845160248401528451859391928392604401919085019080838360008315612ed2578181015183820152602001612eba565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081019190915290565b60405180606001604052806000815260200160008152602001613475613410565b905290565b803573ffffffffffffffffffffffffffffffffffffffff81168114610ff957600080fd5b600082601f8301126134ae578081fd5b813567ffffffffffffffff808211156134c357fe5b6020808302604051828282010181811085821117156134de57fe5b6040528481529450818501925085820181870183018810156134ff57600080fd5b600091505b84821015613522578035845292820192600191909101908201613504565b505050505092915050565b80358015158114610ff957600080fd5b803561ffff81168114610ff957600080fd5b803565ffffffffffff81168114610ff957600080fd5b600060208284031215613576578081fd5b6127d58261347a565b60008060408385031215613591578081fd5b61359a8361347a565b91506135a86020840161347a565b90509250929050565b600080600080600080600080610100898b0312156135cd578384fd5b6135d68961347a565b97506135e460208a0161347a565b96506135f260408a0161347a565b955061360060608a0161354f565b94506080890135935061361560a08a0161353d565b925061362360c08a0161353d565b915061363160e08a0161352d565b90509295985092959890939650565b6000806000806000806000806000806000806101808d8f031215613662578384fd5b61366b8d61347a565b9b5061367960208e0161347a565b9a5061368760408e0161347a565b995061369560608e0161354f565b985060808d013597506136aa60a08e0161353d565b96506136b860c08e0161353d565b95506136c660e08e0161352d565b94506101008d013593506101208d013560ff811681146136e4578384fd5b809350506101408d013591506101608d013590509295989b509295989b509295989b565b6000806040838503121561371a578182fd5b6137238361347a565b946020939093013593505050565b600060208284031215613742578081fd5b813567ffffffffffffffff811115613758578182fd5b61319f8482850161349e565b60008060408385031215613776578182fd5b823567ffffffffffffffff8082111561378d578384fd5b6137998683870161349e565b935060208501359150808211156137ae578283fd5b506137bb8582860161349e565b9150509250929050565b6000602082840312156137d6578081fd5b5035919050565b6000602082840312156137ee578081fd5b5051919050565b600080600060608486031215613809578283fd5b833592506138196020850161353d565b91506138276040850161353d565b90509250925092565b8051825260208101516020830152604081015161224d60408401825b73ffffffffffffffffffffffffffffffffffffffff8082511683528060208301511660208401525065ffffffffffff6040820151166040830152606081015161ffff8082166060850152806080840151166080850152505060a081015160a083015260c081015160c083015260e081015160e08301525050565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff97881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b73ffffffffffffffffffffffffffffffffffffffff988916815296909716602087015265ffffffffffff94909416604086015261ffff92831660608601529116608084015260a083015260c082015260e08101919091526101000190565b6020808252825182820181905260009190848201906040850190845b818110156139e6576139d2838551613830565b9284019261014092909201916001016139bf565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156139e657613a2183855161384c565b928401926101009290920191600101613a0e565b6020808252825182820181905260009190848201906040850190845b818110156139e657835183529284019291840191600101613a51565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6000602080835283518082850152825b81811015613aba57858101830151858201604001528201613a9e565b81811115613acb5783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60208082526039908201527f5661756c743a3a6c6f636b546f6b656e73576974685065726d69743a2076657360408201527f74696e67206475726174696f6e206d757374206265203e203000000000000000606082015260800190565b6020808252602b908201527f5661756c743a3a657874656e644c6f636b3a20636c696666206d6f726520746860408201527f616e203130207965617273000000000000000000000000000000000000000000606082015260800190565b6020808252603c908201527f5661756c743a3a636c61696d556e6c6f636b6564546f6b656e416d6f756e747360408201527f3a20617272617973206d7573742062652073616d65206c656e67746800000000606082015260800190565b6020808252602b908201527f5661756c743a3a6c6f636b546f6b656e733a2076657374696e6720647572617460408201527f696f6e203c20636c696666000000000000000000000000000000000000000000606082015260800190565b60208082526036908201527f5661756c743a3a6c6f636b546f6b656e733a2076657374696e6720647572617460408201527f696f6e206d6f7265207468616e20323520796561727300000000000000000000606082015260800190565b60208082526021908201527f5661756c743a3a6c6f636b546f6b656e733a20616d6f756e74206e6f74203e2060408201527f3000000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526033908201527f5661756c743a3a636c61696d416c6c556e6c6f636b6564546f6b656e733a206360408201527f6c61696d61626c65416d6f756e74206973203000000000000000000000000000606082015260800190565b6020808252602f908201527f5661756c743a3a6c6f636b546f6b656e733a2076657374696e6720647572617460408201527f696f6e206d757374206265203e20300000000000000000000000000000000000606082015260800190565b602080825260409082018190527f5661756c743a3a6c6f636b546f6b656e73576974685065726d69743a20766573908201527f74696e67206475726174696f6e206d6f7265207468616e203235207965617273606082015260800190565b6020808252602e908201527f5661756c743a3a657874656e644c6f636b3a206d73672e73656e646572206d7560408201527f7374206265207265636569766572000000000000000000000000000000000000606082015260800190565b6020808252602b908201527f5661756c743a3a6c6f636b546f6b656e73576974685065726d69743a20616d6f60408201527f756e74206e6f74203e2030000000000000000000000000000000000000000000606082015260800190565b60208082526036908201527f5661756c743a3a657874656e644c6f636b3a2076657374696e6720647572617460408201527f696f6e206d6f7265207468616e20323520796561727300000000000000000000606082015260800190565b6020808252603a908201527f5661756c743a3a636c61696d556e6c6f636b6564546f6b656e416d6f756e747360408201527f3a20636c61696d61626c65416d6f756e74203c20616d6f756e74000000000000606082015260800190565b60208082526023908201527f5661756c743a3a657874656e644c6f636b3a206475726174696f6e203c20636c60408201527f6966660000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602d908201527f5661756c743a3a6c6f636b546f6b656e73576974685065726d69743a2064757260408201527f6174696f6e203c20636c69666600000000000000000000000000000000000000606082015260800190565b61014081016127d88284613830565b8151815260208083015190820152604080830151908201526060918201519181019190915260800190565b61ffff938416815291909216602082015265ffffffffffff909116604082015260600190565b90815260200190565b918252602082015260400190565b958652602086019490945265ffffffffffff92909216604085015261ffff908116606085015216608083015260a082015260c0019056fe5661756c743a3a657874656e644c6f636b3a2076657374696e67206d617820646179732065786365656465645661756c743a3a657874656e644c6f636b3a20636c696666206d61782064617973206578636565646564416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212203cc696c46b9c7892d13064ce1d88e7367a6bd1f559f0d7ee415d61a8f50373fd64736f6c63430007040033",
  "devdoc": {
    "details": "Contract for locking up tokens for set periods of time  + optionally providing locked tokens with voting power",
    "kind": "dev",
    "methods": {
      "activeLockBalances(address)": {
        "params": {
          "receiver": "The address that has locked balances"
        },
        "returns": {
          "_0": "the active lock balances"
        }
      },
      "activeLockIds(address)": {
        "params": {
          "receiver": "The address that has locked balances"
        },
        "returns": {
          "_0": "the active lock ids"
        }
      },
      "activeLocks(address)": {
        "params": {
          "receiver": "The address that has locked balances"
        },
        "returns": {
          "_0": "the locks"
        }
      },
      "allActiveLockBalances()": {
        "returns": {
          "_0": "the active lock balances"
        }
      },
      "allActiveLockIds()": {
        "returns": {
          "_0": "the lock ids"
        }
      },
      "allActiveLocks()": {
        "returns": {
          "_0": "the locks"
        }
      },
      "allLocks(address)": {
        "params": {
          "receiver": "The address that has locked balances"
        },
        "returns": {
          "_0": "the locks"
        }
      },
      "claimAllUnlockedTokens(uint256[])": {
        "details": "Errors if no tokens are claimableIt is advised receivers check they are entitled to claim via `claimableBalance` before calling this",
        "params": {
          "locks": "The lock ids for unlocked token balances"
        }
      },
      "claimUnlockedTokenAmounts(uint256[],uint256[])": {
        "details": "Errors if token amounts provided are > claimable amountsIt is advised receivers check they are entitled to claim via `claimableBalance` before calling this",
        "params": {
          "amounts": "The amount of each unlocked token to claim",
          "locks": "The lock ids for unlocked token balances"
        }
      },
      "claimableBalance(uint256)": {
        "details": "Returns 0 if cliff duration has not ended",
        "params": {
          "lockId": "The lock ID"
        },
        "returns": {
          "_0": "The amount that can be claimed"
        }
      },
      "extendLock(uint256,uint16,uint16)": {
        "params": {
          "cliffDaysToAdd": "The number of days to add to cliff duration",
          "lockId": "The lock id for a locked token balance",
          "vestingDaysToAdd": "The number of days to add to vesting duration"
        }
      },
      "lockBalance(uint256)": {
        "params": {
          "lockId": "The lock ID"
        },
        "returns": {
          "balance": "the lock balance"
        }
      },
      "lockTokens(address,address,address,uint48,uint256,uint16,uint16,bool)": {
        "params": {
          "amount": "The amount of tokens being locked",
          "cliffDurationInDays": "The cliff duration in days",
          "grantVotingPower": "if true, give user voting power from tokens",
          "locker": "The account that is locking tokens",
          "receiver": "The account that will be able to retrieve unlocked tokens",
          "startTime": "The unix timestamp when the lock period will start",
          "vestingDurationInDays": "The vesting period in days"
        }
      },
      "lockTokensWithPermit(address,address,address,uint48,uint256,uint16,uint16,bool,uint256,uint8,bytes32,bytes32)": {
        "details": "It is up to the frontend developer to ensure the token implements permit - otherwise this will fail",
        "params": {
          "amount": "The amount of tokens being locked",
          "cliffDurationInDays": "The lock cliff duration in days",
          "deadline": "The time at which to expire the signature",
          "grantVotingPower": "if true, give user voting power from tokens",
          "locker": "The account that is locking tokens",
          "r": "Half of the ECDSA signature pair",
          "receiver": "The account that will be able to retrieve unlocked tokens",
          "s": "Half of the ECDSA signature pair",
          "startTime": "The unix timestamp when the lock period will start",
          "token": "Address of token to lock",
          "v": "The recovery byte of the signature",
          "vestingDurationInDays": "The lock period in days"
        }
      },
      "tokenBalance(address,address)": {
        "params": {
          "receiver": "The address that has unlocked balances",
          "token": "The token to check"
        },
        "returns": {
          "balance": "the total active balance of `token` for `receiver`"
        }
      },
      "totalTokenBalance(address)": {
        "params": {
          "token": "The token to check"
        },
        "returns": {
          "balance": "the total active balance of `token`"
        }
      }
    },
    "stateVariables": {
      "SECONDS_PER_DAY": {
        "details": "Used to translate lock periods specified in days to seconds"
      }
    },
    "title": "Vault",
    "version": 1
  },
  "userdoc": {
    "events": {
      "LockCreated(address,address,address,uint256,uint256,uint48,uint16,uint16,uint256)": {
        "notice": "Event emitted when a new lock is created"
      },
      "LockExtended(uint256,uint16,uint16,uint16,uint16,uint48)": {
        "notice": "Event emitted when lock duration extended"
      },
      "UnlockedTokensClaimed(address,address,uint256,uint256,uint256)": {
        "notice": "Event emitted when tokens are claimed by a receiver from an unlocked balance"
      }
    },
    "kind": "user",
    "methods": {
      "activeLockBalances(address)": {
        "notice": "Get all active token lock balances for receiver"
      },
      "activeLockIds(address)": {
        "notice": "Get all active token lock ids for receiver"
      },
      "activeLocks(address)": {
        "notice": "Get all active token locks for receiver"
      },
      "allActiveLockBalances()": {
        "notice": "Get all active token lock balances"
      },
      "allActiveLockIds()": {
        "notice": "Get all active token lock ids"
      },
      "allActiveLocks()": {
        "notice": "Get all active token locks"
      },
      "allLocks(address)": {
        "notice": "Get all token locks for receiver"
      },
      "claimAllUnlockedTokens(uint256[])": {
        "notice": "Allows receiver to claim all of their unlocked tokens for a set of locks"
      },
      "claimUnlockedTokenAmounts(uint256[],uint256[])": {
        "notice": "Allows receiver to claim a portion of their unlocked tokens for a given lock"
      },
      "claimableBalance(uint256)": {
        "notice": "Get claimable balance for a given lock id"
      },
      "constructor": {
        "notice": "Create a new Vault contract"
      },
      "extendLock(uint256,uint16,uint16)": {
        "notice": "Allows receiver extend lock periods for a given lock"
      },
      "lockBalance(uint256)": {
        "notice": "Get lock balance for a given lock id"
      },
      "lockIds(address,uint256)": {
        "notice": "Mapping of address to lock id"
      },
      "lockManager()": {
        "notice": "lockManager contract"
      },
      "lockTokens(address,address,address,uint48,uint256,uint16,uint16,bool)": {
        "notice": "Lock tokens, optionally providing voting power"
      },
      "lockTokensWithPermit(address,address,address,uint48,uint256,uint16,uint16,bool,uint256,uint8,bytes32,bytes32)": {
        "notice": "Lock tokens, using permit for approval"
      },
      "numLocks()": {
        "notice": "Number of locks"
      },
      "tokenBalance(address,address)": {
        "notice": "Get token balance of receiver"
      },
      "tokenLocks(uint256)": {
        "notice": "Mapping of lock id > token locks"
      },
      "totalTokenBalance(address)": {
        "notice": "Get total token balance"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5448,
        "contract": "contracts/Vault.sol:Vault",
        "label": "lockManager",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ILockManager)9899"
      },
      {
        "astId": 5490,
        "contract": "contracts/Vault.sol:Vault",
        "label": "tokenLocks",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Lock)5465_storage)"
      },
      {
        "astId": 5496,
        "contract": "contracts/Vault.sol:Vault",
        "label": "lockIds",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 5499,
        "contract": "contracts/Vault.sol:Vault",
        "label": "numLocks",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(ILockManager)9899": {
        "encoding": "inplace",
        "label": "contract ILockManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Lock)5465_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Vault.Lock)",
        "numberOfBytes": "32",
        "value": "t_struct(Lock)5465_storage"
      },
      "t_struct(Lock)5465_storage": {
        "encoding": "inplace",
        "label": "struct Vault.Lock",
        "members": [
          {
            "astId": 5450,
            "contract": "contracts/Vault.sol:Vault",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5452,
            "contract": "contracts/Vault.sol:Vault",
            "label": "receiver",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5454,
            "contract": "contracts/Vault.sol:Vault",
            "label": "startTime",
            "offset": 20,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 5456,
            "contract": "contracts/Vault.sol:Vault",
            "label": "vestingDurationInDays",
            "offset": 26,
            "slot": "1",
            "type": "t_uint16"
          },
          {
            "astId": 5458,
            "contract": "contracts/Vault.sol:Vault",
            "label": "cliffDurationInDays",
            "offset": 28,
            "slot": "1",
            "type": "t_uint16"
          },
          {
            "astId": 5460,
            "contract": "contracts/Vault.sol:Vault",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5462,
            "contract": "contracts/Vault.sol:Vault",
            "label": "amountClaimed",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5464,
            "contract": "contracts/Vault.sol:Vault",
            "label": "votingPower",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      }
    }
  }
}