{
  "address": "0x79B6F3A7F6a841eA05C9109447a265d5d0BBca99",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "ChangedOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votingPower",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "VotingPowerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votingPower",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addVotingPowerForLockedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addVotingPowerForVestingTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "archToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "balanceOfAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract PrismProxy",
          "name": "prism",
          "type": "address"
        }
      ],
      "name": "become",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "changeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "getARCHAmountStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "getARCHStake",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votingPower",
              "type": "uint256"
            }
          ],
          "internalType": "struct Stake",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stakedToken",
          "type": "address"
        }
      ],
      "name": "getAmountStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stakedToken",
          "type": "address"
        }
      ],
      "name": "getStake",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votingPower",
              "type": "uint256"
            }
          ],
          "internalType": "struct Stake",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_archToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vestingContract",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "removeVotingPowerForClaimedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "removeVotingPowerForUnlockedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newLockManager",
          "type": "address"
        }
      ],
      "name": "setLockManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registry",
          "type": "address"
        }
      ],
      "name": "setTokenRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "stakeWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe753e5c8f3962929f091b9ce158148c51a013b3a95c0d469c0b0b6a5bd588715",
  "receipt": {
    "to": null,
    "from": "0x62E0D8E38297E4A50D5abBb822CA7548b7d2F9ca",
    "contractAddress": "0x79B6F3A7F6a841eA05C9109447a265d5d0BBca99",
    "transactionIndex": 75,
    "gasUsed": "3273534",
    "logsBloom": "0x
    "blockHash": "0x16a834757e1df8458b14af362ec15191cba2e23981653c863da1becb8bc9fca5",
    "transactionHash": "0xe753e5c8f3962929f091b9ce158148c51a013b3a95c0d469c0b0b6a5bd588715",
    "logs": [],
    "blockNumber": 11914112,
    "cumulativeGasUsed": "7966516",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "2e9142a3380a2374076d02017f19bf74",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ChangedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"VotingPowerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addVotingPowerForLockedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addVotingPowerForVestingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"archToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PrismProxy\",\"name\":\"prism\",\"type\":\"address\"}],\"name\":\"become\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getARCHAmountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getARCHStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct Stake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"}],\"name\":\"getAmountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"}],\"name\":\"getStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct Stake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_archToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vestingContract\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeVotingPowerForClaimedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeVotingPowerForUnlockedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLockManager\",\"type\":\"address\"}],\"name\":\"setLockManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"setTokenRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"stakeWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation contract for voting power prism proxy Calls should not be made directly to this contract, instead make calls to the VotingPowerPrism proxy contract The exception to this is the `become` function specified in PrismProxyImplementation  This function is called once and is used by this contract to accept its role as the implementation for the prism proxy\",\"kind\":\"dev\",\"methods\":{\"addVotingPowerForLockedTokens(address,uint256)\":{\"params\":{\"account\":\"The recipient of voting power\",\"amount\":\"The amount of voting power to add\"}},\"addVotingPowerForVestingTokens(address,uint256)\":{\"params\":{\"account\":\"The recipient of voting power\",\"amount\":\"The amount of voting power to add\"}},\"archToken()\":{\"returns\":{\"_0\":\"Address of ARCH token\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address to get votes balance\"},\"returns\":{\"_0\":\"The number of current votes for `account`\"}},\"balanceOfAt(address,uint256)\":{\"details\":\"Block number must be a finalized block or else this function will revert to prevent misinformation.\",\"params\":{\"account\":\"The address of the account to check\",\"blockNumber\":\"The block number to get the vote balance at\"},\"returns\":{\"_0\":\"The number of votes the account had as of the given block\"}},\"become(address)\":{\"params\":{\"prism\":\"Prism Proxy contract\"}},\"changeOwner(address)\":{\"params\":{\"newOwner\":\"New owner address\"}},\"decimals()\":{\"returns\":{\"_0\":\"decimals\"}},\"getARCHAmountStaked(address)\":{\"params\":{\"staker\":\"The user with staked ARCH\"},\"returns\":{\"_0\":\"total ARCH amount staked\"}},\"getARCHStake(address)\":{\"params\":{\"staker\":\"The user with staked ARCH\"},\"returns\":{\"_0\":\"total ARCH staked\"}},\"getAmountStaked(address,address)\":{\"params\":{\"stakedToken\":\"The staked token\",\"staker\":\"The user with staked tokens\"},\"returns\":{\"_0\":\"total amount staked\"}},\"getStake(address,address)\":{\"params\":{\"stakedToken\":\"The staked token\",\"staker\":\"The user with staked tokens\"},\"returns\":{\"_0\":\"total staked\"}},\"initialize(address,address)\":{\"details\":\"Should be called via VotingPowerPrism before calling anything else\",\"params\":{\"_archToken\":\"address of ARCH token\",\"_vestingContract\":\"address of Vesting contract\"}},\"lockManager()\":{\"returns\":{\"_0\":\"Address of lockManager\"}},\"owner()\":{\"returns\":{\"_0\":\"Address of owner\"}},\"removeVotingPowerForClaimedTokens(address,uint256)\":{\"params\":{\"account\":\"The account with voting power\",\"amount\":\"The amount of voting power to remove\"}},\"removeVotingPowerForUnlockedTokens(address,uint256)\":{\"params\":{\"account\":\"The account with voting power\",\"amount\":\"The amount of voting power to remove\"}},\"setLockManager(address)\":{\"params\":{\"newLockManager\":\"Address of lockManager\"}},\"setTokenRegistry(address)\":{\"params\":{\"registry\":\"Address of token registry\"}},\"stake(address,uint256)\":{\"params\":{\"amount\":\"The amount to stake\",\"token\":\"The token to stake\"}},\"stake(uint256)\":{\"params\":{\"amount\":\"The amount to stake\"}},\"stakeWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"amount\":\"The amount to stake\",\"deadline\":\"The time at which to expire the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"tokenRegistry()\":{\"returns\":{\"_0\":\"Address of token registry\"}},\"vestingContract()\":{\"returns\":{\"_0\":\"Address of vesting contract\"}},\"withdraw(address,uint256)\":{\"params\":{\"amount\":\"The amount to withdraw\",\"token\":\"The token to withdraw\"}},\"withdraw(uint256)\":{\"params\":{\"amount\":\"The amount to withdraw\"}}},\"title\":\"VotingPower\",\"version\":1},\"userdoc\":{\"events\":{\"ChangedOwner(address,address)\":{\"notice\":\"Event emitted when the owner of the voting power contract is updated\"},\"Staked(address,address,uint256,uint256)\":{\"notice\":\"An event that's emitted when a user's staked balance increases\"},\"VotingPowerChanged(address,uint256,uint256)\":{\"notice\":\"An event that's emitted when an account's vote balance changes\"},\"Withdrawn(address,address,uint256,uint256)\":{\"notice\":\"An event that's emitted when a user's staked balance decreases\"}},\"kind\":\"user\",\"methods\":{\"addVotingPowerForLockedTokens(address,uint256)\":{\"notice\":\"Count locked tokens toward voting power for `account`\"},\"addVotingPowerForVestingTokens(address,uint256)\":{\"notice\":\"Count vesting ARCH tokens toward voting power for `account`\"},\"archToken()\":{\"notice\":\"Address of ARCH token\"},\"balanceOf(address)\":{\"notice\":\"Gets the current votes balance for `account`\"},\"balanceOfAt(address,uint256)\":{\"notice\":\"Determine the prior number of votes for an account as of a block number\"},\"become(address)\":{\"notice\":\"Accept invitation to be implementation contract for proxy\"},\"changeOwner(address)\":{\"notice\":\"Change owner of vesting contract\"},\"decimals()\":{\"notice\":\"Decimals used for voting power\"},\"getARCHAmountStaked(address)\":{\"notice\":\"Get total amount of ARCH tokens staked in contract by `staker`\"},\"getARCHStake(address)\":{\"notice\":\"Get staked amount and voting power from ARCH tokens staked in contract by `staker`\"},\"getAmountStaked(address,address)\":{\"notice\":\"Get total amount of tokens staked in contract by `staker`\"},\"getStake(address,address)\":{\"notice\":\"Get total staked amount and voting power from `stakedToken` staked in contract by `staker`\"},\"initialize(address,address)\":{\"notice\":\"Initialize VotingPower contract\"},\"lockManager()\":{\"notice\":\"Address of lockManager\"},\"owner()\":{\"notice\":\"Address of owner\"},\"removeVotingPowerForClaimedTokens(address,uint256)\":{\"notice\":\"Remove claimed vesting ARCH tokens from voting power for `account`\"},\"removeVotingPowerForUnlockedTokens(address,uint256)\":{\"notice\":\"Remove unlocked tokens from voting power for `account`\"},\"setLockManager(address)\":{\"notice\":\"Sets lockManager address\"},\"setTokenRegistry(address)\":{\"notice\":\"Sets token registry address\"},\"stake(address,uint256)\":{\"notice\":\"Stake LP tokens to unlock voting power for `msg.sender`\"},\"stake(uint256)\":{\"notice\":\"Stake ARCH tokens to unlock voting power for `msg.sender`\"},\"stakeWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Stake ARCH tokens using offchain approvals to unlock voting power\"},\"tokenRegistry()\":{\"notice\":\"Address of token registry\"},\"vestingContract()\":{\"notice\":\"Address of vesting contract\"},\"withdraw(address,uint256)\":{\"notice\":\"Withdraw staked LP tokens, removing voting power for `msg.sender`\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw staked ARCH tokens, removing voting power for `msg.sender`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VotingPower.sol\":\"VotingPower\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/VotingPower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IVotingPowerFormula.sol\\\";\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./lib/ReentrancyGuardUpgradeSafe.sol\\\";\\nimport \\\"./lib/PrismProxyImplementation.sol\\\";\\nimport \\\"./lib/VotingPowerStorage.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\n\\n/**\\n * @title VotingPower\\n * @dev Implementation contract for voting power prism proxy\\n * Calls should not be made directly to this contract, instead make calls to the VotingPowerPrism proxy contract\\n * The exception to this is the `become` function specified in PrismProxyImplementation \\n * This function is called once and is used by this contract to accept its role as the implementation for the prism proxy\\n */\\ncontract VotingPower is PrismProxyImplementation, ReentrancyGuardUpgradeSafe {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice An event that's emitted when a user's staked balance increases\\n    event Staked(address indexed user, address indexed token, uint256 indexed amount, uint256 votingPower);\\n\\n    /// @notice An event that's emitted when a user's staked balance decreases\\n    event Withdrawn(address indexed user, address indexed token, uint256 indexed amount, uint256 votingPower);\\n\\n    /// @notice An event that's emitted when an account's vote balance changes\\n    event VotingPowerChanged(address indexed voter, uint256 indexed previousBalance, uint256 indexed newBalance);\\n\\n    /// @notice Event emitted when the owner of the voting power contract is updated\\n    event ChangedOwner(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice restrict functions to just owner address\\n    modifier onlyOwner {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        require(app.owner == address(0) || msg.sender == app.owner, \\\"only owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initialize VotingPower contract\\n     * @dev Should be called via VotingPowerPrism before calling anything else\\n     * @param _archToken address of ARCH token\\n     * @param _vestingContract address of Vesting contract\\n     */\\n    function initialize(\\n        address _archToken,\\n        address _vestingContract\\n    ) public initializer {\\n        __ReentrancyGuard_init_unchained();\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        app.archToken = IArchToken(_archToken);\\n        app.vesting = IVesting(_vestingContract);\\n    }\\n\\n    /**\\n     * @notice Address of ARCH token\\n     * @return Address of ARCH token\\n     */\\n    function archToken() public view returns (address) {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        return address(app.archToken);\\n    }\\n\\n    /**\\n     * @notice Decimals used for voting power\\n     * @return decimals\\n     */\\n    function decimals() public pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @notice Address of vesting contract\\n     * @return Address of vesting contract\\n     */\\n    function vestingContract() public view returns (address) {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        return address(app.vesting);\\n    }\\n\\n    /**\\n     * @notice Address of token registry\\n     * @return Address of token registry\\n     */\\n    function tokenRegistry() public view returns (address) {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        return address(app.tokenRegistry);\\n    }\\n\\n    /**\\n     * @notice Address of lockManager\\n     * @return Address of lockManager\\n     */\\n    function lockManager() public view returns (address) {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        return app.lockManager;\\n    }\\n\\n    /**\\n     * @notice Address of owner\\n     * @return Address of owner\\n     */\\n    function owner() public view returns (address) {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        return app.owner;\\n    }\\n\\n    /**\\n     * @notice Sets token registry address\\n     * @param registry Address of token registry\\n     */\\n    function setTokenRegistry(address registry) public onlyOwner {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        app.tokenRegistry = ITokenRegistry(registry);\\n    }\\n\\n    /**\\n     * @notice Sets lockManager address\\n     * @param newLockManager Address of lockManager\\n     */\\n    function setLockManager(address newLockManager) public onlyOwner {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        app.lockManager = newLockManager;\\n    }\\n\\n    /**\\n     * @notice Change owner of vesting contract\\n     * @param newOwner New owner address\\n     */\\n    function changeOwner(address newOwner) external onlyOwner {\\n        require(newOwner != address(0) && newOwner != address(this), \\\"VP::changeOwner: not valid address\\\");\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        emit ChangedOwner(app.owner, newOwner);\\n        app.owner = newOwner;   \\n    }\\n\\n    /**\\n     * @notice Stake ARCH tokens using offchain approvals to unlock voting power\\n     * @param amount The amount to stake\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function stakeWithPermit(uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external nonReentrant {\\n        require(amount > 0, \\\"VP::stakeWithPermit: cannot stake 0\\\");\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        require(app.archToken.balanceOf(msg.sender) >= amount, \\\"VP::stakeWithPermit: not enough tokens\\\");\\n\\n        app.archToken.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n\\n        _stake(msg.sender, address(app.archToken), amount, amount);\\n    }\\n\\n    /**\\n     * @notice Stake ARCH tokens to unlock voting power for `msg.sender`\\n     * @param amount The amount to stake\\n     */\\n    function stake(uint256 amount) external nonReentrant {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        require(amount > 0, \\\"VP::stake: cannot stake 0\\\");\\n        require(app.archToken.balanceOf(msg.sender) >= amount, \\\"VP::stake: not enough tokens\\\");\\n        require(app.archToken.allowance(msg.sender, address(this)) >= amount, \\\"VP::stake: must approve tokens before staking\\\");\\n\\n        _stake(msg.sender, address(app.archToken), amount, amount);\\n    }\\n\\n    /**\\n     * @notice Stake LP tokens to unlock voting power for `msg.sender`\\n     * @param token The token to stake\\n     * @param amount The amount to stake\\n     */\\n    function stake(address token, uint256 amount) external nonReentrant {\\n        IERC20 lptoken = IERC20(token);\\n        require(amount > 0, \\\"VP::stake: cannot stake 0\\\");\\n        require(lptoken.balanceOf(msg.sender) >= amount, \\\"VP::stake: not enough tokens\\\");\\n        require(lptoken.allowance(msg.sender, address(this)) >= amount, \\\"VP::stake: must approve tokens before staking\\\");\\n\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        address tokenFormulaAddress = app.tokenRegistry.tokenFormulas(token);\\n        require(tokenFormulaAddress != address(0), \\\"VP::stake: token not supported\\\");\\n        \\n        IVotingPowerFormula tokenFormula = IVotingPowerFormula(tokenFormulaAddress);\\n        uint256 votingPower = tokenFormula.convertTokensToVotingPower(amount);\\n        _stake(msg.sender, token, amount, votingPower);\\n    }\\n\\n    /**\\n     * @notice Count vesting ARCH tokens toward voting power for `account`\\n     * @param account The recipient of voting power\\n     * @param amount The amount of voting power to add\\n     */\\n    function addVotingPowerForVestingTokens(address account, uint256 amount) external nonReentrant {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        require(amount > 0, \\\"VP::addVPforVT: cannot add 0 voting power\\\");\\n        require(msg.sender == address(app.vesting), \\\"VP::addVPforVT: only vesting contract\\\");\\n\\n        _increaseVotingPower(account, amount);\\n    }\\n\\n    /**\\n     * @notice Remove claimed vesting ARCH tokens from voting power for `account`\\n     * @param account The account with voting power\\n     * @param amount The amount of voting power to remove\\n     */\\n    function removeVotingPowerForClaimedTokens(address account, uint256 amount) external nonReentrant {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        require(amount > 0, \\\"VP::removeVPforCT: cannot remove 0 voting power\\\");\\n        require(msg.sender == address(app.vesting), \\\"VP::removeVPforCT: only vesting contract\\\");\\n\\n        _decreaseVotingPower(account, amount);\\n    }\\n\\n    /**\\n     * @notice Count locked tokens toward voting power for `account`\\n     * @param account The recipient of voting power\\n     * @param amount The amount of voting power to add\\n     */\\n    function addVotingPowerForLockedTokens(address account, uint256 amount) external nonReentrant {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        require(amount > 0, \\\"VP::addVPforLT: cannot add 0 voting power\\\");\\n        require(msg.sender == app.lockManager, \\\"VP::addVPforLT: only lockManager contract\\\");\\n\\n        _increaseVotingPower(account, amount);\\n    }\\n\\n    /**\\n     * @notice Remove unlocked tokens from voting power for `account`\\n     * @param account The account with voting power\\n     * @param amount The amount of voting power to remove\\n     */\\n    function removeVotingPowerForUnlockedTokens(address account, uint256 amount) external nonReentrant {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        require(amount > 0, \\\"VP::removeVPforUT: cannot remove 0 voting power\\\");\\n        require(msg.sender == app.lockManager, \\\"VP::removeVPforUT: only lockManager contract\\\");\\n\\n        _decreaseVotingPower(account, amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw staked ARCH tokens, removing voting power for `msg.sender`\\n     * @param amount The amount to withdraw\\n     */\\n    function withdraw(uint256 amount) external nonReentrant {\\n        require(amount > 0, \\\"VP::withdraw: cannot withdraw 0\\\");\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        _withdraw(msg.sender, address(app.archToken), amount, amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw staked LP tokens, removing voting power for `msg.sender`\\n     * @param token The token to withdraw\\n     * @param amount The amount to withdraw\\n     */\\n    function withdraw(address token, uint256 amount) external nonReentrant {\\n        require(amount > 0, \\\"VP::withdraw: cannot withdraw 0\\\");\\n        Stake memory s = getStake(msg.sender, token);\\n        uint256 vpToWithdraw = amount.mul(s.votingPower).div(s.amount);\\n        _withdraw(msg.sender, token, amount, vpToWithdraw);\\n    }\\n\\n    /**\\n     * @notice Get total amount of ARCH tokens staked in contract by `staker`\\n     * @param staker The user with staked ARCH\\n     * @return total ARCH amount staked\\n     */\\n    function getARCHAmountStaked(address staker) public view returns (uint256) {\\n        return getARCHStake(staker).amount;\\n    }\\n\\n    /**\\n     * @notice Get total amount of tokens staked in contract by `staker`\\n     * @param staker The user with staked tokens\\n     * @param stakedToken The staked token\\n     * @return total amount staked\\n     */\\n    function getAmountStaked(address staker, address stakedToken) public view returns (uint256) {\\n        return getStake(staker, stakedToken).amount;\\n    }\\n\\n    /**\\n     * @notice Get staked amount and voting power from ARCH tokens staked in contract by `staker`\\n     * @param staker The user with staked ARCH\\n     * @return total ARCH staked\\n     */\\n    function getARCHStake(address staker) public view returns (Stake memory) {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        return getStake(staker, address(app.archToken));\\n    }\\n\\n    /**\\n     * @notice Get total staked amount and voting power from `stakedToken` staked in contract by `staker`\\n     * @param staker The user with staked tokens\\n     * @param stakedToken The staked token\\n     * @return total staked\\n     */\\n    function getStake(address staker, address stakedToken) public view returns (Stake memory) {\\n        StakeStorage storage ss = VotingPowerStorage.stakeStorage();\\n        return ss.stakes[staker][stakedToken];\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        CheckpointStorage storage cs = VotingPowerStorage.checkpointStorage();\\n        uint32 nCheckpoints = cs.numCheckpoints[account];\\n        return nCheckpoints > 0 ? cs.checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function balanceOfAt(address account, uint256 blockNumber) public view returns (uint256) {\\n        require(blockNumber < block.number, \\\"VP::balanceOfAt: not yet determined\\\");\\n        \\n        CheckpointStorage storage cs = VotingPowerStorage.checkpointStorage();\\n        uint32 nCheckpoints = cs.numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (cs.checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return cs.checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (cs.checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = cs.checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return cs.checkpoints[account][lower].votes;\\n    }\\n\\n    /**\\n     * @notice Internal implementation of stake\\n     * @param voter The user that is staking tokens\\n     * @param token The token to stake\\n     * @param tokenAmount The amount of token to stake\\n     * @param votingPower The amount of voting power stake translates into\\n     */\\n    function _stake(address voter, address token, uint256 tokenAmount, uint256 votingPower) internal {\\n        IERC20(token).safeTransferFrom(voter, address(this), tokenAmount);\\n\\n        StakeStorage storage ss = VotingPowerStorage.stakeStorage();\\n        ss.stakes[voter][token].amount = ss.stakes[voter][token].amount.add(tokenAmount);\\n        ss.stakes[voter][token].votingPower = ss.stakes[voter][token].votingPower.add(votingPower);\\n\\n        emit Staked(voter, token, tokenAmount, votingPower);\\n\\n        _increaseVotingPower(voter, votingPower);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of withdraw\\n     * @param voter The user with tokens staked\\n     * @param token The token that is staked\\n     * @param tokenAmount The amount of token to withdraw\\n     * @param votingPower The amount of voting power stake translates into\\n     */\\n    function _withdraw(address voter, address token, uint256 tokenAmount, uint256 votingPower) internal {\\n        StakeStorage storage ss = VotingPowerStorage.stakeStorage();\\n        require(ss.stakes[voter][token].amount >= tokenAmount, \\\"VP::_withdraw: not enough tokens staked\\\");\\n        require(ss.stakes[voter][token].votingPower >= votingPower, \\\"VP::_withdraw: not enough voting power\\\");\\n        ss.stakes[voter][token].amount = ss.stakes[voter][token].amount.sub(tokenAmount);\\n        ss.stakes[voter][token].votingPower = ss.stakes[voter][token].votingPower.sub(votingPower);\\n        \\n        IERC20(token).safeTransfer(voter, tokenAmount);\\n\\n        emit Withdrawn(voter, token, tokenAmount, votingPower);\\n        \\n        _decreaseVotingPower(voter, votingPower);\\n    }\\n\\n    /**\\n     * @notice Increase voting power of voter\\n     * @param voter The voter whose voting power is increasing \\n     * @param amount The amount of voting power to increase by\\n     */\\n    function _increaseVotingPower(address voter, uint256 amount) internal {\\n        CheckpointStorage storage cs = VotingPowerStorage.checkpointStorage();\\n        uint32 checkpointNum = cs.numCheckpoints[voter];\\n        uint256 votingPowerOld = checkpointNum > 0 ? cs.checkpoints[voter][checkpointNum - 1].votes : 0;\\n        uint256 votingPowerNew = votingPowerOld.add(amount);\\n        _writeCheckpoint(voter, checkpointNum, votingPowerOld, votingPowerNew);\\n    }\\n\\n    /**\\n     * @notice Decrease voting power of voter\\n     * @param voter The voter whose voting power is decreasing \\n     * @param amount The amount of voting power to decrease by\\n     */\\n    function _decreaseVotingPower(address voter, uint256 amount) internal {\\n        CheckpointStorage storage cs = VotingPowerStorage.checkpointStorage();\\n        uint32 checkpointNum = cs.numCheckpoints[voter];\\n        uint256 votingPowerOld = checkpointNum > 0 ? cs.checkpoints[voter][checkpointNum - 1].votes : 0;\\n        uint256 votingPowerNew = votingPowerOld.sub(amount);\\n        _writeCheckpoint(voter, checkpointNum, votingPowerOld, votingPowerNew);\\n    }\\n\\n    /**\\n     * @notice Create checkpoint of voting power for voter at current block number\\n     * @param voter The voter whose voting power is changing\\n     * @param nCheckpoints The current checkpoint number for voter\\n     * @param oldVotes The previous voting power of this voter\\n     * @param newVotes The new voting power of this voter\\n     */\\n    function _writeCheckpoint(address voter, uint32 nCheckpoints, uint256 oldVotes, uint256 newVotes) internal {\\n      uint32 blockNumber = _safe32(block.number, \\\"VP::_writeCheckpoint: block number exceeds 32 bits\\\");\\n\\n      CheckpointStorage storage cs = VotingPowerStorage.checkpointStorage();\\n      if (nCheckpoints > 0 && cs.checkpoints[voter][nCheckpoints - 1].fromBlock == blockNumber) {\\n          cs.checkpoints[voter][nCheckpoints - 1].votes = newVotes;\\n      } else {\\n          cs.checkpoints[voter][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n          cs.numCheckpoints[voter] = nCheckpoints + 1;\\n      }\\n\\n      emit VotingPowerChanged(voter, oldVotes, newVotes);\\n    }\\n\\n    /**\\n     * @notice Converts uint256 to uint32 safely\\n     * @param n Number\\n     * @param errorMessage Error message to use if number cannot be converted\\n     * @return uint32 number\\n     */\\n    function _safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n}\",\"keccak256\":\"0x35e8fe05ba48604a9f032df861fbc0bfe69600f71e9abb331bd71fbf59175243\",\"license\":\"MIT\"},\"contracts/interfaces/IArchToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IArchToken {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function mint(address dst, uint256 amount) external returns (bool);\\n    function burn(address src, uint256 amount) external returns (bool);\\n    function updateTokenMetadata(string memory tokenName, string memory tokenSymbol) external returns (bool);\\n    function supplyManager() external view returns (address);\\n    function metadataManager() external view returns (address);\\n    function supplyChangeAllowedAfter() external view returns (uint256);\\n    function supplyChangeWaitingPeriod() external view returns (uint32);\\n    function supplyChangeWaitingPeriodMinimum() external view returns (uint32);\\n    function mintCap() external view returns (uint16);\\n    function setSupplyManager(address newSupplyManager) external returns (bool);\\n    function setMetadataManager(address newMetadataManager) external returns (bool);\\n    function setSupplyChangeWaitingPeriod(uint32 period) external returns (bool);\\n    function setMintCap(uint16 newCap) external returns (bool);\\n    event MintCapChanged(uint16 indexed oldMintCap, uint16 indexed newMintCap);\\n    event SupplyManagerChanged(address indexed oldManager, address indexed newManager);\\n    event SupplyChangeWaitingPeriodChanged(uint32 indexed oldWaitingPeriod, uint32 indexed newWaitingPeriod);\\n    event MetadataManagerChanged(address indexed oldManager, address indexed newManager);\\n    event TokenMetaUpdated(string indexed name, string indexed symbol);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce);\\n}\",\"keccak256\":\"0x573123d04812487103499ebafe969bb27f00c4236bf433416ef6e84155deef3c\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x2bac03f58760cfbe9fc44f16681bc9be8be40a99b40462f7d29c13134eb0d61b\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface ITokenRegistry {\\n    function owner() external view returns (address);\\n    function tokenFormulas(address) external view returns (address);\\n    function setTokenFormula(address token, address formula) external;\\n    function removeToken(address token) external;\\n    function changeOwner(address newOwner) external;\\n    event ChangedOwner(address indexed oldOwner, address indexed newOwner);\\n    event TokenAdded(address indexed token, address indexed formula);\\n    event TokenRemoved(address indexed token);\\n}\",\"keccak256\":\"0xb34b46ec62a293095f0cc5e657996226c0bde9282d70f123730cdca63f22f827\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IVault {\\n    \\n    struct Lock {\\n        address token;\\n        address receiver;\\n        uint48 startTime;\\n        uint16 vestingDurationInDays;\\n        uint16 cliffDurationInDays;\\n        uint256 amount;\\n        uint256 amountClaimed;\\n        uint256 votingPower;\\n    }\\n\\n    struct LockBalance {\\n        uint256 id;\\n        uint256 claimableAmount;\\n        Lock lock;\\n    }\\n\\n    struct TokenBalance {\\n        uint256 totalAmount;\\n        uint256 claimableAmount;\\n        uint256 claimedAmount;\\n        uint256 votingPower;\\n    }\\n\\n    function lockTokens(address token, address locker, address receiver, uint48 startTime, uint256 amount, uint16 lockDurationInDays, uint16 cliffDurationInDays, bool grantVotingPower) external;\\n    function lockTokensWithPermit(address token, address locker, address receiver, uint48 startTime, uint256 amount, uint16 lockDurationInDays, uint16 cliffDurationInDays, bool grantVotingPower, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function claimUnlockedTokenAmounts(uint256[] memory lockIds, uint256[] memory amounts) external;\\n    function claimAllUnlockedTokens(uint256[] memory lockIds) external;\\n    function tokenLocks(uint256 lockId) external view returns(Lock memory);\\n    function allActiveLockIds() external view returns(uint256[] memory);\\n    function allActiveLocks() external view returns(Lock[] memory);\\n    function allActiveLockBalances() external view returns(LockBalance[] memory);\\n    function activeLockIds(address receiver) external view returns(uint256[] memory);\\n    function allLocks(address receiver) external view returns(Lock[] memory);\\n    function activeLocks(address receiver) external view returns(Lock[] memory);\\n    function activeLockBalances(address receiver) external view returns(LockBalance[] memory);\\n    function totalTokenBalance(address token) external view returns(TokenBalance memory balance);\\n    function tokenBalance(address token, address receiver) external view returns(TokenBalance memory balance);\\n    function lockBalance(uint256 lockId) external view returns (LockBalance memory);\\n    function claimableBalance(uint256 lockId) external view returns (uint256);\\n    function extendLock(uint256 lockId, uint16 vestingDaysToAdd, uint16 cliffDaysToAdd) external;\\n} \",\"keccak256\":\"0xa983f3b5a98ff64f79dd5026fb936f0e07ea470ce64fa832783f25cb76df52ec\",\"license\":\"MIT\"},\"contracts/interfaces/IVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IArchToken.sol\\\";\\nimport \\\"./IVotingPower.sol\\\";\\n\\ninterface IVesting {\\n    \\n    struct Grant {\\n        uint256 startTime;\\n        uint256 amount;\\n        uint16 vestingDuration;\\n        uint16 vestingCliff;\\n        uint256 totalClaimed;\\n    }\\n\\n    function owner() external view returns (address);\\n    function token() external view returns (IArchToken);\\n    function votingPower() external view returns (IVotingPower);\\n    function addTokenGrant(address recipient, uint256 startTime, uint256 amount, uint16 vestingDurationInDays, uint16 vestingCliffInDays) external;\\n    function getTokenGrant(address recipient) external view returns(Grant memory);\\n    function calculateGrantClaim(address recipient) external view returns (uint256);\\n    function vestedBalance(address account) external view returns (uint256);\\n    function claimedBalance(address recipient) external view returns (uint256);\\n    function claimVestedTokens(address recipient) external;\\n    function tokensVestedPerDay(address recipient) external view returns(uint256);\\n    function setVotingPowerContract(address newContract) external;\\n    function changeOwner(address newOwner) external;\\n    event GrantAdded(address indexed recipient, uint256 indexed amount, uint256 startTime, uint16 vestingDurationInDays, uint16 vestingCliffInDays);\\n    event GrantTokensClaimed(address indexed recipient, uint256 indexed amountClaimed);\\n    event ChangedOwner(address indexed oldOwner, address indexed newOwner);\\n    event ChangedVotingPower(address indexed oldContract, address indexed newContract);\\n\\n} \",\"keccak256\":\"0xca0fb051cf0123309d4b55cbca48e5cb48f8ae63e2b3a975e6a19e97352ff296\",\"license\":\"MIT\"},\"contracts/interfaces/IVotingPower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../lib/PrismProxy.sol\\\";\\n\\ninterface IVotingPower {\\n\\n    struct Stake {\\n        uint256 amount;\\n        uint256 votingPower;\\n    }\\n\\n    function setPendingProxyImplementation(address newPendingImplementation) external returns (bool);\\n    function acceptProxyImplementation() external returns (bool);\\n    function setPendingProxyAdmin(address newPendingAdmin) external returns (bool);\\n    function acceptProxyAdmin() external returns (bool);\\n    function proxyAdmin() external view returns (address);\\n    function pendingProxyAdmin() external view returns (address);\\n    function proxyImplementation() external view returns (address);\\n    function pendingProxyImplementation() external view returns (address);\\n    function proxyImplementationVersion() external view returns (uint8);\\n    function become(PrismProxy prism) external;\\n    function initialize(address _archToken, address _vestingContract) external;\\n    function owner() external view returns (address);\\n    function archToken() external view returns (address);\\n    function vestingContract() external view returns (address);\\n    function tokenRegistry() external view returns (address);\\n    function lockManager() external view returns (address);\\n    function changeOwner(address newOwner) external;\\n    function setTokenRegistry(address registry) external;\\n    function setLockManager(address newLockManager) external;\\n    function stake(uint256 amount) external;\\n    function stakeWithPermit(uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function withdraw(uint256 amount) external;\\n    function addVotingPowerForVestingTokens(address account, uint256 amount) external;\\n    function removeVotingPowerForClaimedTokens(address account, uint256 amount) external;\\n    function addVotingPowerForLockedTokens(address account, uint256 amount) external;\\n    function removeVotingPowerForUnlockedTokens(address account, uint256 amount) external;\\n    function getARCHAmountStaked(address staker) external view returns (uint256);\\n    function getAmountStaked(address staker, address stakedToken) external view returns (uint256);\\n    function getARCHStake(address staker) external view returns (Stake memory);\\n    function getStake(address staker, address stakedToken) external view returns (Stake memory);\\n    function balanceOf(address account) external view returns (uint256);\\n    function balanceOfAt(address account, uint256 blockNumber) external view returns (uint256);\\n    event NewPendingImplementation(address indexed oldPendingImplementation, address indexed newPendingImplementation);\\n    event NewImplementation(address indexed oldImplementation, address indexed newImplementation);\\n    event NewPendingAdmin(address indexed oldPendingAdmin, address indexed newPendingAdmin);\\n    event NewAdmin(address indexed oldAdmin, address indexed newAdmin);\\n    event Staked(address indexed user, address indexed token, uint256 indexed amount, uint256 votingPower);\\n    event Withdrawn(address indexed user, address indexed token, uint256 indexed amount, uint256 votingPower);\\n    event VotingPowerChanged(address indexed voter, uint256 indexed previousBalance, uint256 indexed newBalance);\\n}\",\"keccak256\":\"0x44d3595907509c91899b1fa7c5bb7b0e98dd81cc7ce44704f83f4d1693b21452\",\"license\":\"MIT\"},\"contracts/interfaces/IVotingPowerFormula.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IVotingPowerFormula {\\n    function convertTokensToVotingPower(uint256 amount) external view returns (uint256);\\n}\",\"keccak256\":\"0xe438e4185664ffa43e2543f2687e1fca4873da37976c911a38630627490e61dd\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0x3200dad4899dfc4a7b22d84e4b3768f23f50fd161c5b5997d6ae7004d90b0a94\",\"license\":\"MIT\"},\"contracts/lib/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\",\"keccak256\":\"0x9a89a53c389e07d6dc2b81846031205cf32a92158a64a6adb70338ab1461b81b\",\"license\":\"MIT\"},\"contracts/lib/PrismProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\ncontract PrismProxy {\\n\\n    /// @notice Proxy admin and implementation storage variables\\n    struct ProxyStorage {\\n        // Administrator for this contract\\n        address admin;\\n\\n        // Pending administrator for this contract\\n        address pendingAdmin;\\n\\n        // Active implementation of this contract\\n        address implementation;\\n\\n        // Pending implementation of this contract\\n        address pendingImplementation;\\n\\n        // Implementation version of this contract\\n        uint8 version;\\n    }\\n\\n    /// @dev Position in contract storage where prism ProxyStorage struct will be stored\\n    bytes32 constant PRISM_PROXY_STORAGE_POSITION = keccak256(\\\"prism.proxy.storage\\\");\\n\\n    /// @notice Emitted when pendingImplementation is changed\\n    event NewPendingImplementation(address indexed oldPendingImplementation, address indexed newPendingImplementation);\\n\\n    /// @notice Emitted when pendingImplementation is accepted, which means implementation is updated\\n    event NewImplementation(address indexed oldImplementation, address indexed newImplementation);\\n\\n    /// @notice Emitted when pendingAdmin is changed\\n    event NewPendingAdmin(address indexed oldPendingAdmin, address indexed newPendingAdmin);\\n\\n    /// @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n    event NewAdmin(address indexed oldAdmin, address indexed newAdmin);\\n\\n    /**\\n     * @notice Load proxy storage struct from specified PRISM_PROXY_STORAGE_POSITION\\n     * @return ps ProxyStorage struct\\n     */\\n    function proxyStorage() internal pure returns (ProxyStorage storage ps) {        \\n        bytes32 position = PRISM_PROXY_STORAGE_POSITION;\\n        assembly {\\n            ps.slot := position\\n        }\\n    }\\n\\n    /*** Admin Functions ***/\\n    \\n    /**\\n     * @notice Create new pending implementation for prism. msg.sender must be admin\\n     * @dev Admin function for proposing new implementation contract\\n     * @return boolean indicating success of operation\\n     */\\n    function setPendingProxyImplementation(address newPendingImplementation) public returns (bool) {\\n        ProxyStorage storage s = proxyStorage();\\n        require(msg.sender == s.admin, \\\"Prism::setPendingProxyImp: caller must be admin\\\");\\n\\n        address oldPendingImplementation = s.pendingImplementation;\\n\\n        s.pendingImplementation = newPendingImplementation;\\n\\n        emit NewPendingImplementation(oldPendingImplementation, s.pendingImplementation);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Accepts new implementation for prism. msg.sender must be pendingImplementation\\n     * @dev Admin function for new implementation to accept it's role as implementation\\n     * @return boolean indicating success of operation\\n     */\\n    function acceptProxyImplementation() public returns (bool) {\\n        ProxyStorage storage s = proxyStorage();\\n        // Check caller is pendingImplementation and pendingImplementation \\u2260 address(0)\\n        require(msg.sender == s.pendingImplementation && s.pendingImplementation != address(0), \\\"Prism::acceptProxyImp: caller must be pending implementation\\\");\\n \\n        // Save current values for inclusion in log\\n        address oldImplementation = s.implementation;\\n        address oldPendingImplementation = s.pendingImplementation;\\n\\n        s.implementation = s.pendingImplementation;\\n\\n        s.pendingImplementation = address(0);\\n        s.version++;\\n\\n        emit NewImplementation(oldImplementation, s.implementation);\\n        emit NewPendingImplementation(oldPendingImplementation, s.pendingImplementation);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `acceptAdmin` to finalize the transfer.\\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `acceptAdmin` to finalize the transfer.\\n     * @param newPendingAdmin New pending admin.\\n     * @return boolean indicating success of operation\\n     */\\n    function setPendingProxyAdmin(address newPendingAdmin) public returns (bool) {\\n        ProxyStorage storage s = proxyStorage();\\n        // Check caller = admin\\n        require(msg.sender == s.admin, \\\"Prism::setPendingProxyAdmin: caller must be admin\\\");\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = s.pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        s.pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n     * @dev Admin function for pending admin to accept role and update admin\\n     * @return boolean indicating success of operation\\n     */\\n    function acceptProxyAdmin() public returns (bool) {\\n        ProxyStorage storage s = proxyStorage();\\n        // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n        require(msg.sender == s.pendingAdmin && msg.sender != address(0), \\\"Prism::acceptProxyAdmin: caller must be pending admin\\\");\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = s.admin;\\n        address oldPendingAdmin = s.pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        s.admin = s.pendingAdmin;\\n\\n        // Clear the pending value\\n        s.pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, s.admin);\\n        emit NewPendingAdmin(oldPendingAdmin, s.pendingAdmin);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get current admin for prism proxy\\n     * @return admin address\\n     */\\n    function proxyAdmin() public view returns (address) {\\n        ProxyStorage storage s = proxyStorage();\\n        return s.admin;\\n    }\\n\\n    /**\\n     * @notice Get pending admin for prism proxy\\n     * @return admin address\\n     */\\n    function pendingProxyAdmin() public view returns (address) {\\n        ProxyStorage storage s = proxyStorage();\\n        return s.pendingAdmin;\\n    }\\n\\n    /**\\n     * @notice Address of implementation contract\\n     * @return implementation address\\n     */\\n    function proxyImplementation() public view returns (address) {\\n        ProxyStorage storage s = proxyStorage();\\n        return s.implementation;\\n    }\\n\\n    /**\\n     * @notice Address of pending implementation contract\\n     * @return pending implementation address\\n     */\\n    function pendingProxyImplementation() public view returns (address) {\\n        ProxyStorage storage s = proxyStorage();\\n        return s.pendingImplementation;\\n    }\\n\\n    /**\\n     * @notice Current implementation version for proxy\\n     * @return version number\\n     */\\n    function proxyImplementationVersion() public view returns (uint8) {\\n        ProxyStorage storage s = proxyStorage();\\n        return s.version;\\n    }\\n\\n    /**\\n     * @notice Delegates execution to an implementation contract.\\n     * @dev Returns to the external caller whatever the implementation returns or forwards reverts\\n     */\\n    function _forwardToImplementation() internal {\\n        ProxyStorage storage s = proxyStorage();\\n        // delegate all other functions to current implementation\\n        (bool success, ) = s.implementation.delegatecall(msg.data);\\n\\n        assembly {\\n              let free_mem_ptr := mload(0x40)\\n              returndatacopy(free_mem_ptr, 0, returndatasize())\\n\\n              switch success\\n              case 0 { revert(free_mem_ptr, returndatasize()) }\\n              default { return(free_mem_ptr, returndatasize()) }\\n        }\\n    }\\n}\",\"keccak256\":\"0x3d2b33b87048fa03f347e9b6f97031a142b565f7d56990d5b923ae65c5ddab37\",\"license\":\"MIT\"},\"contracts/lib/PrismProxyImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./PrismProxy.sol\\\";\\n\\ncontract PrismProxyImplementation is Initializable {\\n    /**\\n     * @notice Accept invitation to be implementation contract for proxy\\n     * @param prism Prism Proxy contract\\n     */\\n    function become(PrismProxy prism) public {\\n        require(msg.sender == prism.proxyAdmin(), \\\"Prism::become: only proxy admin can change implementation\\\");\\n        require(prism.acceptProxyImplementation() == true, \\\"Prism::become: change not authorized\\\");\\n    }\\n}\",\"keccak256\":\"0xc803c1014ed778b97b7f65eff92b2495b5cffcb0417b0cab2af43705b4780a53\",\"license\":\"MIT\"},\"contracts/lib/ReentrancyGuardUpgradeSafe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuardUpgradeSafe is Initializable {\\n    bool private _notEntered;\\n\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n\\n\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n\\n    uint256[49] private __gap;\\n}\",\"keccak256\":\"0xdf39f09d248373bd20248fffa5282b241f068e3f7168326cb257a5673d8cec7b\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0xf5c6f7a4e202733b9bea8dc0c4be4bc16f765c08079418eb426ad490d9f4142e\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x961855901713e710c05dd67f9a01e501a54e82e68a526fe3662e228c27f788d9\",\"license\":\"MIT\"},\"contracts/lib/VotingPowerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"../interfaces/IArchToken.sol\\\";\\r\\nimport \\\"../interfaces/IVesting.sol\\\";\\r\\nimport \\\"../interfaces/IVault.sol\\\";\\r\\nimport \\\"../interfaces/ITokenRegistry.sol\\\";\\r\\n\\r\\n/// @notice App metadata storage\\r\\nstruct AppStorage {\\r\\n    // A record of states for signing / validating signatures\\r\\n    mapping (address => uint) nonces;\\r\\n\\r\\n    // ARCH token\\r\\n    IArchToken archToken;\\r\\n\\r\\n    // Vesting contract\\r\\n    IVesting vesting;\\r\\n\\r\\n    // Voting Power owner\\r\\n    address owner;\\r\\n    \\r\\n    // lockManager contract\\r\\n    address lockManager;\\r\\n\\r\\n    // Token registry contract\\r\\n    ITokenRegistry tokenRegistry;\\r\\n}\\r\\n\\r\\n/// @notice A checkpoint for marking number of votes from a given block\\r\\nstruct Checkpoint {\\r\\n    uint32 fromBlock;\\r\\n    uint256 votes;\\r\\n}\\r\\n\\r\\n/// @notice All storage variables related to checkpoints\\r\\nstruct CheckpointStorage {\\r\\n     // A record of vote checkpoints for each account, by index\\r\\n    mapping (address => mapping (uint32 => Checkpoint)) checkpoints;\\r\\n\\r\\n    // The number of checkpoints for each account\\r\\n    mapping (address => uint32) numCheckpoints;\\r\\n}\\r\\n\\r\\n/// @notice The amount of a given token that has been staked, and the resulting voting power\\r\\nstruct Stake {\\r\\n    uint256 amount;\\r\\n    uint256 votingPower;\\r\\n}\\r\\n\\r\\n/// @notice All storage variables related to staking\\r\\nstruct StakeStorage {\\r\\n    // Official record of staked balances for each account > token > stake\\r\\n    mapping (address => mapping (address => Stake)) stakes;\\r\\n}\\r\\n\\r\\nlibrary VotingPowerStorage {\\r\\n    bytes32 constant VOTING_POWER_APP_STORAGE_POSITION = keccak256(\\\"voting.power.app.storage\\\");\\r\\n    bytes32 constant VOTING_POWER_CHECKPOINT_STORAGE_POSITION = keccak256(\\\"voting.power.checkpoint.storage\\\");\\r\\n    bytes32 constant VOTING_POWER_STAKE_STORAGE_POSITION = keccak256(\\\"voting.power.stake.storage\\\");\\r\\n    \\r\\n    /**\\r\\n     * @notice Load app storage struct from specified VOTING_POWER_APP_STORAGE_POSITION\\r\\n     * @return app AppStorage struct\\r\\n     */\\r\\n    function appStorage() internal pure returns (AppStorage storage app) {        \\r\\n        bytes32 position = VOTING_POWER_APP_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            app.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Load checkpoint storage struct from specified VOTING_POWER_CHECKPOINT_STORAGE_POSITION\\r\\n     * @return cs CheckpointStorage struct\\r\\n     */\\r\\n    function checkpointStorage() internal pure returns (CheckpointStorage storage cs) {        \\r\\n        bytes32 position = VOTING_POWER_CHECKPOINT_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            cs.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Load stake storage struct from specified VOTING_POWER_STAKE_STORAGE_POSITION\\r\\n     * @return ss StakeStorage struct\\r\\n     */\\r\\n    function stakeStorage() internal pure returns (StakeStorage storage ss) {        \\r\\n        bytes32 position = VOTING_POWER_STAKE_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            ss.slot := position\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0xa3479907e6de1aed094dba92dab1c35eac425237cd4b80c04f4b19f5e919db41\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613aae806100206000396000f3fe608060405234801561001057600080fd5b50600436106101ae5760003560e01c80638da5cb5b116100ee578063a6f9dae111610097578063adc9772e11610071578063adc9772e14610352578063deedfdbd14610365578063ecd9ba8214610378578063f3fef3a31461038b576101ae565b8063a6f9dae114610324578063a7dec84914610337578063acca30a21461034a576101ae565b80639d23c4c7116100c85780639d23c4c7146102f6578063a1194c8e146102fe578063a694fc3a14610311576101ae565b80638da5cb5b146102c85780639b92ac4a146102d05780639cc7a367146102e3576101ae565b80634ee2cd7e1161015b57806370a082311161013557806370a082311461026f57806375a70bb6146102825780637741459e146102a257806382dda22d146102b5576101ae565b80634ee2cd7e146102325780635e6f60451461025257806361500aa614610267576101ae565b8063313ce5671161018c578063313ce567146101ee57806335a5af921461020c578063485cc9551461021f576101ae565b80630bae5b7c146101b35780631efaa442146101c85780632e1a7d4d146101db575b600080fd5b6101c66101c136600461306e565b61039e565b005b6101c66101d636600461306e565b610513565b6101c66101e93660046130b9565b61064f565b6101f6610783565b604051610203919061399d565b60405180910390f35b6101c661021a366004612ffe565b610788565b6101c661022d366004613036565b610860565b61024561024036600461306e565b6109e0565b6040516102039190613994565b61025a610c99565b6040516102039190613136565b61025a610cc4565b61024561027d366004612ffe565b610cef565b610295610290366004612ffe565b610d9a565b604051610203919061397d565b6102456102b0366004613036565b610ddc565b6102956102c3366004613036565b610df0565b61025a610e54565b6101c66102de36600461306e565b610e7f565b6101c66102f136600461306e565b610fb1565b61025a6110e3565b6101c661030c366004612ffe565b61110e565b6101c661031f3660046130b9565b6112ae565b6101c6610332366004612ffe565b611577565b610245610345366004612ffe565b61170c565b61025a61171e565b6101c661036036600461306e565b611749565b6101c6610373366004612ffe565b611bc4565b6101c66103863660046130e9565b611c9c565b6101c661039936600461306e565b611f4c565b60335460ff1661040f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b603380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556000610441612096565b905060008211610486576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d90613809565b60405180910390fd5b600481015473ffffffffffffffffffffffffffffffffffffffff1633146104d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d90613601565b6104e383836120ba565b5050603380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905550565b60335460ff1661058457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b603380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905560006105b6612096565b9050600082116105f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d906134b3565b600281015473ffffffffffffffffffffffffffffffffffffffff163314610645576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d9061338b565b6104e38383612183565b60335460ff166106c057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b603380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690558061071f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d9061341f565b6000610729612096565b600181015490915061075490339073ffffffffffffffffffffffffffffffffffffffff168480612236565b5050603380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b601290565b6000610792612096565b600381015490915073ffffffffffffffffffffffffffffffffffffffff1615806107d55750600381015473ffffffffffffffffffffffffffffffffffffffff1633145b61080b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d90613775565b6000610815612096565b60050180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff94909416939093179092555050565b600054610100900460ff16806108795750610879612452565b80610887575060005460ff16155b6108dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001806139ef602e913960400191505060405180910390fd5b600054610100900460ff1615801561094257600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b61094a612458565b6000610954612096565b60018101805473ffffffffffffffffffffffffffffffffffffffff8088167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161790925560029092018054918616919092161790555080156109db57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b505050565b6000438210610a1b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d9061332e565b6000610a25612596565b73ffffffffffffffffffffffffffffffffffffffff8516600090815260018201602052604090205490915063ffffffff1680610a6657600092505050610c93565b73ffffffffffffffffffffffffffffffffffffffff851660009081526020838152604080832063ffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff860181168552925290912054168410610b295773ffffffffffffffffffffffffffffffffffffffff85166000908152602092835260408082207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9390930163ffffffff168252919092529020600101549050610c93565b73ffffffffffffffffffffffffffffffffffffffff851660009081526020838152604080832083805290915290205463ffffffff16841015610b7057600092505050610c93565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82015b8163ffffffff168163ffffffff161115610c5357600282820363ffffffff16048103610bc0612fcd565b5073ffffffffffffffffffffffffffffffffffffffff881660009081526020868152604080832063ffffffff808616855290835292819020815180830190925280549093168082526001909301549181019190915290881415610c2e57602001519550610c93945050505050565b805163ffffffff16881115610c4557819350610c4c565b6001820392505b5050610b96565b5073ffffffffffffffffffffffffffffffffffffffff861660009081526020938452604080822063ffffffff909316825291909352909120600101549150505b92915050565b600080610ca4612096565b6002015473ffffffffffffffffffffffffffffffffffffffff1691505090565b600080610ccf612096565b6001015473ffffffffffffffffffffffffffffffffffffffff1691505090565b600080610cfa612596565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260018201602052604090205490915063ffffffff1680610d37576000610d92565b73ffffffffffffffffffffffffffffffffffffffff841660009081526020838152604080832063ffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff86011684529091529020600101545b949350505050565b610da2612fe4565b6000610dac612096565b6001810154909150610dd590849073ffffffffffffffffffffffffffffffffffffffff16610df0565b9392505050565b6000610de88383610df0565b519392505050565b610df8612fe4565b6000610e026125ba565b73ffffffffffffffffffffffffffffffffffffffff8086166000908152602092835260408082209287168252918352819020815180830190925280548252600101549181019190915291505092915050565b600080610e5f612096565b6003015473ffffffffffffffffffffffffffffffffffffffff1691505090565b60335460ff16610ef057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b603380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556000610f22612096565b905060008211610f5e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d90613456565b600281015473ffffffffffffffffffffffffffffffffffffffff1633146104d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d9061365e565b60335460ff1661102257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b603380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556000611054612096565b905060008211611090576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d90613866565b600481015473ffffffffffffffffffffffffffffffffffffffff163314610645576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d90613718565b6000806110ee612096565b6005015473ffffffffffffffffffffffffffffffffffffffff1691505090565b8073ffffffffffffffffffffffffffffffffffffffff16633e47158c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561115457600080fd5b505afa158015611168573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118c919061301a565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d90613274565b8073ffffffffffffffffffffffffffffffffffffffff166394d8fbd06040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561123857600080fd5b505af115801561124c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112709190613099565b15156001146112ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d906136bb565b50565b60335460ff1661131f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b603380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556000611351612096565b90506000821161138d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d9061323d565b60018101546040517f70a08231000000000000000000000000000000000000000000000000000000008152839173ffffffffffffffffffffffffffffffffffffffff16906370a08231906113e5903390600401613136565b60206040518083038186803b1580156113fd57600080fd5b505afa158015611411573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143591906130d1565b101561146d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d906133e8565b60018101546040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152839173ffffffffffffffffffffffffffffffffffffffff169063dd62ed3e906114c79033903090600401613157565b60206040518083038186803b1580156114df57600080fd5b505afa1580156114f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151791906130d1565b101561154f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d906138c3565b600181015461075490339073ffffffffffffffffffffffffffffffffffffffff1684806125de565b6000611581612096565b600381015490915073ffffffffffffffffffffffffffffffffffffffff1615806115c45750600381015473ffffffffffffffffffffffffffffffffffffffff1633145b6115fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d90613775565b73ffffffffffffffffffffffffffffffffffffffff821615801590611635575073ffffffffffffffffffffffffffffffffffffffff82163014155b61166b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d9061356d565b6000611675612096565b600381015460405191925073ffffffffffffffffffffffffffffffffffffffff808616929116907f2748503f8f31d8071821d1d5144384ba6a465036cda17fa1629a8a2509ccee0e90600090a360030180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff939093169290921790915550565b600061171782610d9a565b5192915050565b600080611729612096565b6004015473ffffffffffffffffffffffffffffffffffffffff1691505090565b60335460ff166117ba57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b603380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055818161181a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d9061323d565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152829073ffffffffffffffffffffffffffffffffffffffff8316906370a082319061186e903390600401613136565b60206040518083038186803b15801561188657600080fd5b505afa15801561189a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118be91906130d1565b10156118f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d906133e8565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152829073ffffffffffffffffffffffffffffffffffffffff83169063dd62ed3e9061194c9033903090600401613157565b60206040518083038186803b15801561196457600080fd5b505afa158015611978573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199c91906130d1565b10156119d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d906138c3565b60006119de612096565b60058101546040517fd419935f00000000000000000000000000000000000000000000000000000000815291925060009173ffffffffffffffffffffffffffffffffffffffff9091169063d419935f90611a3c908890600401613136565b60206040518083038186803b158015611a5457600080fd5b505afa158015611a68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8c919061301a565b905073ffffffffffffffffffffffffffffffffffffffff8116611adb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d906135ca565b6040517fb69fb7f9000000000000000000000000000000000000000000000000000000008152819060009073ffffffffffffffffffffffffffffffffffffffff83169063b69fb7f990611b32908990600401613994565b60206040518083038186803b158015611b4a57600080fd5b505afa158015611b5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8291906130d1565b9050611b90338888846125de565b5050603380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555050505050565b6000611bce612096565b600381015490915073ffffffffffffffffffffffffffffffffffffffff161580611c115750600381015473ffffffffffffffffffffffffffffffffffffffff1633145b611c47576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d90613775565b6000611c51612096565b60040180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff94909416939093179092555050565b60335460ff16611d0d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b603380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905584611d6c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d90613510565b6000611d76612096565b60018101546040517f70a08231000000000000000000000000000000000000000000000000000000008152919250879173ffffffffffffffffffffffffffffffffffffffff909116906370a0823190611dd3903390600401613136565b60206040518083038186803b158015611deb57600080fd5b505afa158015611dff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e2391906130d1565b1015611e5b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d906132d1565b60018101546040517fd505accf00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063d505accf90611ebf90339030908b908b908b908b908b9060040161317e565b600060405180830381600087803b158015611ed957600080fd5b505af1158015611eed573d6000803e3d6000fd5b5050506001820154611f199150339073ffffffffffffffffffffffffffffffffffffffff1688806125de565b5050603380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905550505050565b60335460ff16611fbd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b603380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690558061201c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d9061341f565b612024612fe4565b61202e3384610df0565b90506000612057826000015161205184602001518661270990919063ffffffff16565b9061277c565b905061206533858584612236565b5050603380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555050565b7f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f2090565b60006120c4612596565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260018201602052604081205491925063ffffffff909116908161210457600061215f565b73ffffffffffffffffffffffffffffffffffffffff851660009081526020848152604080832063ffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff87011684529091529020600101545b9050600061216d82866127be565b905061217b86848484612832565b505050505050565b600061218d612596565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260018201602052604081205491925063ffffffff90911690816121cd576000612228565b73ffffffffffffffffffffffffffffffffffffffff851660009081526020848152604080832063ffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff87011684529091529020600101545b9050600061216d8286612a20565b60006122406125ba565b73ffffffffffffffffffffffffffffffffffffffff808716600090815260208381526040808320938916835292905220549091508311156122ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d906137ac565b73ffffffffffffffffffffffffffffffffffffffff8086166000908152602083815260408083209388168352929052206001015482111561231a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d90613920565b73ffffffffffffffffffffffffffffffffffffffff808616600090815260208381526040808320938816835292905220546123559084612a20565b73ffffffffffffffffffffffffffffffffffffffff868116600090815260208481526040808320938916835292905220908155600101546123969083612a20565b73ffffffffffffffffffffffffffffffffffffffff808716600090815260208481526040808320938916808452939091529020600101919091556123db908685612a62565b828473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f91fb9d98b786c57d74c099ccd2beca1739e9f6a81fb49001ca465c4b7591bbe2856040516124399190613994565b60405180910390a461244b8583612183565b5050505050565b303b1590565b600054610100900460ff16806124715750612471612452565b8061247f575060005460ff16155b6124d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001806139ef602e913960400191505060405180910390fd5b600054610100900460ff1615801561253a57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b603380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156112ab57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b7f97ada73c2617b57999fe0c39e0cd251038e142d18fa592f9135b3c4884c92cf190565b7fb436861a9ea50c2256cd6ef2eb5e3092874d3eddb554844f2d197b6df51da09890565b61260073ffffffffffffffffffffffffffffffffffffffff8416853085612aef565b600061260a6125ba565b73ffffffffffffffffffffffffffffffffffffffff8087166000908152602083815260408083209389168352929052205490915061264890846127be565b73ffffffffffffffffffffffffffffffffffffffff8681166000908152602084815260408083209389168352929052209081556001015461268990836127be565b73ffffffffffffffffffffffffffffffffffffffff808716600081815260208581526040808320948a1680845294909152908190206001019390935591518592907f6c86f3fd5118b3aa8bb4f389a617046de0a3d3d477de1a1673d227f802f616dc906126f7908790613994565b60405180910390a461244b85836120ba565b60008261271857506000610c93565b8282028284828161272557fe5b0414610dd5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806139ce6021913960400191505060405180910390fd5b6000610dd583836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612b8a565b600082820183811015610dd557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600061285643604051806060016040528060328152602001613a4760329139612c46565b90506000612862612596565b905060008563ffffffff161180156128d4575073ffffffffffffffffffffffffffffffffffffffff861660009081526020828152604080832063ffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8a01811685529252909120548382169116145b1561293a5773ffffffffffffffffffffffffffffffffffffffff861660009081526020828152604080832063ffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8a0116845290915290206001018390556129d3565b60408051808201825263ffffffff8085168252602080830187815273ffffffffffffffffffffffffffffffffffffffff8b1660008181528784528681208c861682528452868120955186549086167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000091821617875592516001968701559081528487019092529390208054928901909116919092161790555b82848773ffffffffffffffffffffffffffffffffffffffff167f53ed7954de66613e30dd29b46ab783aa594e6309d021d8854c76bb3325d03aa360405160405180910390a4505050505050565b6000610dd583836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250612c90565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526109db908490612d04565b6040805173ffffffffffffffffffffffffffffffffffffffff80861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052612b84908590612d04565b50505050565b60008183612c30576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612bf5578181015183820152602001612bdd565b50505050905090810190601f168015612c225780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581612c3c57fe5b0495945050505050565b6000816401000000008410612c88576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d91906131cc565b509192915050565b60008184841115612cfc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201818152835160248401528351909283926044909101919085019080838360008315612bf5578181015183820152602001612bdd565b505050900390565b6060612d66826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612ddc9092919063ffffffff16565b8051909150156109db57808060200190516020811015612d8557600080fd5b50516109db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180613a1d602a913960400191505060405180910390fd5b6060610d92848460008585612df085612f47565b612e5b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b60208310612ec557805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101612e88565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612f27576040519150601f19603f3d011682016040523d82523d6000602084013e612f2c565b606091505b5091509150612f3c828286612f4d565b979650505050505050565b3b151590565b60608315612f5c575081610dd5565b825115612f6c5782518084602001fd5b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201818152845160248401528451859391928392604401919085019080838360008315612bf5578181015183820152602001612bdd565b604080518082019091526000808252602082015290565b604051806040016040528060008152602001600081525090565b60006020828403121561300f578081fd5b8135610dd5816139ab565b60006020828403121561302b578081fd5b8151610dd5816139ab565b60008060408385031215613048578081fd5b8235613053816139ab565b91506020830135613063816139ab565b809150509250929050565b60008060408385031215613080578182fd5b823561308b816139ab565b946020939093013593505050565b6000602082840312156130aa578081fd5b81518015158114610dd5578182fd5b6000602082840312156130ca578081fd5b5035919050565b6000602082840312156130e2578081fd5b5051919050565b600080600080600060a08688031215613100578081fd5b8535945060208601359350604086013560ff8116811461311e578182fd5b94979396509394606081013594506080013592915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff97881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6000602080835283518082850152825b818110156131f8578581018301518582016040015282016131dc565b818111156132095783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60208082526019908201527f56503a3a7374616b653a2063616e6e6f74207374616b65203000000000000000604082015260600190565b60208082526039908201527f507269736d3a3a6265636f6d653a206f6e6c792070726f78792061646d696e2060408201527f63616e206368616e676520696d706c656d656e746174696f6e00000000000000606082015260800190565b60208082526026908201527f56503a3a7374616b65576974685065726d69743a206e6f7420656e6f7567682060408201527f746f6b656e730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526023908201527f56503a3a62616c616e63654f6641743a206e6f74207965742064657465726d6960408201527f6e65640000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526028908201527f56503a3a72656d6f76655650666f7243543a206f6e6c792076657374696e672060408201527f636f6e7472616374000000000000000000000000000000000000000000000000606082015260800190565b6020808252601c908201527f56503a3a7374616b653a206e6f7420656e6f75676820746f6b656e7300000000604082015260600190565b6020808252601f908201527f56503a3a77697468647261773a2063616e6e6f74207769746864726177203000604082015260600190565b60208082526029908201527f56503a3a6164645650666f7256543a2063616e6e6f7420616464203020766f7460408201527f696e6720706f7765720000000000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f56503a3a72656d6f76655650666f7243543a2063616e6e6f742072656d6f766560408201527f203020766f74696e6720706f7765720000000000000000000000000000000000606082015260800190565b60208082526023908201527f56503a3a7374616b65576974685065726d69743a2063616e6e6f74207374616b60408201527f6520300000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526022908201527f56503a3a6368616e67654f776e65723a206e6f742076616c696420616464726560408201527f7373000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601e908201527f56503a3a7374616b653a20746f6b656e206e6f7420737570706f727465640000604082015260600190565b60208082526029908201527f56503a3a6164645650666f724c543a206f6e6c79206c6f636b4d616e6167657260408201527f20636f6e74726163740000000000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f56503a3a6164645650666f7256543a206f6e6c792076657374696e6720636f6e60408201527f7472616374000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526024908201527f507269736d3a3a6265636f6d653a206368616e6765206e6f7420617574686f7260408201527f697a656400000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602c908201527f56503a3a72656d6f76655650666f7255543a206f6e6c79206c6f636b4d616e6160408201527f67657220636f6e74726163740000000000000000000000000000000000000000606082015260800190565b6020808252600a908201527f6f6e6c79206f776e657200000000000000000000000000000000000000000000604082015260600190565b60208082526027908201527f56503a3a5f77697468647261773a206e6f7420656e6f75676820746f6b656e7360408201527f207374616b656400000000000000000000000000000000000000000000000000606082015260800190565b60208082526029908201527f56503a3a6164645650666f724c543a2063616e6e6f7420616464203020766f7460408201527f696e6720706f7765720000000000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f56503a3a72656d6f76655650666f7255543a2063616e6e6f742072656d6f766560408201527f203020766f74696e6720706f7765720000000000000000000000000000000000606082015260800190565b6020808252602d908201527f56503a3a7374616b653a206d75737420617070726f766520746f6b656e73206260408201527f65666f7265207374616b696e6700000000000000000000000000000000000000606082015260800190565b60208082526026908201527f56503a3a5f77697468647261773a206e6f7420656e6f75676820766f74696e6760408201527f20706f7765720000000000000000000000000000000000000000000000000000606082015260800190565b815181526020918201519181019190915260400190565b90815260200190565b60ff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff811681146112ab57600080fdfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a65645361666545524332303a204552433230206f7065726174696f6e20646964206e6f74207375636365656456503a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d62657220657863656564732033322062697473a26469706673582212200ffe82b1f5b72bd54b371fad9c29c741761cb402f0400c3692f36dcd6e61ec0464736f6c63430007040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101ae5760003560e01c80638da5cb5b116100ee578063a6f9dae111610097578063adc9772e11610071578063adc9772e14610352578063deedfdbd14610365578063ecd9ba8214610378578063f3fef3a31461038b576101ae565b8063a6f9dae114610324578063a7dec84914610337578063acca30a21461034a576101ae565b80639d23c4c7116100c85780639d23c4c7146102f6578063a1194c8e146102fe578063a694fc3a14610311576101ae565b80638da5cb5b146102c85780639b92ac4a146102d05780639cc7a367146102e3576101ae565b80634ee2cd7e1161015b57806370a082311161013557806370a082311461026f57806375a70bb6146102825780637741459e146102a257806382dda22d146102b5576101ae565b80634ee2cd7e146102325780635e6f60451461025257806361500aa614610267576101ae565b8063313ce5671161018c578063313ce567146101ee57806335a5af921461020c578063485cc9551461021f576101ae565b80630bae5b7c146101b35780631efaa442146101c85780632e1a7d4d146101db575b600080fd5b6101c66101c136600461306e565b61039e565b005b6101c66101d636600461306e565b610513565b6101c66101e93660046130b9565b61064f565b6101f6610783565b604051610203919061399d565b60405180910390f35b6101c661021a366004612ffe565b610788565b6101c661022d366004613036565b610860565b61024561024036600461306e565b6109e0565b6040516102039190613994565b61025a610c99565b6040516102039190613136565b61025a610cc4565b61024561027d366004612ffe565b610cef565b610295610290366004612ffe565b610d9a565b604051610203919061397d565b6102456102b0366004613036565b610ddc565b6102956102c3366004613036565b610df0565b61025a610e54565b6101c66102de36600461306e565b610e7f565b6101c66102f136600461306e565b610fb1565b61025a6110e3565b6101c661030c366004612ffe565b61110e565b6101c661031f3660046130b9565b6112ae565b6101c6610332366004612ffe565b611577565b610245610345366004612ffe565b61170c565b61025a61171e565b6101c661036036600461306e565b611749565b6101c6610373366004612ffe565b611bc4565b6101c66103863660046130e9565b611c9c565b6101c661039936600461306e565b611f4c565b60335460ff1661040f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b603380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556000610441612096565b905060008211610486576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d90613809565b60405180910390fd5b600481015473ffffffffffffffffffffffffffffffffffffffff1633146104d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d90613601565b6104e383836120ba565b5050603380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905550565b60335460ff1661058457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b603380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905560006105b6612096565b9050600082116105f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d906134b3565b600281015473ffffffffffffffffffffffffffffffffffffffff163314610645576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d9061338b565b6104e38383612183565b60335460ff166106c057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b603380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690558061071f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d9061341f565b6000610729612096565b600181015490915061075490339073ffffffffffffffffffffffffffffffffffffffff168480612236565b5050603380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b601290565b6000610792612096565b600381015490915073ffffffffffffffffffffffffffffffffffffffff1615806107d55750600381015473ffffffffffffffffffffffffffffffffffffffff1633145b61080b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d90613775565b6000610815612096565b60050180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff94909416939093179092555050565b600054610100900460ff16806108795750610879612452565b80610887575060005460ff16155b6108dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001806139ef602e913960400191505060405180910390fd5b600054610100900460ff1615801561094257600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b61094a612458565b6000610954612096565b60018101805473ffffffffffffffffffffffffffffffffffffffff8088167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161790925560029092018054918616919092161790555080156109db57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b505050565b6000438210610a1b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d9061332e565b6000610a25612596565b73ffffffffffffffffffffffffffffffffffffffff8516600090815260018201602052604090205490915063ffffffff1680610a6657600092505050610c93565b73ffffffffffffffffffffffffffffffffffffffff851660009081526020838152604080832063ffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff860181168552925290912054168410610b295773ffffffffffffffffffffffffffffffffffffffff85166000908152602092835260408082207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9390930163ffffffff168252919092529020600101549050610c93565b73ffffffffffffffffffffffffffffffffffffffff851660009081526020838152604080832083805290915290205463ffffffff16841015610b7057600092505050610c93565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82015b8163ffffffff168163ffffffff161115610c5357600282820363ffffffff16048103610bc0612fcd565b5073ffffffffffffffffffffffffffffffffffffffff881660009081526020868152604080832063ffffffff808616855290835292819020815180830190925280549093168082526001909301549181019190915290881415610c2e57602001519550610c93945050505050565b805163ffffffff16881115610c4557819350610c4c565b6001820392505b5050610b96565b5073ffffffffffffffffffffffffffffffffffffffff861660009081526020938452604080822063ffffffff909316825291909352909120600101549150505b92915050565b600080610ca4612096565b6002015473ffffffffffffffffffffffffffffffffffffffff1691505090565b600080610ccf612096565b6001015473ffffffffffffffffffffffffffffffffffffffff1691505090565b600080610cfa612596565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260018201602052604090205490915063ffffffff1680610d37576000610d92565b73ffffffffffffffffffffffffffffffffffffffff841660009081526020838152604080832063ffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff86011684529091529020600101545b949350505050565b610da2612fe4565b6000610dac612096565b6001810154909150610dd590849073ffffffffffffffffffffffffffffffffffffffff16610df0565b9392505050565b6000610de88383610df0565b519392505050565b610df8612fe4565b6000610e026125ba565b73ffffffffffffffffffffffffffffffffffffffff8086166000908152602092835260408082209287168252918352819020815180830190925280548252600101549181019190915291505092915050565b600080610e5f612096565b6003015473ffffffffffffffffffffffffffffffffffffffff1691505090565b60335460ff16610ef057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b603380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556000610f22612096565b905060008211610f5e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d90613456565b600281015473ffffffffffffffffffffffffffffffffffffffff1633146104d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d9061365e565b60335460ff1661102257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b603380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556000611054612096565b905060008211611090576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d90613866565b600481015473ffffffffffffffffffffffffffffffffffffffff163314610645576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d90613718565b6000806110ee612096565b6005015473ffffffffffffffffffffffffffffffffffffffff1691505090565b8073ffffffffffffffffffffffffffffffffffffffff16633e47158c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561115457600080fd5b505afa158015611168573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118c919061301a565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d90613274565b8073ffffffffffffffffffffffffffffffffffffffff166394d8fbd06040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561123857600080fd5b505af115801561124c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112709190613099565b15156001146112ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d906136bb565b50565b60335460ff1661131f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b603380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556000611351612096565b90506000821161138d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d9061323d565b60018101546040517f70a08231000000000000000000000000000000000000000000000000000000008152839173ffffffffffffffffffffffffffffffffffffffff16906370a08231906113e5903390600401613136565b60206040518083038186803b1580156113fd57600080fd5b505afa158015611411573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143591906130d1565b101561146d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d906133e8565b60018101546040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152839173ffffffffffffffffffffffffffffffffffffffff169063dd62ed3e906114c79033903090600401613157565b60206040518083038186803b1580156114df57600080fd5b505afa1580156114f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151791906130d1565b101561154f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d906138c3565b600181015461075490339073ffffffffffffffffffffffffffffffffffffffff1684806125de565b6000611581612096565b600381015490915073ffffffffffffffffffffffffffffffffffffffff1615806115c45750600381015473ffffffffffffffffffffffffffffffffffffffff1633145b6115fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d90613775565b73ffffffffffffffffffffffffffffffffffffffff821615801590611635575073ffffffffffffffffffffffffffffffffffffffff82163014155b61166b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d9061356d565b6000611675612096565b600381015460405191925073ffffffffffffffffffffffffffffffffffffffff808616929116907f2748503f8f31d8071821d1d5144384ba6a465036cda17fa1629a8a2509ccee0e90600090a360030180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff939093169290921790915550565b600061171782610d9a565b5192915050565b600080611729612096565b6004015473ffffffffffffffffffffffffffffffffffffffff1691505090565b60335460ff166117ba57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b603380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055818161181a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d9061323d565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152829073ffffffffffffffffffffffffffffffffffffffff8316906370a082319061186e903390600401613136565b60206040518083038186803b15801561188657600080fd5b505afa15801561189a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118be91906130d1565b10156118f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d906133e8565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152829073ffffffffffffffffffffffffffffffffffffffff83169063dd62ed3e9061194c9033903090600401613157565b60206040518083038186803b15801561196457600080fd5b505afa158015611978573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199c91906130d1565b10156119d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d906138c3565b60006119de612096565b60058101546040517fd419935f00000000000000000000000000000000000000000000000000000000815291925060009173ffffffffffffffffffffffffffffffffffffffff9091169063d419935f90611a3c908890600401613136565b60206040518083038186803b158015611a5457600080fd5b505afa158015611a68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8c919061301a565b905073ffffffffffffffffffffffffffffffffffffffff8116611adb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d906135ca565b6040517fb69fb7f9000000000000000000000000000000000000000000000000000000008152819060009073ffffffffffffffffffffffffffffffffffffffff83169063b69fb7f990611b32908990600401613994565b60206040518083038186803b158015611b4a57600080fd5b505afa158015611b5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8291906130d1565b9050611b90338888846125de565b5050603380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555050505050565b6000611bce612096565b600381015490915073ffffffffffffffffffffffffffffffffffffffff161580611c115750600381015473ffffffffffffffffffffffffffffffffffffffff1633145b611c47576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d90613775565b6000611c51612096565b60040180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff94909416939093179092555050565b60335460ff16611d0d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b603380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905584611d6c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d90613510565b6000611d76612096565b60018101546040517f70a08231000000000000000000000000000000000000000000000000000000008152919250879173ffffffffffffffffffffffffffffffffffffffff909116906370a0823190611dd3903390600401613136565b60206040518083038186803b158015611deb57600080fd5b505afa158015611dff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e2391906130d1565b1015611e5b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d906132d1565b60018101546040517fd505accf00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063d505accf90611ebf90339030908b908b908b908b908b9060040161317e565b600060405180830381600087803b158015611ed957600080fd5b505af1158015611eed573d6000803e3d6000fd5b5050506001820154611f199150339073ffffffffffffffffffffffffffffffffffffffff1688806125de565b5050603380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905550505050565b60335460ff16611fbd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b603380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690558061201c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d9061341f565b612024612fe4565b61202e3384610df0565b90506000612057826000015161205184602001518661270990919063ffffffff16565b9061277c565b905061206533858584612236565b5050603380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555050565b7f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f2090565b60006120c4612596565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260018201602052604081205491925063ffffffff909116908161210457600061215f565b73ffffffffffffffffffffffffffffffffffffffff851660009081526020848152604080832063ffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff87011684529091529020600101545b9050600061216d82866127be565b905061217b86848484612832565b505050505050565b600061218d612596565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260018201602052604081205491925063ffffffff90911690816121cd576000612228565b73ffffffffffffffffffffffffffffffffffffffff851660009081526020848152604080832063ffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff87011684529091529020600101545b9050600061216d8286612a20565b60006122406125ba565b73ffffffffffffffffffffffffffffffffffffffff808716600090815260208381526040808320938916835292905220549091508311156122ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d906137ac565b73ffffffffffffffffffffffffffffffffffffffff8086166000908152602083815260408083209388168352929052206001015482111561231a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d90613920565b73ffffffffffffffffffffffffffffffffffffffff808616600090815260208381526040808320938816835292905220546123559084612a20565b73ffffffffffffffffffffffffffffffffffffffff868116600090815260208481526040808320938916835292905220908155600101546123969083612a20565b73ffffffffffffffffffffffffffffffffffffffff808716600090815260208481526040808320938916808452939091529020600101919091556123db908685612a62565b828473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f91fb9d98b786c57d74c099ccd2beca1739e9f6a81fb49001ca465c4b7591bbe2856040516124399190613994565b60405180910390a461244b8583612183565b5050505050565b303b1590565b600054610100900460ff16806124715750612471612452565b8061247f575060005460ff16155b6124d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001806139ef602e913960400191505060405180910390fd5b600054610100900460ff1615801561253a57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b603380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156112ab57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b7f97ada73c2617b57999fe0c39e0cd251038e142d18fa592f9135b3c4884c92cf190565b7fb436861a9ea50c2256cd6ef2eb5e3092874d3eddb554844f2d197b6df51da09890565b61260073ffffffffffffffffffffffffffffffffffffffff8416853085612aef565b600061260a6125ba565b73ffffffffffffffffffffffffffffffffffffffff8087166000908152602083815260408083209389168352929052205490915061264890846127be565b73ffffffffffffffffffffffffffffffffffffffff8681166000908152602084815260408083209389168352929052209081556001015461268990836127be565b73ffffffffffffffffffffffffffffffffffffffff808716600081815260208581526040808320948a1680845294909152908190206001019390935591518592907f6c86f3fd5118b3aa8bb4f389a617046de0a3d3d477de1a1673d227f802f616dc906126f7908790613994565b60405180910390a461244b85836120ba565b60008261271857506000610c93565b8282028284828161272557fe5b0414610dd5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806139ce6021913960400191505060405180910390fd5b6000610dd583836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612b8a565b600082820183811015610dd557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600061285643604051806060016040528060328152602001613a4760329139612c46565b90506000612862612596565b905060008563ffffffff161180156128d4575073ffffffffffffffffffffffffffffffffffffffff861660009081526020828152604080832063ffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8a01811685529252909120548382169116145b1561293a5773ffffffffffffffffffffffffffffffffffffffff861660009081526020828152604080832063ffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8a0116845290915290206001018390556129d3565b60408051808201825263ffffffff8085168252602080830187815273ffffffffffffffffffffffffffffffffffffffff8b1660008181528784528681208c861682528452868120955186549086167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000091821617875592516001968701559081528487019092529390208054928901909116919092161790555b82848773ffffffffffffffffffffffffffffffffffffffff167f53ed7954de66613e30dd29b46ab783aa594e6309d021d8854c76bb3325d03aa360405160405180910390a4505050505050565b6000610dd583836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250612c90565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526109db908490612d04565b6040805173ffffffffffffffffffffffffffffffffffffffff80861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052612b84908590612d04565b50505050565b60008183612c30576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612bf5578181015183820152602001612bdd565b50505050905090810190601f168015612c225780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581612c3c57fe5b0495945050505050565b6000816401000000008410612c88576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d91906131cc565b509192915050565b60008184841115612cfc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201818152835160248401528351909283926044909101919085019080838360008315612bf5578181015183820152602001612bdd565b505050900390565b6060612d66826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612ddc9092919063ffffffff16565b8051909150156109db57808060200190516020811015612d8557600080fd5b50516109db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180613a1d602a913960400191505060405180910390fd5b6060610d92848460008585612df085612f47565b612e5b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b60208310612ec557805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101612e88565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612f27576040519150601f19603f3d011682016040523d82523d6000602084013e612f2c565b606091505b5091509150612f3c828286612f4d565b979650505050505050565b3b151590565b60608315612f5c575081610dd5565b825115612f6c5782518084602001fd5b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201818152845160248401528451859391928392604401919085019080838360008315612bf5578181015183820152602001612bdd565b604080518082019091526000808252602082015290565b604051806040016040528060008152602001600081525090565b60006020828403121561300f578081fd5b8135610dd5816139ab565b60006020828403121561302b578081fd5b8151610dd5816139ab565b60008060408385031215613048578081fd5b8235613053816139ab565b91506020830135613063816139ab565b809150509250929050565b60008060408385031215613080578182fd5b823561308b816139ab565b946020939093013593505050565b6000602082840312156130aa578081fd5b81518015158114610dd5578182fd5b6000602082840312156130ca578081fd5b5035919050565b6000602082840312156130e2578081fd5b5051919050565b600080600080600060a08688031215613100578081fd5b8535945060208601359350604086013560ff8116811461311e578182fd5b94979396509394606081013594506080013592915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff97881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6000602080835283518082850152825b818110156131f8578581018301518582016040015282016131dc565b818111156132095783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60208082526019908201527f56503a3a7374616b653a2063616e6e6f74207374616b65203000000000000000604082015260600190565b60208082526039908201527f507269736d3a3a6265636f6d653a206f6e6c792070726f78792061646d696e2060408201527f63616e206368616e676520696d706c656d656e746174696f6e00000000000000606082015260800190565b60208082526026908201527f56503a3a7374616b65576974685065726d69743a206e6f7420656e6f7567682060408201527f746f6b656e730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526023908201527f56503a3a62616c616e63654f6641743a206e6f74207965742064657465726d6960408201527f6e65640000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526028908201527f56503a3a72656d6f76655650666f7243543a206f6e6c792076657374696e672060408201527f636f6e7472616374000000000000000000000000000000000000000000000000606082015260800190565b6020808252601c908201527f56503a3a7374616b653a206e6f7420656e6f75676820746f6b656e7300000000604082015260600190565b6020808252601f908201527f56503a3a77697468647261773a2063616e6e6f74207769746864726177203000604082015260600190565b60208082526029908201527f56503a3a6164645650666f7256543a2063616e6e6f7420616464203020766f7460408201527f696e6720706f7765720000000000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f56503a3a72656d6f76655650666f7243543a2063616e6e6f742072656d6f766560408201527f203020766f74696e6720706f7765720000000000000000000000000000000000606082015260800190565b60208082526023908201527f56503a3a7374616b65576974685065726d69743a2063616e6e6f74207374616b60408201527f6520300000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526022908201527f56503a3a6368616e67654f776e65723a206e6f742076616c696420616464726560408201527f7373000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601e908201527f56503a3a7374616b653a20746f6b656e206e6f7420737570706f727465640000604082015260600190565b60208082526029908201527f56503a3a6164645650666f724c543a206f6e6c79206c6f636b4d616e6167657260408201527f20636f6e74726163740000000000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f56503a3a6164645650666f7256543a206f6e6c792076657374696e6720636f6e60408201527f7472616374000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526024908201527f507269736d3a3a6265636f6d653a206368616e6765206e6f7420617574686f7260408201527f697a656400000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602c908201527f56503a3a72656d6f76655650666f7255543a206f6e6c79206c6f636b4d616e6160408201527f67657220636f6e74726163740000000000000000000000000000000000000000606082015260800190565b6020808252600a908201527f6f6e6c79206f776e657200000000000000000000000000000000000000000000604082015260600190565b60208082526027908201527f56503a3a5f77697468647261773a206e6f7420656e6f75676820746f6b656e7360408201527f207374616b656400000000000000000000000000000000000000000000000000606082015260800190565b60208082526029908201527f56503a3a6164645650666f724c543a2063616e6e6f7420616464203020766f7460408201527f696e6720706f7765720000000000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f56503a3a72656d6f76655650666f7255543a2063616e6e6f742072656d6f766560408201527f203020766f74696e6720706f7765720000000000000000000000000000000000606082015260800190565b6020808252602d908201527f56503a3a7374616b653a206d75737420617070726f766520746f6b656e73206260408201527f65666f7265207374616b696e6700000000000000000000000000000000000000606082015260800190565b60208082526026908201527f56503a3a5f77697468647261773a206e6f7420656e6f75676820766f74696e6760408201527f20706f7765720000000000000000000000000000000000000000000000000000606082015260800190565b815181526020918201519181019190915260400190565b90815260200190565b60ff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff811681146112ab57600080fdfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a65645361666545524332303a204552433230206f7065726174696f6e20646964206e6f74207375636365656456503a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d62657220657863656564732033322062697473a26469706673582212200ffe82b1f5b72bd54b371fad9c29c741761cb402f0400c3692f36dcd6e61ec0464736f6c63430007040033",
  "devdoc": {
    "details": "Implementation contract for voting power prism proxy Calls should not be made directly to this contract, instead make calls to the VotingPowerPrism proxy contract The exception to this is the `become` function specified in PrismProxyImplementation  This function is called once and is used by this contract to accept its role as the implementation for the prism proxy",
    "kind": "dev",
    "methods": {
      "addVotingPowerForLockedTokens(address,uint256)": {
        "params": {
          "account": "The recipient of voting power",
          "amount": "The amount of voting power to add"
        }
      },
      "addVotingPowerForVestingTokens(address,uint256)": {
        "params": {
          "account": "The recipient of voting power",
          "amount": "The amount of voting power to add"
        }
      },
      "archToken()": {
        "returns": {
          "_0": "Address of ARCH token"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address to get votes balance"
        },
        "returns": {
          "_0": "The number of current votes for `account`"
        }
      },
      "balanceOfAt(address,uint256)": {
        "details": "Block number must be a finalized block or else this function will revert to prevent misinformation.",
        "params": {
          "account": "The address of the account to check",
          "blockNumber": "The block number to get the vote balance at"
        },
        "returns": {
          "_0": "The number of votes the account had as of the given block"
        }
      },
      "become(address)": {
        "params": {
          "prism": "Prism Proxy contract"
        }
      },
      "changeOwner(address)": {
        "params": {
          "newOwner": "New owner address"
        }
      },
      "decimals()": {
        "returns": {
          "_0": "decimals"
        }
      },
      "getARCHAmountStaked(address)": {
        "params": {
          "staker": "The user with staked ARCH"
        },
        "returns": {
          "_0": "total ARCH amount staked"
        }
      },
      "getARCHStake(address)": {
        "params": {
          "staker": "The user with staked ARCH"
        },
        "returns": {
          "_0": "total ARCH staked"
        }
      },
      "getAmountStaked(address,address)": {
        "params": {
          "stakedToken": "The staked token",
          "staker": "The user with staked tokens"
        },
        "returns": {
          "_0": "total amount staked"
        }
      },
      "getStake(address,address)": {
        "params": {
          "stakedToken": "The staked token",
          "staker": "The user with staked tokens"
        },
        "returns": {
          "_0": "total staked"
        }
      },
      "initialize(address,address)": {
        "details": "Should be called via VotingPowerPrism before calling anything else",
        "params": {
          "_archToken": "address of ARCH token",
          "_vestingContract": "address of Vesting contract"
        }
      },
      "lockManager()": {
        "returns": {
          "_0": "Address of lockManager"
        }
      },
      "owner()": {
        "returns": {
          "_0": "Address of owner"
        }
      },
      "removeVotingPowerForClaimedTokens(address,uint256)": {
        "params": {
          "account": "The account with voting power",
          "amount": "The amount of voting power to remove"
        }
      },
      "removeVotingPowerForUnlockedTokens(address,uint256)": {
        "params": {
          "account": "The account with voting power",
          "amount": "The amount of voting power to remove"
        }
      },
      "setLockManager(address)": {
        "params": {
          "newLockManager": "Address of lockManager"
        }
      },
      "setTokenRegistry(address)": {
        "params": {
          "registry": "Address of token registry"
        }
      },
      "stake(address,uint256)": {
        "params": {
          "amount": "The amount to stake",
          "token": "The token to stake"
        }
      },
      "stake(uint256)": {
        "params": {
          "amount": "The amount to stake"
        }
      },
      "stakeWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "amount": "The amount to stake",
          "deadline": "The time at which to expire the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "tokenRegistry()": {
        "returns": {
          "_0": "Address of token registry"
        }
      },
      "vestingContract()": {
        "returns": {
          "_0": "Address of vesting contract"
        }
      },
      "withdraw(address,uint256)": {
        "params": {
          "amount": "The amount to withdraw",
          "token": "The token to withdraw"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "amount": "The amount to withdraw"
        }
      }
    },
    "title": "VotingPower",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ChangedOwner(address,address)": {
        "notice": "Event emitted when the owner of the voting power contract is updated"
      },
      "Staked(address,address,uint256,uint256)": {
        "notice": "An event that's emitted when a user's staked balance increases"
      },
      "VotingPowerChanged(address,uint256,uint256)": {
        "notice": "An event that's emitted when an account's vote balance changes"
      },
      "Withdrawn(address,address,uint256,uint256)": {
        "notice": "An event that's emitted when a user's staked balance decreases"
      }
    },
    "kind": "user",
    "methods": {
      "addVotingPowerForLockedTokens(address,uint256)": {
        "notice": "Count locked tokens toward voting power for `account`"
      },
      "addVotingPowerForVestingTokens(address,uint256)": {
        "notice": "Count vesting ARCH tokens toward voting power for `account`"
      },
      "archToken()": {
        "notice": "Address of ARCH token"
      },
      "balanceOf(address)": {
        "notice": "Gets the current votes balance for `account`"
      },
      "balanceOfAt(address,uint256)": {
        "notice": "Determine the prior number of votes for an account as of a block number"
      },
      "become(address)": {
        "notice": "Accept invitation to be implementation contract for proxy"
      },
      "changeOwner(address)": {
        "notice": "Change owner of vesting contract"
      },
      "decimals()": {
        "notice": "Decimals used for voting power"
      },
      "getARCHAmountStaked(address)": {
        "notice": "Get total amount of ARCH tokens staked in contract by `staker`"
      },
      "getARCHStake(address)": {
        "notice": "Get staked amount and voting power from ARCH tokens staked in contract by `staker`"
      },
      "getAmountStaked(address,address)": {
        "notice": "Get total amount of tokens staked in contract by `staker`"
      },
      "getStake(address,address)": {
        "notice": "Get total staked amount and voting power from `stakedToken` staked in contract by `staker`"
      },
      "initialize(address,address)": {
        "notice": "Initialize VotingPower contract"
      },
      "lockManager()": {
        "notice": "Address of lockManager"
      },
      "owner()": {
        "notice": "Address of owner"
      },
      "removeVotingPowerForClaimedTokens(address,uint256)": {
        "notice": "Remove claimed vesting ARCH tokens from voting power for `account`"
      },
      "removeVotingPowerForUnlockedTokens(address,uint256)": {
        "notice": "Remove unlocked tokens from voting power for `account`"
      },
      "setLockManager(address)": {
        "notice": "Sets lockManager address"
      },
      "setTokenRegistry(address)": {
        "notice": "Sets token registry address"
      },
      "stake(address,uint256)": {
        "notice": "Stake LP tokens to unlock voting power for `msg.sender`"
      },
      "stake(uint256)": {
        "notice": "Stake ARCH tokens to unlock voting power for `msg.sender`"
      },
      "stakeWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Stake ARCH tokens using offchain approvals to unlock voting power"
      },
      "tokenRegistry()": {
        "notice": "Address of token registry"
      },
      "vestingContract()": {
        "notice": "Address of vesting contract"
      },
      "withdraw(address,uint256)": {
        "notice": "Withdraw staked LP tokens, removing voting power for `msg.sender`"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw staked ARCH tokens, removing voting power for `msg.sender`"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11694,
        "contract": "contracts/VotingPower.sol:VotingPower",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 11697,
        "contract": "contracts/VotingPower.sol:VotingPower",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 11762,
        "contract": "contracts/VotingPower.sol:VotingPower",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 12227,
        "contract": "contracts/VotingPower.sol:VotingPower",
        "label": "_notEntered",
        "offset": 0,
        "slot": "51",
        "type": "t_bool"
      },
      {
        "astId": 12268,
        "contract": "contracts/VotingPower.sol:VotingPower",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}