{
  "address": "0x9Ae6Db0Ee81655e85a4a4dbd7496F508b372a8f9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IArchToken",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "batchTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "batchTransferWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IArchToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x31310987a0c6efe46772a3d1df50ed7918683aa7b9024b5550cbbd303e692c77",
  "receipt": {
    "to": null,
    "from": "0x4F8f512Dab59F227EA70B1D8A0044aFa95CC80C3",
    "contractAddress": "0x9Ae6Db0Ee81655e85a4a4dbd7496F508b372a8f9",
    "transactionIndex": 12,
    "gasUsed": "910534",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x056a3f80eee369df6b4e2f2d1f146183464048d7d071f96f525c56fef2ed3c10",
    "transactionHash": "0x31310987a0c6efe46772a3d1df50ed7918683aa7b9024b5550cbbd303e692c77",
    "logs": [],
    "blockNumber": 7592131,
    "cumulativeGasUsed": "2589073",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x66F945815Da39D1FCB341d46059AE8d7395DA40A"
  ],
  "solcInputHash": "08eec023378e7c1e75d0e078e93aa63b",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IArchToken\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"batchTransferWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IArchToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Allows the sender to perform batch transfers of ARCH tokens\",\"kind\":\"dev\",\"methods\":{\"batchTransfer(uint256,address[],uint256[])\":{\"details\":\"Must approve this contract for `totalAmount` before calling\",\"params\":{\"amounts\":\"Array of amounts to send to accounts via transfers\",\"recipients\":\"Array of accounts to receive transfers\",\"totalAmount\":\"Total amount to be transferred\"}},\"batchTransferWithPermit(uint256,address[],uint256[],uint256,uint8,bytes32,bytes32)\":{\"params\":{\"amounts\":\"Array of amounts to send to accounts via transfers\",\"deadline\":\"The time at which to expire the signature\",\"r\":\"Half of the ECDSA signature pair\",\"recipients\":\"Array of accounts to receive transfers\",\"s\":\"Half of the ECDSA signature pair\",\"totalAmount\":\"Total amount to be transferred\",\"v\":\"The recovery byte of the signature\"}},\"constructor\":{\"params\":{\"_token\":\"Address of ARCH token\"}}},\"title\":\"Multisend\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchTransfer(uint256,address[],uint256[])\":{\"notice\":\"Batches multiple transfers\"},\"batchTransferWithPermit(uint256,address[],uint256[],uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Batches multiple transfers with approval provided by permit function\"},\"constructor\":{\"notice\":\"Construct a new Multisend contract\"},\"token()\":{\"notice\":\"ARCH token\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Multisend.sol\":\"Multisend\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Multisend.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/IArchToken.sol\\\";\\nimport \\\"./lib/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title Multisend\\n * @dev Allows the sender to perform batch transfers of ARCH tokens\\n */\\ncontract Multisend is ReentrancyGuard {\\n\\n    /// @notice ARCH token\\n    IArchToken public token;\\n\\n    /**\\n     * @notice Construct a new Multisend contract\\n     * @param _token Address of ARCH token\\n     */\\n    constructor(IArchToken _token) {\\n        token = _token;\\n    }\\n\\n    /**\\n     * @notice Batches multiple transfers\\n     * @dev Must approve this contract for `totalAmount` before calling\\n     * @param totalAmount Total amount to be transferred\\n     * @param recipients Array of accounts to receive transfers\\n     * @param amounts Array of amounts to send to accounts via transfers\\n     */\\n    function batchTransfer(\\n        uint256 totalAmount,\\n        address[] calldata recipients,\\n        uint256[] calldata amounts\\n    ) external nonReentrant {\\n        _batchTransfer(totalAmount, recipients, amounts);\\n    }\\n\\n    /**\\n     * @notice Batches multiple transfers with approval provided by permit function\\n     * @param totalAmount Total amount to be transferred\\n     * @param recipients Array of accounts to receive transfers\\n     * @param amounts Array of amounts to send to accounts via transfers\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function batchTransferWithPermit(\\n        uint256 totalAmount,\\n        address[] calldata recipients,\\n        uint256[] calldata amounts,\\n        uint256 deadline,\\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) external nonReentrant {\\n        token.permit(msg.sender, address(this), totalAmount, deadline, v, r, s);\\n        _batchTransfer(totalAmount, recipients, amounts);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of batch transfer\\n     * @param totalAmount Total amount to be transferred\\n     * @param recipients Array of accounts to receive transfers\\n     * @param amounts Array of amounts to send to accounts via transfers\\n     */\\n    function _batchTransfer(\\n        uint256 totalAmount,\\n        address[] calldata recipients,\\n        uint256[] calldata amounts\\n    ) internal {\\n        require(token.allowance(msg.sender, address(this)) >= totalAmount, \\\"Multisend::_batchTransfer: allowance too low\\\");\\n        require(token.balanceOf(msg.sender) >= totalAmount, \\\"Multisend::_batchTransfer: sender balance too low\\\");\\n        require(recipients.length == amounts.length, \\\"Multisend::_batchTransfer: recipients length != amounts length\\\");\\n        uint256 amountTransferred = 0;\\n        for (uint256 i; i < recipients.length; i++) {\\n            bool success = token.transferFrom(msg.sender, recipients[i], amounts[i]);\\n            require(success, \\\"Multisend::_batchTransfer: failed to transfer tokens\\\");\\n            amountTransferred = amountTransferred + amounts[i];\\n        }\\n        require(amountTransferred == totalAmount, \\\"Multisend::_batchTransfer: total != transferred amount\\\");\\n    }\\n}\",\"keccak256\":\"0x562ea2505eecb1f33d806409cedfeacd33787bf5ee6ec60a8720288e8847fdb1\",\"license\":\"MIT\"},\"contracts/interfaces/IArchToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IArchToken {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function mint(address dst, uint256 amount) external returns (bool);\\n    function burn(address src, uint256 amount) external returns (bool);\\n    function updateTokenMetadata(string memory tokenName, string memory tokenSymbol) external returns (bool);\\n    function supplyManager() external view returns (address);\\n    function metadataManager() external view returns (address);\\n    function supplyChangeAllowedAfter() external view returns (uint256);\\n    function supplyChangeWaitingPeriod() external view returns (uint32);\\n    function supplyChangeWaitingPeriodMinimum() external view returns (uint32);\\n    function mintCap() external view returns (uint16);\\n    function setSupplyManager(address newSupplyManager) external returns (bool);\\n    function setMetadataManager(address newMetadataManager) external returns (bool);\\n    function setSupplyChangeWaitingPeriod(uint32 period) external returns (bool);\\n    function setMintCap(uint16 newCap) external returns (bool);\\n    event MintCapChanged(uint16 indexed oldMintCap, uint16 indexed newMintCap);\\n    event SupplyManagerChanged(address indexed oldManager, address indexed newManager);\\n    event SupplyChangeWaitingPeriodChanged(uint32 indexed oldWaitingPeriod, uint32 indexed newWaitingPeriod);\\n    event MetadataManagerChanged(address indexed oldManager, address indexed newManager);\\n    event TokenMetaUpdated(string indexed name, string indexed symbol);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce);\\n}\",\"keccak256\":\"0x573123d04812487103499ebafe969bb27f00c4236bf433416ef6e84155deef3c\",\"license\":\"MIT\"},\"contracts/lib/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\",\"keccak256\":\"0x3318ee67bfc251e74ac8ac1a97061fdaed4f5355fd9c23eb26e1ee1550f675bd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405162000feb38038062000feb83398181016040528101906100349190610098565b600160008190555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061011c565b60008151905061009281610105565b92915050565b6000602082840312156100aa57600080fd5b60006100b884828501610083565b91505092915050565b60006100cc826100e5565b9050919050565b60006100de826100c1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b61010e816100d3565b811461011957600080fd5b50565b610ebf806200012c6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80637b5cbf5014610046578063ec09172a14610062578063fc0c546a1461007e575b600080fd5b610060600480360381019061005b91906107f0565b61009c565b005b61007c60048036038101906100779190610879565b610139565b005b610086610273565b6040516100939190610c91565b60405180910390f35b60026000541415610115576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b600260008190555061012a8585858585610299565b60016000819055505050505050565b600260005414156101b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b6002600081905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d505accf33308c888888886040518863ffffffff1660e01b81526004016102219796959493929190610c22565b600060405180830381600087803b15801561023b57600080fd5b505af115801561024f573d6000803e3d6000fd5b505050506102608989898989610299565b6001600081905550505050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b84600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b81526004016102f7929190610bc2565b60206040518083038186803b15801561030f57600080fd5b505afa158015610323573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034791906107c7565b1015610388576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037f90610d0c565b60405180910390fd5b84600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016103e49190610ba7565b60206040518083038186803b1580156103fc57600080fd5b505afa158015610410573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043491906107c7565b1015610475576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046c90610cac565b60405180910390fd5b8181905084849050146104bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b490610ccc565b60405180910390fd5b6000805b85859050811015610618576000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3389898681811061051957fe5b905060200201602081019061052e9190610775565b88888781811061053a57fe5b905060200201356040518463ffffffff1660e01b815260040161055f93929190610beb565b602060405180830381600087803b15801561057957600080fd5b505af115801561058d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b1919061079e565b9050806105f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ea90610cec565b60405180910390fd5b8484838181106105ff57fe5b90506020020135830192505080806001019150506104c1565b5085811461065b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065290610d2c565b60405180910390fd5b505050505050565b60008135905061067281610e16565b92915050565b60008083601f84011261068a57600080fd5b8235905067ffffffffffffffff8111156106a357600080fd5b6020830191508360208202830111156106bb57600080fd5b9250929050565b60008083601f8401126106d457600080fd5b8235905067ffffffffffffffff8111156106ed57600080fd5b60208301915083602082028301111561070557600080fd5b9250929050565b60008151905061071b81610e2d565b92915050565b60008135905061073081610e44565b92915050565b60008135905061074581610e5b565b92915050565b60008151905061075a81610e5b565b92915050565b60008135905061076f81610e72565b92915050565b60006020828403121561078757600080fd5b600061079584828501610663565b91505092915050565b6000602082840312156107b057600080fd5b60006107be8482850161070c565b91505092915050565b6000602082840312156107d957600080fd5b60006107e78482850161074b565b91505092915050565b60008060008060006060868803121561080857600080fd5b600061081688828901610736565b955050602086013567ffffffffffffffff81111561083357600080fd5b61083f88828901610678565b9450945050604086013567ffffffffffffffff81111561085e57600080fd5b61086a888289016106c2565b92509250509295509295909350565b600080600080600080600080600060e08a8c03121561089757600080fd5b60006108a58c828d01610736565b99505060208a013567ffffffffffffffff8111156108c257600080fd5b6108ce8c828d01610678565b985098505060408a013567ffffffffffffffff8111156108ed57600080fd5b6108f98c828d016106c2565b9650965050606061090c8c828d01610736565b945050608061091d8c828d01610760565b93505060a061092e8c828d01610721565b92505060c061093f8c828d01610721565b9150509295985092959850929598565b61095881610dbc565b82525050565b61096781610d5d565b82525050565b61097681610d7b565b82525050565b61098581610dce565b82525050565b6000610998603183610d4c565b91507f4d756c746973656e643a3a5f62617463685472616e736665723a2073656e646560008301527f722062616c616e636520746f6f206c6f770000000000000000000000000000006020830152604082019050919050565b60006109fe603e83610d4c565b91507f4d756c746973656e643a3a5f62617463685472616e736665723a20726563697060008301527f69656e7473206c656e67746820213d20616d6f756e7473206c656e67746800006020830152604082019050919050565b6000610a64603483610d4c565b91507f4d756c746973656e643a3a5f62617463685472616e736665723a206661696c6560008301527f6420746f207472616e7366657220746f6b656e730000000000000000000000006020830152604082019050919050565b6000610aca602c83610d4c565b91507f4d756c746973656e643a3a5f62617463685472616e736665723a20616c6c6f7760008301527f616e636520746f6f206c6f7700000000000000000000000000000000000000006020830152604082019050919050565b6000610b30603683610d4c565b91507f4d756c746973656e643a3a5f62617463685472616e736665723a20746f74616c60008301527f20213d207472616e7366657272656420616d6f756e74000000000000000000006020830152604082019050919050565b610b9281610da5565b82525050565b610ba181610daf565b82525050565b6000602082019050610bbc600083018461094f565b92915050565b6000604082019050610bd7600083018561094f565b610be4602083018461095e565b9392505050565b6000606082019050610c00600083018661094f565b610c0d602083018561095e565b610c1a6040830184610b89565b949350505050565b600060e082019050610c37600083018a61094f565b610c44602083018961095e565b610c516040830188610b89565b610c5e6060830187610b89565b610c6b6080830186610b98565b610c7860a083018561096d565b610c8560c083018461096d565b98975050505050505050565b6000602082019050610ca6600083018461097c565b92915050565b60006020820190508181036000830152610cc58161098b565b9050919050565b60006020820190508181036000830152610ce5816109f1565b9050919050565b60006020820190508181036000830152610d0581610a57565b9050919050565b60006020820190508181036000830152610d2581610abd565b9050919050565b60006020820190508181036000830152610d4581610b23565b9050919050565b600082825260208201905092915050565b6000610d6882610d85565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000610dc782610df2565b9050919050565b6000610dd982610de0565b9050919050565b6000610deb82610d85565b9050919050565b6000610dfd82610e04565b9050919050565b6000610e0f82610d85565b9050919050565b610e1f81610d5d565b8114610e2a57600080fd5b50565b610e3681610d6f565b8114610e4157600080fd5b50565b610e4d81610d7b565b8114610e5857600080fd5b50565b610e6481610da5565b8114610e6f57600080fd5b50565b610e7b81610daf565b8114610e8657600080fd5b5056fea2646970667358221220ecd56609ccc73d324970717fa73bbe775f726b23d8216332110a83f5c5802d9264736f6c63430007040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80637b5cbf5014610046578063ec09172a14610062578063fc0c546a1461007e575b600080fd5b610060600480360381019061005b91906107f0565b61009c565b005b61007c60048036038101906100779190610879565b610139565b005b610086610273565b6040516100939190610c91565b60405180910390f35b60026000541415610115576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b600260008190555061012a8585858585610299565b60016000819055505050505050565b600260005414156101b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b6002600081905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d505accf33308c888888886040518863ffffffff1660e01b81526004016102219796959493929190610c22565b600060405180830381600087803b15801561023b57600080fd5b505af115801561024f573d6000803e3d6000fd5b505050506102608989898989610299565b6001600081905550505050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b84600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b81526004016102f7929190610bc2565b60206040518083038186803b15801561030f57600080fd5b505afa158015610323573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034791906107c7565b1015610388576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037f90610d0c565b60405180910390fd5b84600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016103e49190610ba7565b60206040518083038186803b1580156103fc57600080fd5b505afa158015610410573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043491906107c7565b1015610475576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046c90610cac565b60405180910390fd5b8181905084849050146104bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b490610ccc565b60405180910390fd5b6000805b85859050811015610618576000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3389898681811061051957fe5b905060200201602081019061052e9190610775565b88888781811061053a57fe5b905060200201356040518463ffffffff1660e01b815260040161055f93929190610beb565b602060405180830381600087803b15801561057957600080fd5b505af115801561058d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b1919061079e565b9050806105f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ea90610cec565b60405180910390fd5b8484838181106105ff57fe5b90506020020135830192505080806001019150506104c1565b5085811461065b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065290610d2c565b60405180910390fd5b505050505050565b60008135905061067281610e16565b92915050565b60008083601f84011261068a57600080fd5b8235905067ffffffffffffffff8111156106a357600080fd5b6020830191508360208202830111156106bb57600080fd5b9250929050565b60008083601f8401126106d457600080fd5b8235905067ffffffffffffffff8111156106ed57600080fd5b60208301915083602082028301111561070557600080fd5b9250929050565b60008151905061071b81610e2d565b92915050565b60008135905061073081610e44565b92915050565b60008135905061074581610e5b565b92915050565b60008151905061075a81610e5b565b92915050565b60008135905061076f81610e72565b92915050565b60006020828403121561078757600080fd5b600061079584828501610663565b91505092915050565b6000602082840312156107b057600080fd5b60006107be8482850161070c565b91505092915050565b6000602082840312156107d957600080fd5b60006107e78482850161074b565b91505092915050565b60008060008060006060868803121561080857600080fd5b600061081688828901610736565b955050602086013567ffffffffffffffff81111561083357600080fd5b61083f88828901610678565b9450945050604086013567ffffffffffffffff81111561085e57600080fd5b61086a888289016106c2565b92509250509295509295909350565b600080600080600080600080600060e08a8c03121561089757600080fd5b60006108a58c828d01610736565b99505060208a013567ffffffffffffffff8111156108c257600080fd5b6108ce8c828d01610678565b985098505060408a013567ffffffffffffffff8111156108ed57600080fd5b6108f98c828d016106c2565b9650965050606061090c8c828d01610736565b945050608061091d8c828d01610760565b93505060a061092e8c828d01610721565b92505060c061093f8c828d01610721565b9150509295985092959850929598565b61095881610dbc565b82525050565b61096781610d5d565b82525050565b61097681610d7b565b82525050565b61098581610dce565b82525050565b6000610998603183610d4c565b91507f4d756c746973656e643a3a5f62617463685472616e736665723a2073656e646560008301527f722062616c616e636520746f6f206c6f770000000000000000000000000000006020830152604082019050919050565b60006109fe603e83610d4c565b91507f4d756c746973656e643a3a5f62617463685472616e736665723a20726563697060008301527f69656e7473206c656e67746820213d20616d6f756e7473206c656e67746800006020830152604082019050919050565b6000610a64603483610d4c565b91507f4d756c746973656e643a3a5f62617463685472616e736665723a206661696c6560008301527f6420746f207472616e7366657220746f6b656e730000000000000000000000006020830152604082019050919050565b6000610aca602c83610d4c565b91507f4d756c746973656e643a3a5f62617463685472616e736665723a20616c6c6f7760008301527f616e636520746f6f206c6f7700000000000000000000000000000000000000006020830152604082019050919050565b6000610b30603683610d4c565b91507f4d756c746973656e643a3a5f62617463685472616e736665723a20746f74616c60008301527f20213d207472616e7366657272656420616d6f756e74000000000000000000006020830152604082019050919050565b610b9281610da5565b82525050565b610ba181610daf565b82525050565b6000602082019050610bbc600083018461094f565b92915050565b6000604082019050610bd7600083018561094f565b610be4602083018461095e565b9392505050565b6000606082019050610c00600083018661094f565b610c0d602083018561095e565b610c1a6040830184610b89565b949350505050565b600060e082019050610c37600083018a61094f565b610c44602083018961095e565b610c516040830188610b89565b610c5e6060830187610b89565b610c6b6080830186610b98565b610c7860a083018561096d565b610c8560c083018461096d565b98975050505050505050565b6000602082019050610ca6600083018461097c565b92915050565b60006020820190508181036000830152610cc58161098b565b9050919050565b60006020820190508181036000830152610ce5816109f1565b9050919050565b60006020820190508181036000830152610d0581610a57565b9050919050565b60006020820190508181036000830152610d2581610abd565b9050919050565b60006020820190508181036000830152610d4581610b23565b9050919050565b600082825260208201905092915050565b6000610d6882610d85565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000610dc782610df2565b9050919050565b6000610dd982610de0565b9050919050565b6000610deb82610d85565b9050919050565b6000610dfd82610e04565b9050919050565b6000610e0f82610d85565b9050919050565b610e1f81610d5d565b8114610e2a57600080fd5b50565b610e3681610d6f565b8114610e4157600080fd5b50565b610e4d81610d7b565b8114610e5857600080fd5b50565b610e6481610da5565b8114610e6f57600080fd5b50565b610e7b81610daf565b8114610e8657600080fd5b5056fea2646970667358221220ecd56609ccc73d324970717fa73bbe775f726b23d8216332110a83f5c5802d9264736f6c63430007040033",
  "devdoc": {
    "details": "Allows the sender to perform batch transfers of ARCH tokens",
    "kind": "dev",
    "methods": {
      "batchTransfer(uint256,address[],uint256[])": {
        "details": "Must approve this contract for `totalAmount` before calling",
        "params": {
          "amounts": "Array of amounts to send to accounts via transfers",
          "recipients": "Array of accounts to receive transfers",
          "totalAmount": "Total amount to be transferred"
        }
      },
      "batchTransferWithPermit(uint256,address[],uint256[],uint256,uint8,bytes32,bytes32)": {
        "params": {
          "amounts": "Array of amounts to send to accounts via transfers",
          "deadline": "The time at which to expire the signature",
          "r": "Half of the ECDSA signature pair",
          "recipients": "Array of accounts to receive transfers",
          "s": "Half of the ECDSA signature pair",
          "totalAmount": "Total amount to be transferred",
          "v": "The recovery byte of the signature"
        }
      },
      "constructor": {
        "params": {
          "_token": "Address of ARCH token"
        }
      }
    },
    "title": "Multisend",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "batchTransfer(uint256,address[],uint256[])": {
        "notice": "Batches multiple transfers"
      },
      "batchTransferWithPermit(uint256,address[],uint256[],uint256,uint8,bytes32,bytes32)": {
        "notice": "Batches multiple transfers with approval provided by permit function"
      },
      "constructor": {
        "notice": "Construct a new Multisend contract"
      },
      "token()": {
        "notice": "ARCH token"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 790,
        "contract": "contracts/Multisend.sol:Multisend",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 10,
        "contract": "contracts/Multisend.sol:Multisend",
        "label": "token",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IArchToken)408"
      }
    ],
    "types": {
      "t_contract(IArchToken)408": {
        "encoding": "inplace",
        "label": "contract IArchToken",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}