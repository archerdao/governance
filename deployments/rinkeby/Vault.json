{
  "address": "0xF7A581953f0536165211cD5Cfa669cE07a19ff90",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "locker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "durationInDays",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "LockCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "oldDuration",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "newDuration",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "LockExtended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amountClaimed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "UnlockedTokensClaimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "activeLocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "claimAllUnlockedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimUnlockedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "daysToAdd",
          "type": "uint16"
        }
      ],
      "name": "extendLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "getActiveLocks",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "getAllActiveLocks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "duration",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "amountClaimed",
              "type": "uint256"
            }
          ],
          "internalType": "struct Vault.Lock[]",
          "name": "receiverLocks",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "getLockedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "getLockedTokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lockedBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "getTokenLock",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "duration",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "amountClaimed",
              "type": "uint256"
            }
          ],
          "internalType": "struct Vault.Lock",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "getUnlockedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "getUnlockedTokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "unlockedBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "locker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "lockDurationInDays",
          "type": "uint16"
        }
      ],
      "name": "lockTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "locker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "lockDurationInDays",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "lockTokensWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numLocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenLocks",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "duration",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "amountClaimed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x966c67efc88a3ddb401dbfe860fa858a2d373a069eab7c10ff1a949cc6d5207f",
  "receipt": {
    "to": null,
    "from": "0x4F8f512Dab59F227EA70B1D8A0044aFa95CC80C3",
    "contractAddress": "0xF7A581953f0536165211cD5Cfa669cE07a19ff90",
    "transactionIndex": 7,
    "gasUsed": "2687555",
    "logsBloom": "0x
    "blockHash": "0x5b200055bfeb3bc8f88535e1163c4e7f56db7f906d18cdf4656bb6d0613a0a44",
    "transactionHash": "0x966c67efc88a3ddb401dbfe860fa858a2d373a069eab7c10ff1a949cc6d5207f",
    "logs": [],
    "blockNumber": 7592143,
    "cumulativeGasUsed": "3793082",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "95b5375efc95fa43ecd1debf175d2a9f",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"durationInDays\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"LockCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"oldDuration\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"newDuration\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"LockExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"UnlockedTokensClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeLocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"claimAllUnlockedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimUnlockedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"daysToAdd\",\"type\":\"uint16\"}],\"name\":\"extendLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"getActiveLocks\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"getAllActiveLocks\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"duration\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.Lock[]\",\"name\":\"receiverLocks\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"getLockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"getLockedTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"getTokenLock\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"duration\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.Lock\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"getUnlockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"getUnlockedTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unlockedBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"lockDurationInDays\",\"type\":\"uint16\"}],\"name\":\"lockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"lockDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"lockTokensWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numLocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenLocks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"duration\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract for locking up tokens for set periods of time Tokens locked in this contract DO NOT count towards voting power\",\"kind\":\"dev\",\"methods\":{\"claimAllUnlockedTokens(uint256)\":{\"details\":\"Errors if no tokens are unlockedIt is advised receivers check they are entitled to claim via `getUnlockedBalance` before calling this\",\"params\":{\"lockId\":\"The lock id for an unlocked token balance\"}},\"claimUnlockedTokens(uint256,uint256)\":{\"details\":\"Errors if no tokens are unlockedIt is advised receivers check they are entitled to claim via `getUnlockedBalance` before calling this\",\"params\":{\"amount\":\"The amount of unlocked tokens to claim\",\"lockId\":\"The lock id for an unlocked token balance\"}},\"extendLock(uint256,uint16)\":{\"params\":{\"daysToAdd\":\"The number of days to add to duration\",\"lockId\":\"The lock id for a locked token balance\"}},\"getActiveLocks(address)\":{\"params\":{\"receiver\":\"The address that has locked balances\"},\"returns\":{\"_0\":\"the lock ids\"}},\"getAllActiveLocks(address)\":{\"params\":{\"receiver\":\"The address that has locked balances\"},\"returns\":{\"receiverLocks\":\"the lock ids\"}},\"getLockedBalance(uint256)\":{\"details\":\"Returns 0 if duration has ended\",\"params\":{\"lockId\":\"The lock ID\"},\"returns\":{\"_0\":\"The amount that is locked\"}},\"getLockedTokenBalance(address,address)\":{\"params\":{\"receiver\":\"The address that has locked balances\",\"token\":\"The token to check\"},\"returns\":{\"lockedBalance\":\"the total amount of `token` locked \"}},\"getTokenLock(uint256)\":{\"params\":{\"lockId\":\"The ID for the locked balance\"},\"returns\":{\"_0\":\"the lock\"}},\"getUnlockedBalance(uint256)\":{\"details\":\"Returns 0 if duration has not ended\",\"params\":{\"lockId\":\"The lock ID\"},\"returns\":{\"_0\":\"The amount that can be claimed\"}},\"getUnlockedTokenBalance(address,address)\":{\"params\":{\"receiver\":\"The address that has unlocked balances\",\"token\":\"The token to check\"},\"returns\":{\"unlockedBalance\":\"the total amount of `token` unlocked \"}},\"lockTokens(address,address,address,uint256,uint256,uint16)\":{\"params\":{\"amount\":\"The amount of tokens being locked\",\"lockDurationInDays\":\"The lock period in days\",\"locker\":\"The account that is locking tokens\",\"receiver\":\"The account that will be able to retrieve unlocked tokens\",\"startTime\":\"The unix timestamp when the lock period will start\"}},\"lockTokensWithPermit(address,address,address,uint256,uint256,uint16,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"amount\":\"The amount of tokens being locked\",\"deadline\":\"The time at which to expire the signature\",\"lockDurationInDays\":\"The lock period in days\",\"locker\":\"The account that is locking tokens\",\"r\":\"Half of the ECDSA signature pair\",\"receiver\":\"The account that will be able to retrieve unlocked tokens\",\"s\":\"Half of the ECDSA signature pair\",\"startTime\":\"The unix timestamp when the lock period will start\",\"token\":\"Address of token to lock\",\"v\":\"The recovery byte of the signature\"}}},\"stateVariables\":{\"SECONDS_PER_DAY\":{\"details\":\"Used to translate lock periods specified in days to seconds\"}},\"title\":\"Vault\",\"version\":1},\"userdoc\":{\"events\":{\"LockCreated(address,address,address,uint256,uint256,uint16,uint256)\":{\"notice\":\"Event emitted when a new lock is created\"},\"LockExtended(uint16,uint16,uint256,uint256)\":{\"notice\":\"Event emitted when lock duration extended\"},\"UnlockedTokensClaimed(address,address,uint256,uint256)\":{\"notice\":\"Event emitted when tokens are claimed by a receiver from an unlocked balance\"}},\"kind\":\"user\",\"methods\":{\"activeLocks(address,uint256)\":{\"notice\":\"Mapping of address to lock id\"},\"claimAllUnlockedTokens(uint256)\":{\"notice\":\"Allows receiver to claim all of their unlocked tokens for a given lock\"},\"claimUnlockedTokens(uint256,uint256)\":{\"notice\":\"Allows receiver to claim a portion of their unlocked tokens for a given lock\"},\"extendLock(uint256,uint16)\":{\"notice\":\"Allows receiver extend lock period for a given lock\"},\"getActiveLocks(address)\":{\"notice\":\"Get token locks for receiver\"},\"getAllActiveLocks(address)\":{\"notice\":\"Get all active token locks for receiver\"},\"getLockedBalance(uint256)\":{\"notice\":\"Get locked balance for a given lock id\"},\"getLockedTokenBalance(address,address)\":{\"notice\":\"Get total locked token balance of receiver\"},\"getTokenLock(uint256)\":{\"notice\":\"Get token lock for given lock id\"},\"getUnlockedBalance(uint256)\":{\"notice\":\"Get unlocked balance for a given lock id\"},\"getUnlockedTokenBalance(address,address)\":{\"notice\":\"Get total unlocked token balance of receiver\"},\"lockTokens(address,address,address,uint256,uint256,uint16)\":{\"notice\":\"Lock tokens\"},\"lockTokensWithPermit(address,address,address,uint256,uint256,uint16,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Lock tokens\"},\"numLocks()\":{\"notice\":\"Number of locks\"},\"tokenLocks(uint256)\":{\"notice\":\"Mapping of lock id > token locks\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Vault.sol\":\"Vault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/IUniswapV2ERC20.sol\\\";\\nimport \\\"./lib/SafeMath.sol\\\";\\n\\n/**\\n * @title Vault\\n * @dev Contract for locking up tokens for set periods of time\\n * Tokens locked in this contract DO NOT count towards voting power\\n */\\ncontract Vault {\\n    using SafeMath for uint256;\\n\\n    /// @notice Lock definition\\n    struct Lock {\\n        address token;\\n        address receiver;\\n        uint256 startTime;\\n        uint256 amount;\\n        uint16 duration;\\n        uint256 amountClaimed;\\n    }\\n\\n    /// @dev Used to translate lock periods specified in days to seconds\\n    uint256 constant internal SECONDS_PER_DAY = 86400;\\n    \\n    /// @notice Mapping of lock id > token locks\\n    mapping (uint256 => Lock) public tokenLocks;\\n\\n    /// @notice Mapping of address to lock id\\n    mapping (address => uint[]) public activeLocks;\\n\\n    ///@notice Number of locks\\n    uint256 public numLocks;\\n\\n    /// @notice Event emitted when a new lock is created\\n    event LockCreated(address indexed token, address indexed locker, address indexed receiver, uint256 amount, uint256 startTime, uint16 durationInDays, uint256 lockId);\\n    \\n    /// @notice Event emitted when tokens are claimed by a receiver from an unlocked balance\\n    event UnlockedTokensClaimed(address indexed receiver, address indexed token, uint256 indexed amountClaimed, uint256 lockId);\\n\\n    /// @notice Event emitted when lock duration extended\\n    event LockExtended(uint16 indexed oldDuration, uint16 indexed newDuration, uint256 startTime, uint256 lockId);\\n    \\n    /**\\n     * @notice Lock tokens\\n     * @param locker The account that is locking tokens\\n     * @param receiver The account that will be able to retrieve unlocked tokens\\n     * @param startTime The unix timestamp when the lock period will start\\n     * @param amount The amount of tokens being locked\\n     * @param lockDurationInDays The lock period in days\\n     */\\n    function lockTokens(\\n        address token,\\n        address locker,\\n        address receiver,\\n        uint256 startTime,\\n        uint256 amount,\\n        uint16 lockDurationInDays\\n    ) \\n        external\\n    {\\n        require(lockDurationInDays > 0, \\\"Vault::lockTokens: duration must be > 0\\\");\\n        require(lockDurationInDays <= 25*365, \\\"Vault::lockTokens: duration more than 25 years\\\");\\n        require(amount > 0, \\\"Vault::lockTokens: amount not > 0\\\");\\n\\n        // Transfer the tokens under the control of the vault contract\\n        require(IUniswapV2ERC20(token).transferFrom(locker, address(this), amount), \\\"Vault::lockTokens: transfer failed\\\");\\n\\n        uint256 lockStartTime = startTime == 0 ? block.timestamp : startTime;\\n\\n        Lock memory lock = Lock({\\n            token: token,\\n            receiver: receiver,\\n            startTime: lockStartTime,\\n            amount: amount,\\n            duration: lockDurationInDays,\\n            amountClaimed: 0\\n        });\\n        tokenLocks[numLocks] = lock;\\n        activeLocks[receiver].push(numLocks);\\n        emit LockCreated(token, locker, receiver, amount, lockStartTime, lockDurationInDays, numLocks);\\n        numLocks++;\\n    }\\n\\n    /**\\n     * @notice Lock tokens\\n     * @param token Address of token to lock\\n     * @param locker The account that is locking tokens\\n     * @param receiver The account that will be able to retrieve unlocked tokens\\n     * @param startTime The unix timestamp when the lock period will start\\n     * @param amount The amount of tokens being locked\\n     * @param lockDurationInDays The lock period in days\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function lockTokensWithPermit(\\n        address token,\\n        address locker,\\n        address receiver,\\n        uint256 startTime,\\n        uint256 amount,\\n        uint16 lockDurationInDays,\\n        uint256 deadline,\\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) \\n        external\\n    {\\n        require(lockDurationInDays > 0, \\\"Vault::lockTokensWithPermit: duration must be > 0\\\");\\n        require(lockDurationInDays <= 25*365, \\\"Vault::lockTokensWithPermit: duration more than 25 years\\\");\\n        require(amount > 0, \\\"Vault::lockTokensWithPermit: amount not > 0\\\");\\n\\n        // Set approval using permit signature\\n        IUniswapV2ERC20(token).permit(locker, address(this), amount, deadline, v, r, s);\\n\\n        // Transfer the tokens under the control of the vault contract\\n        require(IUniswapV2ERC20(token).transferFrom(locker, address(this), amount), \\\"Vault::lockTokensWithPermit: transfer failed\\\");\\n\\n        uint256 lockStartTime = startTime == 0 ? block.timestamp : startTime;\\n\\n        Lock memory lock = Lock({\\n            token: token,\\n            receiver: receiver,\\n            startTime: lockStartTime,\\n            amount: amount,\\n            duration: lockDurationInDays,\\n            amountClaimed: 0\\n        });\\n        tokenLocks[numLocks] = lock;\\n        activeLocks[receiver].push(numLocks);\\n        emit LockCreated(token, locker, receiver, amount, lockStartTime, lockDurationInDays, numLocks);\\n        numLocks++;\\n    }\\n\\n    /**\\n     * @notice Get token locks for receiver\\n     * @param receiver The address that has locked balances\\n     * @return the lock ids\\n     */\\n    function getActiveLocks(address receiver) public view returns(uint256[] memory){\\n        return activeLocks[receiver];\\n    }\\n\\n    /**\\n     * @notice Get token lock for given lock id\\n     * @param lockId The ID for the locked balance\\n     * @return the lock\\n     */\\n    function getTokenLock(uint256 lockId) public view returns(Lock memory){\\n        return tokenLocks[lockId];\\n    }\\n\\n    /**\\n     * @notice Get all active token locks for receiver\\n     * @param receiver The address that has locked balances\\n     * @return receiverLocks the lock ids\\n     */\\n    function getAllActiveLocks(address receiver) public view returns(Lock[] memory receiverLocks){\\n        uint256[] memory lockIds = getActiveLocks(receiver);\\n        receiverLocks = new Lock[](lockIds.length);\\n        for (uint256 i; i < lockIds.length; i++) {\\n            receiverLocks[i] = getTokenLock(lockIds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get total locked token balance of receiver\\n     * @param token The token to check\\n     * @param receiver The address that has locked balances\\n     * @return lockedBalance the total amount of `token` locked \\n     */\\n    function getLockedTokenBalance(address token, address receiver) public view returns(uint256 lockedBalance){\\n        Lock[] memory locks = getAllActiveLocks(receiver);\\n        for (uint256 i; i < locks.length; i++) {\\n            if(locks[i].token == token){\\n                if(block.timestamp <= locks[i].startTime) {\\n                    lockedBalance = lockedBalance.add(locks[i].amount);\\n                } else {\\n                    // Check if duration was reached\\n                    uint256 elapsedTime = block.timestamp.sub(locks[i].startTime);\\n                    uint256 elapsedDays = elapsedTime.div(SECONDS_PER_DAY);\\n\\n                    if (elapsedDays < locks[i].duration) {\\n                        lockedBalance = lockedBalance.add(locks[i].amount);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n     /**\\n     * @notice Get total unlocked token balance of receiver\\n     * @param token The token to check\\n     * @param receiver The address that has unlocked balances\\n     * @return unlockedBalance the total amount of `token` unlocked \\n     */\\n    function getUnlockedTokenBalance(address token, address receiver) public view returns(uint256 unlockedBalance){\\n        Lock[] memory locks = getAllActiveLocks(receiver);\\n        for (uint256 i; i < locks.length; i++) {\\n            if(locks[i].token == token){\\n                if(block.timestamp > locks[i].startTime) {\\n                    // Check if duration was reached\\n                    uint256 elapsedTime = block.timestamp.sub(locks[i].startTime);\\n                    uint256 elapsedDays = elapsedTime.div(SECONDS_PER_DAY);\\n\\n                    if (elapsedDays >= locks[i].duration && locks[i].amountClaimed != locks[i].amount) {\\n                        unlockedBalance = unlockedBalance.add(locks[i].amount).sub(locks[i].amountClaimed);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get locked balance for a given lock id\\n     * @dev Returns 0 if duration has ended\\n     * @param lockId The lock ID\\n     * @return The amount that is locked\\n     */\\n    function getLockedBalance(uint256 lockId) public view returns (uint256) {\\n        Lock storage lock = tokenLocks[lockId];\\n\\n        if (block.timestamp <= lock.startTime) {\\n            return lock.amount;\\n        }\\n\\n        // Check duration was reached\\n        uint256 elapsedTime = block.timestamp.sub(lock.startTime);\\n        uint256 elapsedDays = elapsedTime.div(SECONDS_PER_DAY);\\n        \\n        if (elapsedDays >= lock.duration) {\\n            return 0;\\n        } else {\\n            return lock.amount;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get unlocked balance for a given lock id\\n     * @dev Returns 0 if duration has not ended\\n     * @param lockId The lock ID\\n     * @return The amount that can be claimed\\n     */\\n    function getUnlockedBalance(uint256 lockId) public view returns (uint256) {\\n        Lock storage lock = tokenLocks[lockId];\\n\\n        // For locks created with a future start date, that hasn't been reached, return 0\\n        if (block.timestamp < lock.startTime) {\\n            return 0;\\n        }\\n\\n        // Check duration was reached\\n        uint256 elapsedTime = block.timestamp.sub(lock.startTime);\\n        uint256 elapsedDays = elapsedTime.div(SECONDS_PER_DAY);\\n        \\n        if (elapsedDays < lock.duration) {\\n            return 0;\\n        } else {\\n            return lock.amount.sub(lock.amountClaimed);\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows receiver to claim all of their unlocked tokens for a given lock\\n     * @dev Errors if no tokens are unlocked\\n     * @dev It is advised receivers check they are entitled to claim via `getUnlockedBalance` before calling this\\n     * @param lockId The lock id for an unlocked token balance\\n     */\\n    function claimAllUnlockedTokens(uint256 lockId) external {\\n        uint256 unlockedAmount = getUnlockedBalance(lockId);\\n        require(unlockedAmount > 0, \\\"Vault::claimAllUnlockedTokens: unlockedAmount is 0\\\");\\n\\n        Lock storage lock = tokenLocks[lockId];\\n        lock.amountClaimed = unlockedAmount;\\n        \\n        require(msg.sender == lock.receiver, \\\"Vault::claimAllUnlockedTokens: msg.sender must be receiver\\\");\\n        require(IUniswapV2ERC20(lock.token).transfer(lock.receiver, unlockedAmount), \\\"Vault::claimAllUnlockedTokens: transfer failed\\\");\\n        emit UnlockedTokensClaimed(lock.receiver, lock.token, unlockedAmount, lockId);\\n    }\\n\\n    /**\\n     * @notice Allows receiver to claim a portion of their unlocked tokens for a given lock\\n     * @dev Errors if no tokens are unlocked\\n     * @dev It is advised receivers check they are entitled to claim via `getUnlockedBalance` before calling this\\n     * @param lockId The lock id for an unlocked token balance\\n     * @param amount The amount of unlocked tokens to claim\\n     */\\n    function claimUnlockedTokens(uint256 lockId, uint256 amount) external {\\n        uint256 unlockedAmount = getUnlockedBalance(lockId);\\n        require(unlockedAmount >= amount, \\\"Vault::claimUnlockedTokens: unlockedAmount < amount\\\");\\n\\n        Lock storage lock = tokenLocks[lockId];\\n        lock.amountClaimed = lock.amountClaimed.add(amount);\\n        \\n        require(msg.sender == lock.receiver, \\\"Vault::claimUnlockedTokens: msg.sender must be receiver\\\");\\n        require(IUniswapV2ERC20(lock.token).transfer(lock.receiver, amount), \\\"Vault::claimUnlockedTokens: transfer failed\\\");\\n        emit UnlockedTokensClaimed(lock.receiver, lock.token, amount, lockId);\\n    }\\n\\n    /**\\n     * @notice Allows receiver extend lock period for a given lock\\n     * @param lockId The lock id for a locked token balance\\n     * @param daysToAdd The number of days to add to duration\\n     */\\n    function extendLock(uint256 lockId, uint16 daysToAdd) external {\\n        Lock storage lock = tokenLocks[lockId];\\n        require(msg.sender == lock.receiver, \\\"Vault::extendLock: msg.sender must be receiver\\\");\\n        uint16 oldDuration = lock.duration;\\n        uint16 newDuration = _add16(oldDuration, daysToAdd, \\\"Vault::extendLock: max days exceeded\\\");\\n        lock.duration = newDuration;\\n        emit LockExtended(oldDuration, newDuration, lock.startTime, lockId);\\n    }\\n\\n    /**\\n     * @notice Adds uint16 to uint16 safely\\n     * @param a First number\\n     * @param b Second number\\n     * @param errorMessage Error message to use if numbers cannot be added\\n     * @return uint16 number\\n     */\\n    function _add16(uint16 a, uint16 b, string memory errorMessage) internal pure returns (uint16) {\\n        uint16 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n}\",\"keccak256\":\"0x09850731c90200035974c3a5845d6464962e9e3c3520ab47f6c196662b731d4c\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IUniswapV2ERC20 {\\n  event Approval(address indexed owner, address indexed spender, uint value);\\n  event Transfer(address indexed from, address indexed to, uint value);\\n\\n  function name() external pure returns (string memory);\\n  function symbol() external pure returns (string memory);\\n  function decimals() external pure returns (uint8);\\n  function totalSupply() external view returns (uint);\\n  function balanceOf(address owner) external view returns (uint);\\n  function allowance(address owner, address spender) external view returns (uint);\\n\\n  function approve(address spender, uint value) external returns (bool);\\n  function transfer(address to, uint value) external returns (bool);\\n  function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\n  function nonces(address owner) external view returns (uint);\\n\\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\",\"keccak256\":\"0x76789a0ea4bfd818ba7c7c963bc86b28372311268588c6a2b486efa3e005dce1\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x961855901713e710c05dd67f9a01e501a54e82e68a526fe3662e228c27f788d9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80637eaecc2611610097578063b0b5babe11610066578063b0b5babe146102d3578063b5145e6214610303578063d422cf581461031f578063e5aa64d81461033d576100f5565b80637eaecc26146102225780638d11301214610252578063946ca9491461026e57806398b04a3a146102a3576100f5565b806351807ad5116100d357806351807ad51461017657806361496d5914610192578063763d1bd6146101c25780637976ea16146101f2576100f5565b80632c4e9ebd146100fa578063334a23101461012a5780633adcbadc1461015a575b600080fd5b610114600480360381019061010f919061206d565b610359565b6040516101219190612d2c565b60405180910390f35b610144600480360381019061013f9190611e68565b6103f6565b6040516101519190612d2c565b60405180910390f35b610174600480360381019061016f919061206d565b610590565b005b610190600480360381019061018b9190611f2d565b610858565b005b6101ac60048036038101906101a79190611e3f565b610cde565b6040516101b99190612aed565b60405180910390f35b6101dc60048036038101906101d79190611e3f565b610d75565b6040516101e99190612acb565b60405180910390f35b61020c60048036038101906102079190611e68565b610e2b565b6040516102199190612d2c565b60405180910390f35b61023c6004803603810190610237919061206d565b610f91565b6040516102499190612d2c565b60405180910390f35b61026c60048036038101906102679190612096565b611043565b005b6102886004803603810190610283919061206d565b611196565b60405161029a969594939291906129d2565b60405180910390f35b6102bd60048036038101906102b89190612008565b611220565b6040516102ca9190612d2c565b60405180910390f35b6102ed60048036038101906102e8919061206d565b611251565b6040516102fa9190612d11565b60405180910390f35b61031d60048036038101906103189190611ea4565b611367565b005b610327611772565b6040516103349190612d2c565b60405180910390f35b610357600480360381019061035291906120d2565b611778565b005b6000806000808481526020019081526020016000209050806002015442116103885780600301549150506103f1565b60006103a1826002015442611a5790919063ffffffff16565b905060006103bb6201518083611aa190919063ffffffff16565b90508260040160009054906101000a900461ffff1661ffff1681106103e657600093505050506103f1565b826003015493505050505b919050565b6000606061040383610d75565b905060005b8151811015610588578473ffffffffffffffffffffffffffffffffffffffff1682828151811061043457fe5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff16141561057b5781818151811061046857fe5b60200260200101516040015142111561057a5760006104a783838151811061048c57fe5b60200260200101516040015142611a5790919063ffffffff16565b905060006104c16201518083611aa190919063ffffffff16565b90508383815181106104cf57fe5b60200260200101516080015161ffff16811015801561051c57508383815181106104f557fe5b60200260200101516060015184848151811061050d57fe5b602002602001015160a0015114155b156105775761057484848151811061053057fe5b602002602001015160a0015161056686868151811061054b57fe5b60200260200101516060015188611aeb90919063ffffffff16565b611a5790919063ffffffff16565b94505b50505b5b8080600101915050610408565b505092915050565b600061059b82610f91565b9050600081116105e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d790612c11565b60405180910390fd5b600080600084815260200190815260200160002090508181600501819055508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610691576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068890612bf1565b60405180910390fd5b8060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401610714929190612aa2565b602060405180830381600087803b15801561072e57600080fd5b505af1158015610742573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107669190612044565b6107a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079c90612b31565b60405180910390fd5b818160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f93900409fdb269cad2f66fb6f629bca922bca043b1a6aaea0f6d36aac5efa3e28660405161084b9190612d2c565b60405180910390a4505050565b60008561ffff161161089f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089690612b71565b60405180910390fd5b6123a58561ffff1611156108e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108df90612b51565b60405180910390fd5b6000861161092b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092290612cd1565b60405180910390fd5b8973ffffffffffffffffffffffffffffffffffffffff1663d505accf8a3089888888886040518863ffffffff1660e01b81526004016109709796959493929190612a33565b600060405180830381600087803b15801561098a57600080fd5b505af115801561099e573d6000803e3d6000fd5b505050508973ffffffffffffffffffffffffffffffffffffffff166323b872dd8a30896040518463ffffffff1660e01b81526004016109df9392919061299b565b602060405180830381600087803b1580156109f957600080fd5b505af1158015610a0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a319190612044565b610a70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6790612c31565b60405180910390fd5b6000808814610a7f5787610a81565b425b9050610a8b611d5b565b6040518060c001604052808d73ffffffffffffffffffffffffffffffffffffffff1681526020018b73ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018981526020018861ffff1681526020016000815250905080600080600254815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015560808201518160040160006101000a81548161ffff021916908361ffff16021790555060a08201518160050155905050600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060025490806001815401808255809150506001900390600052602060002001600090919091909150558973ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff168d73ffffffffffffffffffffffffffffffffffffffff167f30e2bc2d3d392db8b8e24983a41a4f2bb25e8c6e4eeb390289a3d3b747a937b68b868c600254604051610cb69493929190612d70565b60405180910390a4600260008154809291906001019190505550505050505050505050505050565b6060600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610d6957602002820191906000526020600020905b815481526020019060010190808311610d55575b50505050509050919050565b606080610d8183610cde565b9050805167ffffffffffffffff81118015610d9b57600080fd5b50604051908082528060200260200182016040528015610dd557816020015b610dc2611d5b565b815260200190600190039081610dba5790505b50915060005b8151811015610e2457610e00828281518110610df357fe5b6020026020010151611251565b838281518110610e0c57fe5b60200260200101819052508080600101915050610ddb565b5050919050565b60006060610e3883610d75565b905060005b8151811015610f89578473ffffffffffffffffffffffffffffffffffffffff16828281518110610e6957fe5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff161415610f7c57818181518110610e9d57fe5b6020026020010151604001514211610ee057610ed9828281518110610ebe57fe5b60200260200101516060015184611aeb90919063ffffffff16565b9250610f7b565b6000610f0c838381518110610ef157fe5b60200260200101516040015142611a5790919063ffffffff16565b90506000610f266201518083611aa190919063ffffffff16565b9050838381518110610f3457fe5b60200260200101516080015161ffff16811015610f7857610f75848481518110610f5a57fe5b60200260200101516060015186611aeb90919063ffffffff16565b94505b50505b5b8080600101915050610e3d565b505092915050565b60008060008084815260200190815260200160002090508060020154421015610fbe57600091505061103e565b6000610fd7826002015442611a5790919063ffffffff16565b90506000610ff16201518083611aa190919063ffffffff16565b90508260040160009054906101000a900461ffff1661ffff1681101561101d576000935050505061103e565b61103883600501548460030154611a5790919063ffffffff16565b93505050505b919050565b600080600084815260200190815260200160002090508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e290612cb1565b60405180910390fd5b60008160040160009054906101000a900461ffff16905060006111278285604051806060016040528060248152602001612f7f60249139611b73565b9050808360040160006101000a81548161ffff021916908361ffff1602179055508061ffff168261ffff167f44b1182afdf36e6e6a6954eae4cb656741a62da83fd42203bb0163ec69535575856002015488604051611187929190612d47565b60405180910390a35050505050565b60006020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040160009054906101000a900461ffff16908060050154905086565b6001602052816000526040600020818154811061123c57600080fd5b90600052602060002001600091509150505481565b611259611d5b565b6000808381526020019081526020016000206040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900461ffff1661ffff1661ffff1681526020016005820154815250509050919050565b60008161ffff16116113ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a590612c71565b60405180910390fd5b6123a58161ffff1611156113f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ee90612c91565b60405180910390fd5b6000821161143a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143190612bb1565b60405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff166323b872dd8630856040518463ffffffff1660e01b81526004016114779392919061299b565b602060405180830381600087803b15801561149157600080fd5b505af11580156114a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c99190612044565b611508576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ff90612c51565b60405180910390fd5b60008084146115175783611519565b425b9050611523611d5b565b6040518060c001604052808973ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018581526020018461ffff1681526020016000815250905080600080600254815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015560808201518160040160006101000a81548161ffff021916908361ffff16021790555060a08201518160050155905050600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060025490806001815401808255809150506001900390600052602060002001600090919091909150558573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167f30e2bc2d3d392db8b8e24983a41a4f2bb25e8c6e4eeb390289a3d3b747a937b687868860025460405161174e9493929190612d70565b60405180910390a46002600081548092919060010191905055505050505050505050565b60025481565b600061178383610f91565b9050818110156117c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117bf90612b91565b60405180910390fd5b600080600085815260200190815260200160002090506117f5838260050154611aeb90919063ffffffff16565b81600501819055508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461188f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188690612cf1565b60405180910390fd5b8060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518363ffffffff1660e01b8152600401611912929190612aa2565b602060405180830381600087803b15801561192c57600080fd5b505af1158015611940573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119649190612044565b6119a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161199a90612bd1565b60405180910390fd5b828160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f93900409fdb269cad2f66fb6f629bca922bca043b1a6aaea0f6d36aac5efa3e287604051611a499190612d2c565b60405180910390a450505050565b6000611a9983836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250611bd5565b905092915050565b6000611ae383836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611c95565b905092915050565b600080828401905083811015611b69576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b60008083850190508461ffff168161ffff1610158390611bc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bc09190612b0f565b60405180910390fd5b50809150509392505050565b6000838311158290611c82576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611c47578082015181840152602081019050611c2c565b50505050905090810190601f168015611c745780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b60008083118290611d41576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611d06578082015181840152602081019050611ceb565b50505050905090810190601f168015611d335780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581611d4d57fe5b049050809150509392505050565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600061ffff168152602001600081525090565b600081359050611dd081612ef4565b92915050565b600081519050611de581612f0b565b92915050565b600081359050611dfa81612f22565b92915050565b600081359050611e0f81612f39565b92915050565b600081359050611e2481612f50565b92915050565b600081359050611e3981612f67565b92915050565b600060208284031215611e5157600080fd5b6000611e5f84828501611dc1565b91505092915050565b60008060408385031215611e7b57600080fd5b6000611e8985828601611dc1565b9250506020611e9a85828601611dc1565b9150509250929050565b60008060008060008060c08789031215611ebd57600080fd5b6000611ecb89828a01611dc1565b9650506020611edc89828a01611dc1565b9550506040611eed89828a01611dc1565b9450506060611efe89828a01611e15565b9350506080611f0f89828a01611e15565b92505060a0611f2089828a01611e00565b9150509295509295509295565b6000806000806000806000806000806101408b8d031215611f4d57600080fd5b6000611f5b8d828e01611dc1565b9a50506020611f6c8d828e01611dc1565b9950506040611f7d8d828e01611dc1565b9850506060611f8e8d828e01611e15565b9750506080611f9f8d828e01611e15565b96505060a0611fb08d828e01611e00565b95505060c0611fc18d828e01611e15565b94505060e0611fd28d828e01611e2a565b935050610100611fe48d828e01611deb565b925050610120611ff68d828e01611deb565b9150509295989b9194979a5092959850565b6000806040838503121561201b57600080fd5b600061202985828601611dc1565b925050602061203a85828601611e15565b9150509250929050565b60006020828403121561205657600080fd5b600061206484828501611dd6565b91505092915050565b60006020828403121561207f57600080fd5b600061208d84828501611e15565b91505092915050565b600080604083850312156120a957600080fd5b60006120b785828601611e15565b92505060206120c885828601611e00565b9150509250929050565b600080604083850312156120e557600080fd5b60006120f385828601611e15565b925050602061210485828601611e15565b9150509250929050565b600061211a838361285a565b60c08301905092915050565b6000612132838361296e565b60208301905092915050565b61214781612e43565b82525050565b61215681612e43565b82525050565b600061216782612dd5565b6121718185612e10565b935061217c83612db5565b8060005b838110156121ad578151612194888261210e565b975061219f83612df6565b925050600181019050612180565b5085935050505092915050565b60006121c582612de0565b6121cf8185612e21565b93506121da83612dc5565b8060005b8381101561220b5781516121f28882612126565b97506121fd83612e03565b9250506001810190506121de565b5085935050505092915050565b61222181612e61565b82525050565b600061223282612deb565b61223c8185612e32565b935061224c818560208601612eb0565b61225581612ee3565b840191505092915050565b600061226d602e83612e32565b91507f5661756c743a3a636c61696d416c6c556e6c6f636b6564546f6b656e733a207460008301527f72616e73666572206661696c65640000000000000000000000000000000000006020830152604082019050919050565b60006122d3603883612e32565b91507f5661756c743a3a6c6f636b546f6b656e73576974685065726d69743a2064757260008301527f6174696f6e206d6f7265207468616e20323520796561727300000000000000006020830152604082019050919050565b6000612339603183612e32565b91507f5661756c743a3a6c6f636b546f6b656e73576974685065726d69743a2064757260008301527f6174696f6e206d757374206265203e20300000000000000000000000000000006020830152604082019050919050565b600061239f603383612e32565b91507f5661756c743a3a636c61696d556e6c6f636b6564546f6b656e733a20756e6c6f60008301527f636b6564416d6f756e74203c20616d6f756e74000000000000000000000000006020830152604082019050919050565b6000612405602183612e32565b91507f5661756c743a3a6c6f636b546f6b656e733a20616d6f756e74206e6f74203e2060008301527f30000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061246b602b83612e32565b91507f5661756c743a3a636c61696d556e6c6f636b6564546f6b656e733a207472616e60008301527f73666572206661696c65640000000000000000000000000000000000000000006020830152604082019050919050565b60006124d1603a83612e32565b91507f5661756c743a3a636c61696d416c6c556e6c6f636b6564546f6b656e733a206d60008301527f73672e73656e646572206d7573742062652072656365697665720000000000006020830152604082019050919050565b6000612537603283612e32565b91507f5661756c743a3a636c61696d416c6c556e6c6f636b6564546f6b656e733a207560008301527f6e6c6f636b6564416d6f756e74206973203000000000000000000000000000006020830152604082019050919050565b600061259d602c83612e32565b91507f5661756c743a3a6c6f636b546f6b656e73576974685065726d69743a2074726160008301527f6e73666572206661696c656400000000000000000000000000000000000000006020830152604082019050919050565b6000612603602283612e32565b91507f5661756c743a3a6c6f636b546f6b656e733a207472616e73666572206661696c60008301527f65640000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612669602783612e32565b91507f5661756c743a3a6c6f636b546f6b656e733a206475726174696f6e206d75737460008301527f206265203e2030000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006126cf602e83612e32565b91507f5661756c743a3a6c6f636b546f6b656e733a206475726174696f6e206d6f726560008301527f207468616e2032352079656172730000000000000000000000000000000000006020830152604082019050919050565b6000612735602e83612e32565b91507f5661756c743a3a657874656e644c6f636b3a206d73672e73656e646572206d7560008301527f73742062652072656365697665720000000000000000000000000000000000006020830152604082019050919050565b600061279b602b83612e32565b91507f5661756c743a3a6c6f636b546f6b656e73576974685065726d69743a20616d6f60008301527f756e74206e6f74203e20300000000000000000000000000000000000000000006020830152604082019050919050565b6000612801603783612e32565b91507f5661756c743a3a636c61696d556e6c6f636b6564546f6b656e733a206d73672e60008301527f73656e646572206d7573742062652072656365697665720000000000000000006020830152604082019050919050565b60c082016000820151612870600085018261213e565b506020820151612883602085018261213e565b506040820151612896604085018261296e565b5060608201516128a9606085018261296e565b5060808201516128bc6080850182612950565b5060a08201516128cf60a085018261296e565b50505050565b60c0820160008201516128eb600085018261213e565b5060208201516128fe602085018261213e565b506040820151612911604085018261296e565b506060820151612924606085018261296e565b5060808201516129376080850182612950565b5060a082015161294a60a085018261296e565b50505050565b61295981612e6b565b82525050565b61296881612e6b565b82525050565b61297781612e99565b82525050565b61298681612e99565b82525050565b61299581612ea3565b82525050565b60006060820190506129b0600083018661214d565b6129bd602083018561214d565b6129ca604083018461297d565b949350505050565b600060c0820190506129e7600083018961214d565b6129f4602083018861214d565b612a01604083018761297d565b612a0e606083018661297d565b612a1b608083018561295f565b612a2860a083018461297d565b979650505050505050565b600060e082019050612a48600083018a61214d565b612a55602083018961214d565b612a62604083018861297d565b612a6f606083018761297d565b612a7c608083018661298c565b612a8960a0830185612218565b612a9660c0830184612218565b98975050505050505050565b6000604082019050612ab7600083018561214d565b612ac4602083018461297d565b9392505050565b60006020820190508181036000830152612ae5818461215c565b905092915050565b60006020820190508181036000830152612b0781846121ba565b905092915050565b60006020820190508181036000830152612b298184612227565b905092915050565b60006020820190508181036000830152612b4a81612260565b9050919050565b60006020820190508181036000830152612b6a816122c6565b9050919050565b60006020820190508181036000830152612b8a8161232c565b9050919050565b60006020820190508181036000830152612baa81612392565b9050919050565b60006020820190508181036000830152612bca816123f8565b9050919050565b60006020820190508181036000830152612bea8161245e565b9050919050565b60006020820190508181036000830152612c0a816124c4565b9050919050565b60006020820190508181036000830152612c2a8161252a565b9050919050565b60006020820190508181036000830152612c4a81612590565b9050919050565b60006020820190508181036000830152612c6a816125f6565b9050919050565b60006020820190508181036000830152612c8a8161265c565b9050919050565b60006020820190508181036000830152612caa816126c2565b9050919050565b60006020820190508181036000830152612cca81612728565b9050919050565b60006020820190508181036000830152612cea8161278e565b9050919050565b60006020820190508181036000830152612d0a816127f4565b9050919050565b600060c082019050612d2660008301846128d5565b92915050565b6000602082019050612d41600083018461297d565b92915050565b6000604082019050612d5c600083018561297d565b612d69602083018461297d565b9392505050565b6000608082019050612d85600083018761297d565b612d92602083018661297d565b612d9f604083018561295f565b612dac606083018461297d565b95945050505050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000612e4e82612e79565b9050919050565b60008115159050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015612ece578082015181840152602081019050612eb3565b83811115612edd576000848401525b50505050565b6000601f19601f8301169050919050565b612efd81612e43565b8114612f0857600080fd5b50565b612f1481612e55565b8114612f1f57600080fd5b50565b612f2b81612e61565b8114612f3657600080fd5b50565b612f4281612e6b565b8114612f4d57600080fd5b50565b612f5981612e99565b8114612f6457600080fd5b50565b612f7081612ea3565b8114612f7b57600080fd5b5056fe5661756c743a3a657874656e644c6f636b3a206d61782064617973206578636565646564a2646970667358221220c1c1bebea950624a055d98977ec957aa70f4be679c1856b6c933aca69edf374d64736f6c63430007040033",
  "devdoc": {
    "details": "Contract for locking up tokens for set periods of time Tokens locked in this contract DO NOT count towards voting power",
    "kind": "dev",
    "methods": {
      "claimAllUnlockedTokens(uint256)": {
        "details": "Errors if no tokens are unlockedIt is advised receivers check they are entitled to claim via `getUnlockedBalance` before calling this",
        "params": {
          "lockId": "The lock id for an unlocked token balance"
        }
      },
      "claimUnlockedTokens(uint256,uint256)": {
        "details": "Errors if no tokens are unlockedIt is advised receivers check they are entitled to claim via `getUnlockedBalance` before calling this",
        "params": {
          "amount": "The amount of unlocked tokens to claim",
          "lockId": "The lock id for an unlocked token balance"
        }
      },
      "extendLock(uint256,uint16)": {
        "params": {
          "daysToAdd": "The number of days to add to duration",
          "lockId": "The lock id for a locked token balance"
        }
      },
      "getActiveLocks(address)": {
        "params": {
          "receiver": "The address that has locked balances"
        },
        "returns": {
          "_0": "the lock ids"
        }
      },
      "getAllActiveLocks(address)": {
        "params": {
          "receiver": "The address that has locked balances"
        },
        "returns": {
          "receiverLocks": "the lock ids"
        }
      },
      "getLockedBalance(uint256)": {
        "details": "Returns 0 if duration has ended",
        "params": {
          "lockId": "The lock ID"
        },
        "returns": {
          "_0": "The amount that is locked"
        }
      },
      "getLockedTokenBalance(address,address)": {
        "params": {
          "receiver": "The address that has locked balances",
          "token": "The token to check"
        },
        "returns": {
          "lockedBalance": "the total amount of `token` locked "
        }
      },
      "getTokenLock(uint256)": {
        "params": {
          "lockId": "The ID for the locked balance"
        },
        "returns": {
          "_0": "the lock"
        }
      },
      "getUnlockedBalance(uint256)": {
        "details": "Returns 0 if duration has not ended",
        "params": {
          "lockId": "The lock ID"
        },
        "returns": {
          "_0": "The amount that can be claimed"
        }
      },
      "getUnlockedTokenBalance(address,address)": {
        "params": {
          "receiver": "The address that has unlocked balances",
          "token": "The token to check"
        },
        "returns": {
          "unlockedBalance": "the total amount of `token` unlocked "
        }
      },
      "lockTokens(address,address,address,uint256,uint256,uint16)": {
        "params": {
          "amount": "The amount of tokens being locked",
          "lockDurationInDays": "The lock period in days",
          "locker": "The account that is locking tokens",
          "receiver": "The account that will be able to retrieve unlocked tokens",
          "startTime": "The unix timestamp when the lock period will start"
        }
      },
      "lockTokensWithPermit(address,address,address,uint256,uint256,uint16,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "amount": "The amount of tokens being locked",
          "deadline": "The time at which to expire the signature",
          "lockDurationInDays": "The lock period in days",
          "locker": "The account that is locking tokens",
          "r": "Half of the ECDSA signature pair",
          "receiver": "The account that will be able to retrieve unlocked tokens",
          "s": "Half of the ECDSA signature pair",
          "startTime": "The unix timestamp when the lock period will start",
          "token": "Address of token to lock",
          "v": "The recovery byte of the signature"
        }
      }
    },
    "stateVariables": {
      "SECONDS_PER_DAY": {
        "details": "Used to translate lock periods specified in days to seconds"
      }
    },
    "title": "Vault",
    "version": 1
  },
  "userdoc": {
    "events": {
      "LockCreated(address,address,address,uint256,uint256,uint16,uint256)": {
        "notice": "Event emitted when a new lock is created"
      },
      "LockExtended(uint16,uint16,uint256,uint256)": {
        "notice": "Event emitted when lock duration extended"
      },
      "UnlockedTokensClaimed(address,address,uint256,uint256)": {
        "notice": "Event emitted when tokens are claimed by a receiver from an unlocked balance"
      }
    },
    "kind": "user",
    "methods": {
      "activeLocks(address,uint256)": {
        "notice": "Mapping of address to lock id"
      },
      "claimAllUnlockedTokens(uint256)": {
        "notice": "Allows receiver to claim all of their unlocked tokens for a given lock"
      },
      "claimUnlockedTokens(uint256,uint256)": {
        "notice": "Allows receiver to claim a portion of their unlocked tokens for a given lock"
      },
      "extendLock(uint256,uint16)": {
        "notice": "Allows receiver extend lock period for a given lock"
      },
      "getActiveLocks(address)": {
        "notice": "Get token locks for receiver"
      },
      "getAllActiveLocks(address)": {
        "notice": "Get all active token locks for receiver"
      },
      "getLockedBalance(uint256)": {
        "notice": "Get locked balance for a given lock id"
      },
      "getLockedTokenBalance(address,address)": {
        "notice": "Get total locked token balance of receiver"
      },
      "getTokenLock(uint256)": {
        "notice": "Get token lock for given lock id"
      },
      "getUnlockedBalance(uint256)": {
        "notice": "Get unlocked balance for a given lock id"
      },
      "getUnlockedTokenBalance(address,address)": {
        "notice": "Get total unlocked token balance of receiver"
      },
      "lockTokens(address,address,address,uint256,uint256,uint16)": {
        "notice": "Lock tokens"
      },
      "lockTokensWithPermit(address,address,address,uint256,uint256,uint16,uint256,uint8,bytes32,bytes32)": {
        "notice": "Lock tokens"
      },
      "numLocks()": {
        "notice": "Number of locks"
      },
      "tokenLocks(uint256)": {
        "notice": "Mapping of lock id > token locks"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 30,
        "contract": "contracts/Vault.sol:Vault",
        "label": "tokenLocks",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Lock)21_storage)"
      },
      {
        "astId": 36,
        "contract": "contracts/Vault.sol:Vault",
        "label": "activeLocks",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 39,
        "contract": "contracts/Vault.sol:Vault",
        "label": "numLocks",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Lock)21_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Vault.Lock)",
        "numberOfBytes": "32",
        "value": "t_struct(Lock)21_storage"
      },
      "t_struct(Lock)21_storage": {
        "encoding": "inplace",
        "label": "struct Vault.Lock",
        "members": [
          {
            "astId": 10,
            "contract": "contracts/Vault.sol:Vault",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12,
            "contract": "contracts/Vault.sol:Vault",
            "label": "receiver",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 14,
            "contract": "contracts/Vault.sol:Vault",
            "label": "startTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 16,
            "contract": "contracts/Vault.sol:Vault",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 18,
            "contract": "contracts/Vault.sol:Vault",
            "label": "duration",
            "offset": 0,
            "slot": "4",
            "type": "t_uint16"
          },
          {
            "astId": 20,
            "contract": "contracts/Vault.sol:Vault",
            "label": "amountClaimed",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}