{
  "address": "0x16c2832eaB29577221653c804Ccb8cc2AD39d9a8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        }
      ],
      "name": "ChangedOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldContract",
          "type": "address"
        }
      ],
      "name": "ChangedVotingPower",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "vestingDurationInDays",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "vestingCliffInDays",
          "type": "uint16"
        }
      ],
      "name": "GrantAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountVested",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountNotVested",
          "type": "uint256"
        }
      ],
      "name": "GrantRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountClaimed",
          "type": "uint256"
        }
      ],
      "name": "GrantTokensClaimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "vestingDurationInDays",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "vestingCliffInDays",
          "type": "uint16"
        }
      ],
      "name": "addTokenGrant",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "calculateGrantClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "changeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "claimVestedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "claimedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "getTokenGrant",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "vestingDuration",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "vestingCliff",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "totalClaimed",
              "type": "uint256"
            }
          ],
          "internalType": "struct Vesting.Grant",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newContract",
          "type": "address"
        }
      ],
      "name": "setVotingPowerContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IArchToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenGrants",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "vestingDuration",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "vestingCliff",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "totalClaimed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "tokensVestedPerDay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "vestedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingPower",
      "outputs": [
        {
          "internalType": "contract IVotingPower",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x937831c0683935dcb06fad2d9c13f9289a7a042ff0983e476ed38dcd0c708c6f",
  "receipt": {
    "to": null,
    "from": "0xa52422BB8c29E4d55243d310fB6BAe793162452e",
    "contractAddress": "0x16c2832eaB29577221653c804Ccb8cc2AD39d9a8",
    "transactionIndex": 20,
    "gasUsed": "2121294",
    "logsBloom": "0x
    "blockHash": "0x13093fc8199e47593410806c48bb53598688c37039784672e3b1d729c0042b63",
    "transactionHash": "0x937831c0683935dcb06fad2d9c13f9289a7a042ff0983e476ed38dcd0c708c6f",
    "logs": [],
    "blockNumber": 7460184,
    "cumulativeGasUsed": "8654437",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7e62A600e789000862b29BedB80D796c9E08D691"
  ],
  "solcInputHash": "717d290eaa30525657880968a67e5e00",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"}],\"name\":\"ChangedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldContract\",\"type\":\"address\"}],\"name\":\"ChangedVotingPower\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"vestingCliffInDays\",\"type\":\"uint16\"}],\"name\":\"GrantAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountVested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountNotVested\",\"type\":\"uint256\"}],\"name\":\"GrantRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"name\":\"GrantTokensClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"vestingCliffInDays\",\"type\":\"uint16\"}],\"name\":\"addTokenGrant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"calculateGrantClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claimVestedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claimedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"getTokenGrant\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"vestingDuration\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"vestingCliff\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"}],\"internalType\":\"struct Vesting.Grant\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"setVotingPowerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IArchToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenGrants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"vestingDuration\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"vestingCliff\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"tokensVestedPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"vestedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingPower\",\"outputs\":[{\"internalType\":\"contract IVotingPower\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addTokenGrant(address,uint256,uint256,uint16,uint16)\":{\"params\":{\"amount\":\"The amount of tokens being granted\",\"recipient\":\"The address that is receicing the grant\",\"startTime\":\"The unix timestamp when the grant will start\",\"vestingCliffInDays\":\"The vesting cliff duration in days\",\"vestingDurationInDays\":\"The vesting period in days\"}},\"calculateGrantClaim(address)\":{\"details\":\"Due to rounding errors once grant duration is reached, returns the entire left grant amountReturns 0 if cliff has not been reached\",\"params\":{\"recipient\":\"The address that has a grant\"},\"returns\":{\"_0\":\"The amount recipient can claim\"}},\"changeOwner(address)\":{\"params\":{\"newOwner\":\"New owner address\"}},\"claimVestedTokens(address)\":{\"details\":\"Errors if no tokens have vestedIt is advised recipients check they are entitled to claim via `calculateGrantClaim` before calling this\",\"params\":{\"recipient\":\"The address that has a grant\"}},\"claimedBalance(address)\":{\"params\":{\"recipient\":\"The address that has a grant\"},\"returns\":{\"_0\":\"the number of claimed tokens by `recipient`\"}},\"getTokenGrant(address)\":{\"params\":{\"recipient\":\"The address that has a grant\"},\"returns\":{\"_0\":\"the grant\"}},\"setVotingPowerContract(address)\":{\"params\":{\"newContract\":\"New voting power contract address\"}},\"tokensVestedPerDay(address)\":{\"params\":{\"recipient\":\"The address that has a grant\"},\"returns\":{\"_0\":\"Number of tokens that will vest per day\"}},\"vestedBalance(address)\":{\"details\":\"Returns 0 if cliff has not been reached\",\"params\":{\"recipient\":\"The address that has a grant\"},\"returns\":{\"_0\":\"Total vested balance (claimed + unclaimed)\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addTokenGrant(address,uint256,uint256,uint16,uint16)\":{\"notice\":\"Add a new token grant\"},\"calculateGrantClaim(address)\":{\"notice\":\"Calculate the vested and unclaimed tokens available for `recipient` to claim\"},\"changeOwner(address)\":{\"notice\":\"Change owner of vesting contract\"},\"claimVestedTokens(address)\":{\"notice\":\"Allows a grant recipient to claim their vested tokens\"},\"claimedBalance(address)\":{\"notice\":\"The balance claimed by `recipient`\"},\"getTokenGrant(address)\":{\"notice\":\"Get token grant for recipient\"},\"setVotingPowerContract(address)\":{\"notice\":\"Set voting power contract address\"},\"tokensVestedPerDay(address)\":{\"notice\":\"Calculate the number of tokens that will vest per day for the given recipient\"},\"vestedBalance(address)\":{\"notice\":\"Calculate the vested (claimed + unclaimed) tokens for `recipient`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Vesting.sol\":\"Vesting\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Vesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./interfaces/IArchToken.sol\\\";\\nimport \\\"./interfaces/IVotingPower.sol\\\";\\n\\ncontract Vesting {\\n    using SafeMath for uint256;\\n\\n    uint256 constant internal SECONDS_PER_DAY = 86400;\\n\\n    struct Grant {\\n        uint256 startTime;\\n        uint256 amount;\\n        uint16 vestingDuration;\\n        uint16 vestingCliff;\\n        uint256 totalClaimed;\\n    }\\n\\n    event GrantAdded(address indexed recipient, uint256 amount, uint256 startTime, uint16 vestingDurationInDays, uint16 vestingCliffInDays);\\n    event GrantTokensClaimed(address indexed recipient, uint256 amountClaimed);\\n    event GrantRemoved(address recipient, uint256 amountVested, uint256 amountNotVested);\\n    event ChangedOwner(address indexed newOwner, address oldOwner);\\n    event ChangedVotingPower(address indexed newContract, address oldContract);\\n\\n    IArchToken public token;\\n    IVotingPower public votingPower;\\n    \\n    mapping (address => Grant) public tokenGrants;\\n    address public owner;\\n\\n    constructor(address _token) {\\n        require(_token != address(0), \\\"Vest::constructor: must be valid token address\\\");\\n        token = IArchToken(_token);\\n        owner = msg.sender;\\n    }\\n    \\n    /**\\n     * @notice Add a new token grant\\n     * @param recipient The address that is receicing the grant\\n     * @param startTime The unix timestamp when the grant will start\\n     * @param amount The amount of tokens being granted\\n     * @param vestingDurationInDays The vesting period in days\\n     * @param vestingCliffInDays The vesting cliff duration in days\\n     */\\n    function addTokenGrant(\\n        address recipient,\\n        uint256 startTime,\\n        uint256 amount,\\n        uint16 vestingDurationInDays,\\n        uint16 vestingCliffInDays\\n    ) \\n        external\\n    {\\n        require(msg.sender == owner, \\\"Vest::addTokenGrant: not owner\\\");\\n        require(address(votingPower) != address(0), \\\"Vest::addTokenGrant: Set Voting Power contract first\\\");\\n        require(vestingCliffInDays <= 10*365, \\\"Vest::addTokenGrant: cliff more than 10 years\\\");\\n        require(vestingDurationInDays > 0, \\\"Vest::addTokenGrant: duration must be > 0\\\");\\n        require(vestingDurationInDays <= 25*365, \\\"Vest::addTokenGrant: duration more than 25 years\\\");\\n        require(vestingDurationInDays >= vestingCliffInDays, \\\"Vest::addTokenGrant: Duration < Cliff\\\");\\n        require(tokenGrants[recipient].amount == 0, \\\"Vest::addTokenGrant: grant already exists for account\\\");\\n        \\n        uint256 amountVestedPerDay = amount.div(vestingDurationInDays);\\n        require(amountVestedPerDay > 0, \\\"Vest::addTokenGrant: amountVestedPerDay > 0\\\");\\n\\n        // Transfer the grant tokens under the control of the vesting contract\\n        require(token.transferFrom(owner, address(this), amount), \\\"Vest::addTokenGrant: transfer failed\\\");\\n\\n        uint256 grantStartTime = startTime == 0 ? block.timestamp : startTime;\\n\\n        Grant memory grant = Grant({\\n            startTime: grantStartTime,\\n            amount: amount,\\n            vestingDuration: vestingDurationInDays,\\n            vestingCliff: vestingCliffInDays,\\n            totalClaimed: 0\\n        });\\n        tokenGrants[recipient] = grant;\\n        emit GrantAdded(recipient, amount, grantStartTime, vestingDurationInDays, vestingCliffInDays);\\n        votingPower.addVotingPowerForVestingTokens(recipient, amount);\\n    }\\n\\n    /**\\n     * @notice Get token grant for recipient\\n     * @param recipient The address that has a grant\\n     * @return the grant\\n     */\\n    function getTokenGrant(address recipient) public view returns(Grant memory){\\n        return tokenGrants[recipient];\\n    }\\n\\n    /**\\n     * @notice Calculate the vested and unclaimed tokens available for `recipient` to claim\\n     * @dev Due to rounding errors once grant duration is reached, returns the entire left grant amount\\n     * @dev Returns 0 if cliff has not been reached\\n     * @param recipient The address that has a grant\\n     * @return The amount recipient can claim\\n     */\\n    function calculateGrantClaim(address recipient) public view returns (uint256) {\\n        Grant storage tokenGrant = tokenGrants[recipient];\\n\\n        // For grants created with a future start date, that hasn't been reached, return 0, 0\\n        if (block.timestamp < tokenGrant.startTime) {\\n            return 0;\\n        }\\n\\n        // Check cliff was reached\\n        uint256 elapsedTime = block.timestamp.sub(tokenGrant.startTime);\\n        uint256 elapsedDays = elapsedTime.div(SECONDS_PER_DAY);\\n        \\n        if (elapsedDays < tokenGrant.vestingCliff) {\\n            return 0;\\n        }\\n\\n        // If over vesting duration, all tokens vested\\n        if (elapsedDays >= tokenGrant.vestingDuration) {\\n            uint256 remainingGrant = tokenGrant.amount.sub(tokenGrant.totalClaimed);\\n            return remainingGrant;\\n        } else {\\n            uint256 vestingDurationInSecs = uint256(tokenGrant.vestingDuration).mul(SECONDS_PER_DAY);\\n            uint256 vestingAmountPerSec = tokenGrant.amount.div(vestingDurationInSecs);\\n            uint256 amountVested = vestingAmountPerSec.mul(elapsedTime);\\n            uint256 claimableAmount = amountVested.sub(tokenGrant.totalClaimed);\\n            return claimableAmount;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate the vested (claimed + unclaimed) tokens for `recipient`\\n     * @dev Returns 0 if cliff has not been reached\\n     * @param recipient The address that has a grant\\n     * @return Total vested balance (claimed + unclaimed)\\n     */\\n    function vestedBalance(address recipient) external view returns (uint256) {\\n        Grant storage tokenGrant = tokenGrants[recipient];\\n\\n        // For grants created with a future start date, that hasn't been reached, return 0, 0\\n        if (block.timestamp < tokenGrant.startTime) {\\n            return 0;\\n        }\\n\\n        // Check cliff was reached\\n        uint256 elapsedTime = block.timestamp.sub(tokenGrant.startTime);\\n        uint256 elapsedDays = elapsedTime.div(SECONDS_PER_DAY);\\n        \\n        if (elapsedDays < tokenGrant.vestingCliff) {\\n            return 0;\\n        }\\n\\n        // If over vesting duration, all tokens vested\\n        if (elapsedDays >= tokenGrant.vestingDuration) {\\n            return tokenGrant.amount;\\n        } else {\\n            uint256 vestingDurationInSecs = uint256(tokenGrant.vestingDuration).mul(SECONDS_PER_DAY);\\n            uint256 vestingAmountPerSec = tokenGrant.amount.div(vestingDurationInSecs);\\n            uint256 amountVested = vestingAmountPerSec.mul(elapsedTime);\\n            return amountVested;\\n        }\\n    }\\n\\n    /**\\n     * @notice The balance claimed by `recipient`\\n     * @param recipient The address that has a grant\\n     * @return the number of claimed tokens by `recipient`\\n     */\\n    function claimedBalance(address recipient) external view returns (uint256) {\\n        Grant storage tokenGrant = tokenGrants[recipient];\\n        return tokenGrant.totalClaimed;\\n    }\\n\\n    /**\\n     * @notice Allows a grant recipient to claim their vested tokens\\n     * @dev Errors if no tokens have vested\\n     * @dev It is advised recipients check they are entitled to claim via `calculateGrantClaim` before calling this\\n     * @param recipient The address that has a grant\\n     */\\n    function claimVestedTokens(address recipient) external {\\n        uint256 amountVested = calculateGrantClaim(recipient);\\n        require(amountVested > 0, \\\"Vest::claimVested: amountVested is 0\\\");\\n        votingPower.removeVotingPowerForClaimedTokens(recipient, amountVested);\\n\\n        Grant storage tokenGrant = tokenGrants[recipient];\\n        tokenGrant.totalClaimed = uint256(tokenGrant.totalClaimed.add(amountVested));\\n        \\n        require(token.transfer(recipient, amountVested), \\\"Vest::claimVested: no tokens\\\");\\n        emit GrantTokensClaimed(recipient, amountVested);\\n    }\\n\\n    /**\\n     * @notice Calculate the number of tokens that will vest per day for the given recipient\\n     * @param recipient The address that has a grant\\n     * @return Number of tokens that will vest per day\\n     */\\n    function tokensVestedPerDay(address recipient) public view returns(uint256) {\\n        Grant storage tokenGrant = tokenGrants[recipient];\\n        return tokenGrant.amount.div(uint256(tokenGrant.vestingDuration));\\n    }\\n\\n    /**\\n     * @notice Set voting power contract address\\n     * @param newContract New voting power contract address\\n     */\\n    function setVotingPowerContract(address newContract) \\n        external \\n    {\\n        require(msg.sender == owner, \\\"Vest::setVotingPowerContract: not owner\\\");\\n        require(newContract != address(0) && newContract != address(this) && newContract != address(token), \\\"Vest::setVotingPowerContract: not valid contract address\\\");\\n        address oldContract = address(votingPower);\\n        votingPower = IVotingPower(newContract);\\n        emit ChangedVotingPower(newContract, oldContract);\\n    }\\n\\n    /**\\n     * @notice Change owner of vesting contract\\n     * @param newOwner New owner address\\n     */\\n    function changeOwner(address newOwner) \\n        external\\n    {\\n        require(msg.sender == owner, \\\"Vest::changeOwner: not owner\\\");\\n        require(newOwner != address(0) && newOwner != address(this) && newOwner != address(token), \\\"Vest::changeOwner: not valid address\\\");\\n\\n        address oldOwner = owner;\\n        owner = newOwner;\\n        emit ChangedOwner(newOwner, oldOwner);\\n    }\\n}\",\"keccak256\":\"0xc0a836298c8aec776b0a48520f78739e74079b0e0c4955cce65ff56d4d4c6917\",\"license\":\"MIT\"},\"contracts/interfaces/IArchToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IArchToken {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function mint(address dst, uint256 amount) external returns (bool);\\n    function burn(address src, uint256 amount) external returns (bool);\\n    function updateTokenMetadata(string memory tokenName, string memory tokenSymbol) external returns (bool);\\n    function supplyManager() external view returns (address);\\n    function metadataManager() external view returns (address);\\n    function supplyChangeAllowedAfter() external view returns (uint256);\\n    function supplyChangeWaitingPeriod() external view returns (uint32);\\n    function supplyChangeWaitingPeriodMinimum() external view returns (uint32);\\n    function mintCap() external view returns (uint16);\\n    function setSupplyManager(address newSupplyManager) external returns (bool);\\n    function setMetadataManager(address newMetadataManager) external returns (bool);\\n    function setSupplyChangeWaitingPeriod(uint32 period) external returns (bool);\\n    function setMintCap(uint16 newCap) external returns (bool);\\n}\",\"keccak256\":\"0x9c9856667f49f85a749bb73c5226271dc4b00a8213a84f9f1b5a02ae99adb59e\",\"license\":\"MIT\"},\"contracts/interfaces/IVotingPower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IVotingPower {\\n    function stake(uint256 amount) external;\\n    function stakeWithPermit(uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function withdraw(uint256 amount) external;\\n    function addVotingPowerForVestingTokens(address account, uint256 amount) external;\\n    function removeVotingPowerForClaimedTokens(address account, uint256 amount) external;\\n}\",\"keccak256\":\"0x6ffc7ed07ddcfde55125adc672ea2ea5e2c7b901987e5bcb611650e484bf865b\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x961855901713e710c05dd67f9a01e501a54e82e68a526fe3662e228c27f788d9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addTokenGrant(address,uint256,uint256,uint16,uint16)": {
        "params": {
          "amount": "The amount of tokens being granted",
          "recipient": "The address that is receicing the grant",
          "startTime": "The unix timestamp when the grant will start",
          "vestingCliffInDays": "The vesting cliff duration in days",
          "vestingDurationInDays": "The vesting period in days"
        }
      },
      "calculateGrantClaim(address)": {
        "details": "Due to rounding errors once grant duration is reached, returns the entire left grant amountReturns 0 if cliff has not been reached",
        "params": {
          "recipient": "The address that has a grant"
        },
        "returns": {
          "_0": "The amount recipient can claim"
        }
      },
      "changeOwner(address)": {
        "params": {
          "newOwner": "New owner address"
        }
      },
      "claimVestedTokens(address)": {
        "details": "Errors if no tokens have vestedIt is advised recipients check they are entitled to claim via `calculateGrantClaim` before calling this",
        "params": {
          "recipient": "The address that has a grant"
        }
      },
      "claimedBalance(address)": {
        "params": {
          "recipient": "The address that has a grant"
        },
        "returns": {
          "_0": "the number of claimed tokens by `recipient`"
        }
      },
      "getTokenGrant(address)": {
        "params": {
          "recipient": "The address that has a grant"
        },
        "returns": {
          "_0": "the grant"
        }
      },
      "setVotingPowerContract(address)": {
        "params": {
          "newContract": "New voting power contract address"
        }
      },
      "tokensVestedPerDay(address)": {
        "params": {
          "recipient": "The address that has a grant"
        },
        "returns": {
          "_0": "Number of tokens that will vest per day"
        }
      },
      "vestedBalance(address)": {
        "details": "Returns 0 if cliff has not been reached",
        "params": {
          "recipient": "The address that has a grant"
        },
        "returns": {
          "_0": "Total vested balance (claimed + unclaimed)"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addTokenGrant(address,uint256,uint256,uint16,uint16)": {
        "notice": "Add a new token grant"
      },
      "calculateGrantClaim(address)": {
        "notice": "Calculate the vested and unclaimed tokens available for `recipient` to claim"
      },
      "changeOwner(address)": {
        "notice": "Change owner of vesting contract"
      },
      "claimVestedTokens(address)": {
        "notice": "Allows a grant recipient to claim their vested tokens"
      },
      "claimedBalance(address)": {
        "notice": "The balance claimed by `recipient`"
      },
      "getTokenGrant(address)": {
        "notice": "Get token grant for recipient"
      },
      "setVotingPowerContract(address)": {
        "notice": "Set voting power contract address"
      },
      "tokensVestedPerDay(address)": {
        "notice": "Calculate the number of tokens that will vest per day for the given recipient"
      },
      "vestedBalance(address)": {
        "notice": "Calculate the vested (claimed + unclaimed) tokens for `recipient`"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1124,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "token",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IArchToken)3214"
      },
      {
        "astId": 1126,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "votingPower",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IVotingPower)3348"
      },
      {
        "astId": 1130,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "tokenGrants",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Grant)1084_storage)"
      },
      {
        "astId": 1132,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IArchToken)3214": {
        "encoding": "inplace",
        "label": "contract IArchToken",
        "numberOfBytes": "20"
      },
      "t_contract(IVotingPower)3348": {
        "encoding": "inplace",
        "label": "contract IVotingPower",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Grant)1084_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vesting.Grant)",
        "numberOfBytes": "32",
        "value": "t_struct(Grant)1084_storage"
      },
      "t_struct(Grant)1084_storage": {
        "encoding": "inplace",
        "label": "struct Vesting.Grant",
        "members": [
          {
            "astId": 1075,
            "contract": "contracts/Vesting.sol:Vesting",
            "label": "startTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1077,
            "contract": "contracts/Vesting.sol:Vesting",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1079,
            "contract": "contracts/Vesting.sol:Vesting",
            "label": "vestingDuration",
            "offset": 0,
            "slot": "2",
            "type": "t_uint16"
          },
          {
            "astId": 1081,
            "contract": "contracts/Vesting.sol:Vesting",
            "label": "vestingCliff",
            "offset": 2,
            "slot": "2",
            "type": "t_uint16"
          },
          {
            "astId": 1083,
            "contract": "contracts/Vesting.sol:Vesting",
            "label": "totalClaimed",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}