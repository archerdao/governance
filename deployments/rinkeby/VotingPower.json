{
  "address": "0x5dA858f318Dff0763Bf18Ae31DCEc03466867e9C",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "VotingPowerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addVotingPowerForVestingTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract VotingPowerPrism",
          "name": "prism",
          "type": "address"
        }
      ],
      "name": "become",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getCurrentVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPriorVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_archToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vestingContract",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "removeVotingPowerForClaimedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "stakeWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalARCHStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakedToken",
          "type": "address"
        }
      ],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0e0c58bf29427fc0169bc283ae4dba51c37026d2a7965bfc7fcdb7746a0e7f1e",
  "receipt": {
    "to": null,
    "from": "0xa52422BB8c29E4d55243d310fB6BAe793162452e",
    "contractAddress": "0x5dA858f318Dff0763Bf18Ae31DCEc03466867e9C",
    "transactionIndex": 43,
    "gasUsed": "2598214",
    "logsBloom": "0x
    "blockHash": "0x77ff77ee4780468564747162f3ee3472b0810cf99524c99b5ec04522ff99fe1c",
    "transactionHash": "0x0e0c58bf29427fc0169bc283ae4dba51c37026d2a7965bfc7fcdb7746a0e7f1e",
    "logs": [],
    "blockNumber": 7449233,
    "cumulativeGasUsed": "5467793",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "3d50da70de0d5b1d87466f94d547b75f",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"VotingPowerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addVotingPowerForVestingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract VotingPowerPrism\",\"name\":\"prism\",\"type\":\"address\"}],\"name\":\"become\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_archToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vestingContract\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeVotingPowerForClaimedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"stakeWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalARCHStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"}],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addVotingPowerForVestingTokens(address,uint256)\":{\"params\":{\"account\":\"The recipient of voting power\",\"amount\":\"The amount of voting power to add\"}},\"getCurrentVotes(address)\":{\"params\":{\"account\":\"The address to get votes balance\"},\"returns\":{\"_0\":\"The number of current votes for `account`\"}},\"getPriorVotes(address,uint256)\":{\"details\":\"Block number must be a finalized block or else this function will revert to prevent misinformation.\",\"params\":{\"account\":\"The address of the account to check\",\"blockNumber\":\"The block number to get the vote balance at\"},\"returns\":{\"_0\":\"The number of votes the account had as of the given block\"}},\"removeVotingPowerForClaimedTokens(address,uint256)\":{\"params\":{\"account\":\"The account with voting power\",\"amount\":\"The amount of voting power to remove\"}},\"stake(uint256)\":{\"params\":{\"amount\":\"The amount to stake\"}},\"stakeWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"amount\":\"The amount to stake\",\"deadline\":\"The time at which to expire the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"totalStaked(address)\":{\"params\":{\"stakedToken\":\"The staked token\"}},\"withdraw(uint256)\":{\"params\":{\"amount\":\"The amount to withdraw\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Staked(address,address,uint256)\":{\"notice\":\"An event that's emitted when a user's staked balance increases\"},\"VotingPowerChanged(address,uint256,uint256)\":{\"notice\":\"An event that's emitted when an account's vote balance changes\"},\"Withdrawn(address,address,uint256)\":{\"notice\":\"An event that's emitted when a user's staked balance decreases\"}},\"kind\":\"user\",\"methods\":{\"addVotingPowerForVestingTokens(address,uint256)\":{\"notice\":\"Count vesting ARCH tokens toward voting power for `account`\"},\"getCurrentVotes(address)\":{\"notice\":\"Gets the current votes balance for `account`\"},\"getPriorVotes(address,uint256)\":{\"notice\":\"Determine the prior number of votes for an account as of a block number\"},\"removeVotingPowerForClaimedTokens(address,uint256)\":{\"notice\":\"Remove claimed vesting ARCH tokens from voting power for `account`\"},\"stake(uint256)\":{\"notice\":\"Stake ARCH tokens to unlock voting power for `msg.sender`\"},\"stakeWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Stake ARCH tokens using offchain approvals to unlock voting power\"},\"totalARCHStaked()\":{\"notice\":\"Get total amount of ARCH tokens staked in contract\"},\"totalStaked(address)\":{\"notice\":\"Get total amount of tokens staked in contract\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw staked ARCH tokens, removing voting power for `msg.sender`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VotingPower.sol\":\"VotingPower\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/VotingPower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./lib/Initializable.sol\\\";\\nimport \\\"./lib/ReentrancyGuardUpgradeSafe.sol\\\";\\nimport \\\"./lib/VotingPowerStorage.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./VotingPowerPrism.sol\\\";\\n\\n\\ncontract VotingPower is Initializable, ReentrancyGuardUpgradeSafe {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice An event that's emitted when a user's staked balance increases\\n    event Staked(address indexed user, address token, uint256 amount);\\n\\n    /// @notice An event that's emitted when a user's staked balance decreases\\n    event Withdrawn(address indexed user, address token, uint256 amount);\\n\\n    /// @notice An event that's emitted when an account's vote balance changes\\n    event VotingPowerChanged(address indexed voter, uint256 previousBalance, uint256 newBalance);\\n\\n    function initialize(\\n        address _archToken,\\n        address _vestingContract\\n    ) public initializer {\\n        __ReentrancyGuard_init_unchained();\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        app.archToken = IArchToken(_archToken);\\n        app.vesting = IVesting(_vestingContract);\\n    }\\n\\n    /**\\n     * @notice Stake ARCH tokens using offchain approvals to unlock voting power\\n     * @param amount The amount to stake\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function stakeWithPermit(uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external nonReentrant {\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        app.archToken.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n\\n        _stake(address(app.archToken), amount, amount);\\n    }\\n\\n    /**\\n     * @notice Stake ARCH tokens to unlock voting power for `msg.sender`\\n     * @param amount The amount to stake\\n     */\\n    function stake(uint256 amount) external nonReentrant {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\n        require(app.archToken.allowance(msg.sender, address(this)) >= amount, \\\"Must approve tokens before staking\\\");\\n\\n        _stake(address(app.archToken), amount, amount);\\n    }\\n\\n    /**\\n     * @notice Count vesting ARCH tokens toward voting power for `account`\\n     * @param account The recipient of voting power\\n     * @param amount The amount of voting power to add\\n     */\\n    function addVotingPowerForVestingTokens(address account, uint256 amount) external nonReentrant {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        require(amount > 0, \\\"Cannot add 0 voting power\\\");\\n        require(msg.sender == address(app.vesting), \\\"Only vesting contract\\\");\\n\\n        _increaseVotingPower(account, amount);\\n    }\\n\\n    /**\\n     * @notice Remove claimed vesting ARCH tokens from voting power for `account`\\n     * @param account The account with voting power\\n     * @param amount The amount of voting power to remove\\n     */\\n    function removeVotingPowerForClaimedTokens(address account, uint256 amount) external nonReentrant {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        require(amount > 0, \\\"Cannot remove 0 voting power\\\");\\n        require(msg.sender == address(app.vesting), \\\"Only vesting contract\\\");\\n\\n        _decreaseVotingPower(account, amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw staked ARCH tokens, removing voting power for `msg.sender`\\n     * @param amount The amount to withdraw\\n     */\\n    function withdraw(uint256 amount) external nonReentrant {\\n        require(amount > 0, \\\"Cannot withdraw 0\\\");\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        _withdraw(address(app.archToken), amount, amount);\\n    }\\n\\n    /**\\n     * @notice Get total amount of ARCH tokens staked in contract\\n     */\\n    function totalARCHStaked() public view returns (uint256) {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        return totalStaked(address(app.archToken));\\n    }\\n\\n    /**\\n     * @notice Get total amount of tokens staked in contract\\n     * @param stakedToken The staked token\\n     */\\n    function totalStaked(address stakedToken) public view returns (uint256) {\\n        StakeStorage storage ss = VotingPowerStorage.stakeStorage();\\n        return ss.totalStaked[stakedToken];\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) public view returns (uint256) {\\n        CheckpointStorage storage cs = VotingPowerStorage.checkpointStorage();\\n        uint32 nCheckpoints = cs.numCheckpoints[account];\\n        return nCheckpoints > 0 ? cs.checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint256 blockNumber) public view returns (uint256) {\\n        require(blockNumber < block.number, \\\"Arch::getPriorVotes: not yet determined\\\");\\n        \\n        CheckpointStorage storage cs = VotingPowerStorage.checkpointStorage();\\n        uint32 nCheckpoints = cs.numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (cs.checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return cs.checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (cs.checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = cs.checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return cs.checkpoints[account][lower].votes;\\n    }\\n\\n    function _stake(address token, uint256 tokenAmount, uint256 votingPower) internal {\\n        StakeStorage storage ss = VotingPowerStorage.stakeStorage();\\n        ss.totalStaked[token].add(tokenAmount);\\n        ss.stakes[msg.sender][token].add(tokenAmount);\\n\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), tokenAmount);\\n\\n        emit Staked(msg.sender, token, tokenAmount);\\n\\n        _increaseVotingPower(msg.sender, votingPower);\\n    }\\n\\n    function _withdraw(address token, uint256 tokenAmount, uint256 votingPower) internal {\\n        StakeStorage storage ss = VotingPowerStorage.stakeStorage();\\n        ss.totalStaked[token].sub(tokenAmount);\\n        ss.stakes[msg.sender][token].sub(tokenAmount);\\n        \\n        IERC20(token).safeTransfer(msg.sender, tokenAmount);\\n\\n        emit Withdrawn(msg.sender, token, tokenAmount);\\n        \\n        _decreaseVotingPower(msg.sender, votingPower);\\n    }\\n\\n    function _increaseVotingPower(address voter, uint256 amount) internal {\\n        CheckpointStorage storage cs = VotingPowerStorage.checkpointStorage();\\n        uint32 checkpointNum = cs.numCheckpoints[voter];\\n        uint256 votingPowerOld = checkpointNum > 0 ? cs.checkpoints[voter][checkpointNum - 1].votes : 0;\\n        uint256 votingPowerNew = votingPowerOld.add(amount);\\n        _writeCheckpoint(voter, checkpointNum, votingPowerOld, votingPowerNew);\\n    }\\n\\n    function _decreaseVotingPower(address voter, uint256 amount) internal {\\n        CheckpointStorage storage cs = VotingPowerStorage.checkpointStorage();\\n        uint32 checkpointNum = cs.numCheckpoints[voter];\\n        uint256 votingPowerOld = checkpointNum > 0 ? cs.checkpoints[voter][checkpointNum - 1].votes : 0;\\n        uint256 votingPowerNew = votingPowerOld.sub(amount);\\n        _writeCheckpoint(voter, checkpointNum, votingPowerOld, votingPowerNew);\\n    }\\n\\n    function _writeCheckpoint(address voter, uint32 nCheckpoints, uint256 oldVotes, uint256 newVotes) internal {\\n      uint32 blockNumber = _safe32(block.number, \\\"Arch::_writeCheckpoint: block number exceeds 32 bits\\\");\\n\\n      CheckpointStorage storage cs = VotingPowerStorage.checkpointStorage();\\n      if (nCheckpoints > 0 && cs.checkpoints[voter][nCheckpoints - 1].fromBlock == blockNumber) {\\n          cs.checkpoints[voter][nCheckpoints - 1].votes = newVotes;\\n      } else {\\n          cs.checkpoints[voter][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n          cs.numCheckpoints[voter] = nCheckpoints + 1;\\n      }\\n\\n      emit VotingPowerChanged(voter, oldVotes, newVotes);\\n    }\\n\\n    function _safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function become(VotingPowerPrism prism) public {\\n        require(msg.sender == prism.proxyAdmin(), \\\"only proxy admin can change implementation\\\");\\n        require(prism.acceptImplementation() == true, \\\"change not authorized\\\");\\n    }\\n}\",\"keccak256\":\"0xef321df7e99e4d76afd3ce21df1c6fadc053279db480b761d468b72534935952\",\"license\":\"MIT\"},\"contracts/VotingPowerPrism.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./lib/VotingPowerStorage.sol\\\";\\n\\n/**\\n * @title VotingPowerPrism\\n * @dev Storage for voting power is at this address, while execution is delegated to the `votingPowerImplementation`.\\n * All contracts that use voting power should reference this contract.\\n */\\ncontract VotingPowerPrism {\\n    /**\\n      * @notice Emitted when pendingVotingPowerImplementation is changed\\n      */\\n    event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\\n\\n    /**\\n      * @notice Emitted when pendingVotingPowerImplementation is accepted, which means voting power implementation is updated\\n      */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n      * @notice Emitted when pendingAdmin is changed\\n      */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n      * @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n      */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    constructor() {\\n        // Initialize storage\\n        AdminStorage storage s = VotingPowerStorage.adminStorage();\\n        // Set admin to caller\\n        s.admin = msg.sender;\\n    }\\n\\n    /*** Admin Functions ***/\\n     /**\\n    * @notice Create new pending implementation of voting power. msg.sender must be admin\\n    * @dev Admin function for proposing new implementation contract\\n    * @return boolean indicating success of operation\\n    */\\n    function setPendingImplementation(address newPendingImplementation) public returns (bool) {\\n        AdminStorage storage s = VotingPowerStorage.adminStorage();\\n        require(msg.sender == s.admin, \\\"Caller must be admin\\\");\\n\\n        address oldPendingImplementation = s.pendingVotingPowerImplementation;\\n\\n        s.pendingVotingPowerImplementation = newPendingImplementation;\\n\\n        emit NewPendingImplementation(oldPendingImplementation, s.pendingVotingPowerImplementation);\\n\\n        return true;\\n    }\\n\\n    /**\\n    * @notice Accepts new implementation of voting power. msg.sender must be pendingImplementation\\n    * @dev Admin function for new implementation to accept it's role as implementation\\n    * @return boolean indicating success of operation\\n    */\\n    function acceptImplementation() public returns (bool) {\\n        AdminStorage storage s = VotingPowerStorage.adminStorage();\\n        // Check caller is pendingImplementation and pendingImplementation \\u2260 address(0)\\n        require(msg.sender == s.pendingVotingPowerImplementation && s.pendingVotingPowerImplementation != address(0), \\\"Caller must be pending implementation\\\");\\n \\n        // Save current values for inclusion in log\\n        address oldImplementation = s.votingPowerImplementation;\\n        address oldPendingImplementation = s.pendingVotingPowerImplementation;\\n\\n        s.votingPowerImplementation = s.pendingVotingPowerImplementation;\\n\\n        s.pendingVotingPowerImplementation = address(0);\\n        s.version++;\\n\\n        emit NewImplementation(oldImplementation, s.votingPowerImplementation);\\n        emit NewPendingImplementation(oldPendingImplementation, s.pendingVotingPowerImplementation);\\n\\n        return true;\\n    }\\n\\n\\n    /**\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @param newPendingAdmin New pending admin.\\n      * @return boolean indicating success of operation\\n      */\\n    function setPendingAdmin(address newPendingAdmin) public returns (bool) {\\n        AdminStorage storage s = VotingPowerStorage.adminStorage();\\n        // Check caller = admin\\n        require(msg.sender == s.admin, \\\"Caller must be admin\\\");\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = s.pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        s.pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return true;\\n    }\\n\\n    /**\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n      * @dev Admin function for pending admin to accept role and update admin\\n      * @return boolean indicating success of operation\\n      */\\n    function acceptAdmin() public returns (bool) {\\n        AdminStorage storage s = VotingPowerStorage.adminStorage();\\n        // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n        require(msg.sender == s.pendingAdmin && msg.sender != address(0), \\\"Caller must be pending admin\\\");\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = s.admin;\\n        address oldPendingAdmin = s.pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        s.admin = s.pendingAdmin;\\n\\n        // Clear the pending value\\n        s.pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, s.admin);\\n        emit NewPendingAdmin(oldPendingAdmin, s.pendingAdmin);\\n\\n        return true;\\n    }\\n\\n    function proxyAdmin() public view returns (address) {\\n        AdminStorage storage s = VotingPowerStorage.adminStorage();\\n        return s.admin;\\n    }\\n\\n    function pendingProxyAdmin() public view returns (address) {\\n        AdminStorage storage s = VotingPowerStorage.adminStorage();\\n        return s.pendingAdmin;\\n    }\\n\\n    function votingPowerImplementation() public view returns (address) {\\n        AdminStorage storage s = VotingPowerStorage.adminStorage();\\n        return s.votingPowerImplementation;\\n    }\\n\\n    function pendingVotingPowerImplementation() public view returns (address) {\\n        AdminStorage storage s = VotingPowerStorage.adminStorage();\\n        return s.pendingVotingPowerImplementation;\\n    }\\n\\n    function version() public view returns (uint8) {\\n        AdminStorage storage s = VotingPowerStorage.adminStorage();\\n        return s.version;\\n    }\\n\\n    /**\\n     * @dev Delegates execution to an implementation contract.\\n     * It returns to the external caller whatever the implementation returns\\n     * or forwards reverts.\\n     */\\n    fallback() external payable {\\n        AdminStorage storage s = VotingPowerStorage.adminStorage();\\n        // delegate all other functions to current implementation\\n        (bool success, ) = s.votingPowerImplementation.delegatecall(msg.data);\\n\\n        assembly {\\n              let free_mem_ptr := mload(0x40)\\n              returndatacopy(free_mem_ptr, 0, returndatasize())\\n\\n              switch success\\n              case 0 { revert(free_mem_ptr, returndatasize()) }\\n              default { return(free_mem_ptr, returndatasize()) }\\n        }\\n    }\\n\\n    /**\\n     * @dev Disallow sending ETH to proxy contract directly\\n     */\\n    receive() external payable {\\n        revert(\\\"Cannot send ETH directly\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x97d35adc31c1705eb0b9dde378e9ae62615617e9775e6f8578e138c839da1041\",\"license\":\"MIT\"},\"contracts/interfaces/IArchToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IArchToken {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function mint(address dst, uint256 amount) external returns (bool);\\n    function burn(address src, uint256 amount) external returns (bool);\\n    function updateTokenMetadata(string memory tokenName, string memory tokenSymbol) external returns (bool);\\n    function supplyManager() external view returns (address);\\n    function metadataManager() external view returns (address);\\n    function supplyChangeAllowedAfter() external view returns (uint256);\\n    function supplyChangeWaitingPeriod() external view returns (uint32);\\n    function supplyChangeWaitingPeriodMinimum() external view returns (uint32);\\n    function mintCap() external view returns (uint16);\\n    function setSupplyManager(address newSupplyManager) external returns (bool);\\n    function setMetadataManager(address newMetadataManager) external returns (bool);\\n    function setSupplyChangeWaitingPeriod(uint32 period) external returns (bool);\\n    function setMintCap(uint16 newCap) external returns (bool);\\n}\",\"keccak256\":\"0x9c9856667f49f85a749bb73c5226271dc4b00a8213a84f9f1b5a02ae99adb59e\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x077c1c7b2001eab9f0cb3b7cee53577b39305495db8cba923f92420af9a4099a\",\"license\":\"MIT\"},\"contracts/interfaces/IVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IVesting {\\n    function vestedBalance(address account) external view returns (uint256);\\n} \",\"keccak256\":\"0xc48dce08ab8eadbe1ffdd576c17b0f7ccf0e14123f2bf2648a5d665eca850c69\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0x3200dad4899dfc4a7b22d84e4b3768f23f50fd161c5b5997d6ae7004d90b0a94\",\"license\":\"MIT\"},\"contracts/lib/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\",\"keccak256\":\"0x9a89a53c389e07d6dc2b81846031205cf32a92158a64a6adb70338ab1461b81b\",\"license\":\"MIT\"},\"contracts/lib/ReentrancyGuardUpgradeSafe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuardUpgradeSafe is Initializable {\\n    bool private _notEntered;\\n\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n\\n\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n\\n    uint256[49] private __gap;\\n}\",\"keccak256\":\"0xdf39f09d248373bd20248fffa5282b241f068e3f7168326cb257a5673d8cec7b\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0xf5c6f7a4e202733b9bea8dc0c4be4bc16f765c08079418eb426ad490d9f4142e\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x961855901713e710c05dd67f9a01e501a54e82e68a526fe3662e228c27f788d9\",\"license\":\"MIT\"},\"contracts/lib/VotingPowerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"../interfaces/IArchToken.sol\\\";\\r\\nimport \\\"../interfaces/IVesting.sol\\\";\\r\\n\\r\\n/// @notice Proxy admin storage variables\\r\\nstruct AdminStorage {\\r\\n    // Administrator for this contract\\r\\n    address admin;\\r\\n\\r\\n    // Pending administrator for this contract\\r\\n    address pendingAdmin;\\r\\n\\r\\n    // Active implementation of Voting Power contract\\r\\n    address votingPowerImplementation;\\r\\n\\r\\n    // Pending implementation of Voting Power contract\\r\\n    address pendingVotingPowerImplementation;\\r\\n\\r\\n    // Voting Power implementation version\\r\\n    uint8 version;\\r\\n}\\r\\n\\r\\n/// @notice App metadata storage\\r\\nstruct AppStorage {\\r\\n    // A record of states for signing / validating signatures\\r\\n    mapping (address => uint) nonces;\\r\\n\\r\\n    // ARCH token\\r\\n    IArchToken archToken;\\r\\n\\r\\n    // Vesting contract\\r\\n    IVesting vesting;\\r\\n}\\r\\n\\r\\n/// @notice A checkpoint for marking number of votes from a given block\\r\\nstruct Checkpoint {\\r\\n    uint32 fromBlock;\\r\\n    uint256 votes;\\r\\n}\\r\\n\\r\\n/// @notice All storage variables related to checkpoints\\r\\nstruct CheckpointStorage {\\r\\n     // A record of vote checkpoints for each account, by index\\r\\n    mapping (address => mapping (uint32 => Checkpoint)) checkpoints;\\r\\n\\r\\n    // The number of checkpoints for each account\\r\\n    mapping (address => uint32) numCheckpoints;\\r\\n}\\r\\n\\r\\n/// @notice All storage variables related to staking\\r\\nstruct StakeStorage {\\r\\n    // Total amount staked in the VotingPower contract for each token > amount\\r\\n    mapping (address => uint256) totalStaked;\\r\\n\\r\\n    // Official record of staked balances for each account > token > amount\\r\\n    mapping (address => mapping (address => uint256)) stakes;\\r\\n}\\r\\n\\r\\nlibrary VotingPowerStorage {\\r\\n    bytes32 constant VOTING_POWER_ADMIN_STORAGE_POSITION = keccak256(\\\"voting.power.admin.storage\\\");\\r\\n    bytes32 constant VOTING_POWER_APP_STORAGE_POSITION = keccak256(\\\"voting.power.app.storage\\\");\\r\\n    bytes32 constant VOTING_POWER_CHECKPOINT_STORAGE_POSITION = keccak256(\\\"voting.power.checkpoint.storage\\\");\\r\\n    bytes32 constant VOTING_POWER_STAKE_STORAGE_POSITION = keccak256(\\\"voting.power.stake.storage\\\");\\r\\n\\r\\n    function adminStorage() internal pure returns (AdminStorage storage adm) {        \\r\\n        bytes32 position = VOTING_POWER_ADMIN_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            adm.slot := position\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function appStorage() internal pure returns (AppStorage storage app) {        \\r\\n        bytes32 position = VOTING_POWER_APP_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            app.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function checkpointStorage() internal pure returns (CheckpointStorage storage cs) {        \\r\\n        bytes32 position = VOTING_POWER_CHECKPOINT_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            cs.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function stakeStorage() internal pure returns (StakeStorage storage ss) {        \\r\\n        bytes32 position = VOTING_POWER_STAKE_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            ss.slot := position\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0xaa064b71c0f7478d99115bf5018353545d74ade5b7872ecc09792924c1561c13\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612e40806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80639bfd8d61116100715780639bfd8d611461014e578063a1194c8e1461017e578063a694fc3a1461019a578063b4b5ea57146101b6578063c7c73006146101e6578063ecd9ba8214610204576100a9565b80631efaa442146100ae5780632e1a7d4d146100ca578063485cc955146100e6578063782d6fe1146101025780639b92ac4a14610132575b600080fd5b6100c860048036038101906100c391906124e1565b610220565b005b6100e460048036038101906100df919061256f565b6103c8565b005b61010060048036038101906100fb91906124a5565b610502565b005b61011c600480360381019061011791906124e1565b61069d565b6040516101299190612b71565b60405180910390f35b61014c600480360381019061014791906124e1565b610a65565b005b61016860048036038101906101639190612453565b610c0d565b6040516101759190612b71565b60405180910390f35b61019860048036038101906101939190612546565b610c64565b005b6101b460048036038101906101af919061256f565b610e18565b005b6101d060048036038101906101cb9190612453565b611043565b6040516101dd9190612b71565b60405180910390f35b6101ee61112a565b6040516101fb9190612b71565b60405180910390f35b61021e600480360381019061021991906125c1565b61116a565b005b603360009054906101000a900460ff166102a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b6000603360006101000a81548160ff02191690831515021790555060006102c7611343565b90506000821161030c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030390612a91565b60405180910390fd5b8060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461039e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039590612a71565b60405180910390fd5b6103a88383611370565b506001603360006101000a81548160ff0219169083151502179055505050565b603360009054906101000a900460ff1661044a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b6000603360006101000a81548160ff021916908315150217905550600081116104a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049f90612ab1565b60405180910390fd5b60006104b2611343565b90506104e38160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16838461147b565b506001603360006101000a81548160ff02191690831515021790555050565b600060019054906101000a900460ff168061052157506105206115f9565b5b80610537575060008054906101000a900460ff16155b61058c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180612d7f602e913960400191505060405180910390fd5b60008060019054906101000a900460ff1615905080156105dc576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6105e4611610565b60006105ee611343565b9050838160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550828160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505080156106985760008060016101000a81548160ff0219169083151502179055505b505050565b60004382106106e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d890612ad1565b60405180910390fd5b60006106eb611729565b905060008160010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900463ffffffff16905060008163ffffffff16141561075d57600092505050610a5f565b838260000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001840363ffffffff1663ffffffff16815260200190815260200160002060000160009054906101000a900463ffffffff1663ffffffff161161084c578160000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001830363ffffffff1663ffffffff1681526020019081526020016000206001015492505050610a5f565b838260000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008063ffffffff16815260200190815260200160002060000160009054906101000a900463ffffffff1663ffffffff1611156108d057600092505050610a5f565b6000806001830390505b8163ffffffff168163ffffffff1611156109f6576000600283830363ffffffff168161090257fe5b048203905061090f61238b565b8560000160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008363ffffffff1663ffffffff1681526020019081526020016000206040518060400160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182015481525050905087816000015163ffffffff1614156109ce5780602001519650505050505050610a5f565b87816000015163ffffffff1610156109e8578193506109ef565b6001820392505b50506108da565b8360000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008363ffffffff1663ffffffff168152602001908152602001600020600101549450505050505b92915050565b603360009054906101000a900460ff16610ae7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b6000603360006101000a81548160ff0219169083151502179055506000610b0c611343565b905060008211610b51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4890612b11565b60405180910390fd5b8060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610be3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bda90612a71565b60405180910390fd5b610bed8383611756565b506001603360006101000a81548160ff0219169083151502179055505050565b600080610c18611861565b90508060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915050919050565b8073ffffffffffffffffffffffffffffffffffffffff16633e47158c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610caa57600080fd5b505afa158015610cbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce2919061247c565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4690612b51565b60405180910390fd5b600115158173ffffffffffffffffffffffffffffffffffffffff166315ba56e56040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610d9b57600080fd5b505af1158015610daf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd3919061251d565b151514610e15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0c90612b31565b60405180910390fd5b50565b603360009054906101000a900460ff16610e9a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b6000603360006101000a81548160ff0219169083151502179055506000610ebf611343565b905060008211610f04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efb90612a51565b60405180910390fd5b818160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401610f6492919061296e565b60206040518083038186803b158015610f7c57600080fd5b505afa158015610f90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb49190612598565b1015610ff5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fec90612af1565b60405180910390fd5b6110248160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16838461188e565b506001603360006101000a81548160ff02191690831515021790555050565b60008061104e611729565b905060008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900463ffffffff16905060008163ffffffff16116110bb576000611121565b8160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001830363ffffffff1663ffffffff168152602001908152602001600020600101545b92505050919050565b600080611135611343565b90506111648160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610c0d565b91505090565b603360009054906101000a900460ff166111ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b6000603360006101000a81548160ff0219169083151502179055506000851161124a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124190612a51565b60405180910390fd5b6000611254611343565b90508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d505accf333089898989896040518863ffffffff1660e01b81526004016112bf9796959493929190612997565b600060405180830381600087803b1580156112d957600080fd5b505af11580156112ed573d6000803e3d6000fd5b505050506113208160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16878861188e565b506001603360006101000a81548160ff0219169083151502179055505050505050565b6000807f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f2090508091505090565b600061137a611729565b905060008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900463ffffffff1690506000808263ffffffff16116113e857600061144e565b8260000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001840363ffffffff1663ffffffff168152602001908152602001600020600101545b905060006114658583611a0e90919063ffffffff16565b905061147386848484611a58565b505050505050565b6000611485611861565b90506114db838260000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a0e90919063ffffffff16565b5061156d838260010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a0e90919063ffffffff16565b5061159933848673ffffffffffffffffffffffffffffffffffffffff16611cfb9092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167fd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb85856040516115e1929190612a06565b60405180910390a26115f33383611370565b50505050565b6000803090506000813b9050600081149250505090565b600060019054906101000a900460ff168061162f575061162e6115f9565b5b80611645575060008054906101000a900460ff16155b61169a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180612d7f602e913960400191505060405180910390fd5b60008060019054906101000a900460ff1615905080156116ea576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6001603360006101000a81548160ff02191690831515021790555080156117265760008060016101000a81548160ff0219169083151502179055505b50565b6000807f97ada73c2617b57999fe0c39e0cd251038e142d18fa592f9135b3c4884c92cf190508091505090565b6000611760611729565b905060008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900463ffffffff1690506000808263ffffffff16116117ce576000611834565b8260000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001840363ffffffff1663ffffffff168152602001908152602001600020600101545b9050600061184b8583611d9d90919063ffffffff16565b905061185986848484611a58565b505050505050565b6000807fb436861a9ea50c2256cd6ef2eb5e3092874d3eddb554844f2d197b6df51da09890508091505090565b6000611898611861565b90506118ee838260000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d9d90919063ffffffff16565b50611980838260010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d9d90919063ffffffff16565b506119ae3330858773ffffffffffffffffffffffffffffffffffffffff16611e25909392919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f5dac0c1b1112564a045ba943c9d50270893e8e826c49be8e7073adc713ab7bd785856040516119f6929190612a06565b60405180910390a2611a083383611756565b50505050565b6000611a5083836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250611ee6565b905092915050565b6000611a7c43604051806060016040528060348152602001612dad60349139611fa6565b90506000611a88611729565b905060008563ffffffff16118015611b1f57508163ffffffff168160000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001880363ffffffff1663ffffffff16815260200190815260200160002060000160009054906101000a900463ffffffff1663ffffffff16145b15611b9257828160000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001880363ffffffff1663ffffffff16815260200190815260200160002060010181905550611ca3565b60405180604001604052808363ffffffff168152602001848152508160000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008763ffffffff1663ffffffff16815260200190815260200160002060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160010155905050600185018160010160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff1602179055505b8573ffffffffffffffffffffffffffffffffffffffff167f53ed7954de66613e30dd29b46ab783aa594e6309d021d8854c76bb3325d03aa38585604051611ceb929190612b8c565b60405180910390a2505050505050565b611d988363a9059cbb60e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ffc565b505050565b600080828401905083811015611e1b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b611ee0846323b872dd60e01b858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ffc565b50505050565b6000838311158290611f93576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611f58578082015181840152602081019050611f3d565b50505050905090810190601f168015611f855780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b600064010000000083108290611ff2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe99190612a2f565b60405180910390fd5b5082905092915050565b606061205e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166120eb9092919063ffffffff16565b90506000815111156120e65780806020019051602081101561207f57600080fd5b81019080805190602001909291905050506120e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180612de1602a913960400191505060405180910390fd5b5b505050565b60606120fa8484600085612103565b90509392505050565b60608247101561215e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180612d596026913960400191505060405180910390fd5b612167856122ac565b6121d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b602083106122295780518252602082019150602081019050602083039250612206565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461228b576040519150601f19603f3d011682016040523d82523d6000602084013e612290565b606091505b50915091506122a08282866122bf565b92505050949350505050565b600080823b905060008111915050919050565b606083156122cf57829050612384565b6000835111156122e25782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561234957808201518184015260208101905061232e565b50505050905090810190601f1680156123765780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9392505050565b6040518060400160405280600063ffffffff168152602001600081525090565b6000813590506123ba81612cce565b92915050565b6000815190506123cf81612cce565b92915050565b6000815190506123e481612ce5565b92915050565b6000813590506123f981612cfc565b92915050565b60008135905061240e81612d13565b92915050565b60008135905061242381612d2a565b92915050565b60008151905061243881612d2a565b92915050565b60008135905061244d81612d41565b92915050565b60006020828403121561246557600080fd5b6000612473848285016123ab565b91505092915050565b60006020828403121561248e57600080fd5b600061249c848285016123c0565b91505092915050565b600080604083850312156124b857600080fd5b60006124c6858286016123ab565b92505060206124d7858286016123ab565b9150509250929050565b600080604083850312156124f457600080fd5b6000612502858286016123ab565b925050602061251385828601612414565b9150509250929050565b60006020828403121561252f57600080fd5b600061253d848285016123d5565b91505092915050565b60006020828403121561255857600080fd5b6000612566848285016123ff565b91505092915050565b60006020828403121561258157600080fd5b600061258f84828501612414565b91505092915050565b6000602082840312156125aa57600080fd5b60006125b884828501612429565b91505092915050565b600080600080600060a086880312156125d957600080fd5b60006125e788828901612414565b95505060206125f888828901612414565b94505060406126098882890161243e565b935050606061261a888289016123ea565b925050608061262b888289016123ea565b9150509295509295909350565b61264181612c54565b82525050565b61265081612bd1565b82525050565b61265f81612c01565b82525050565b600061267082612bb5565b61267a8185612bc0565b935061268a818560208601612c8a565b61269381612cbd565b840191505092915050565b60006126ab600e83612bc0565b91507f43616e6e6f74207374616b6520300000000000000000000000000000000000006000830152602082019050919050565b60006126eb601583612bc0565b91507f4f6e6c792076657374696e6720636f6e747261637400000000000000000000006000830152602082019050919050565b600061272b601c83612bc0565b91507f43616e6e6f742072656d6f7665203020766f74696e6720706f776572000000006000830152602082019050919050565b600061276b601183612bc0565b91507f43616e6e6f7420776974686472617720300000000000000000000000000000006000830152602082019050919050565b60006127ab602783612bc0565b91507f417263683a3a6765745072696f72566f7465733a206e6f74207965742064657460008301527f65726d696e6564000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612811602283612bc0565b91507f4d75737420617070726f766520746f6b656e73206265666f7265207374616b6960008301527f6e670000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612877601983612bc0565b91507f43616e6e6f7420616464203020766f74696e6720706f776572000000000000006000830152602082019050919050565b60006128b7601583612bc0565b91507f6368616e6765206e6f7420617574686f72697a656400000000000000000000006000830152602082019050919050565b60006128f7602a83612bc0565b91507f6f6e6c792070726f78792061646d696e2063616e206368616e676520696d706c60008301527f656d656e746174696f6e000000000000000000000000000000000000000000006020830152604082019050919050565b61295981612c3d565b82525050565b61296881612c47565b82525050565b60006040820190506129836000830185612638565b6129906020830184612647565b9392505050565b600060e0820190506129ac600083018a612638565b6129b96020830189612647565b6129c66040830188612950565b6129d36060830187612950565b6129e0608083018661295f565b6129ed60a0830185612656565b6129fa60c0830184612656565b98975050505050505050565b6000604082019050612a1b6000830185612647565b612a286020830184612950565b9392505050565b60006020820190508181036000830152612a498184612665565b905092915050565b60006020820190508181036000830152612a6a8161269e565b9050919050565b60006020820190508181036000830152612a8a816126de565b9050919050565b60006020820190508181036000830152612aaa8161271e565b9050919050565b60006020820190508181036000830152612aca8161275e565b9050919050565b60006020820190508181036000830152612aea8161279e565b9050919050565b60006020820190508181036000830152612b0a81612804565b9050919050565b60006020820190508181036000830152612b2a8161286a565b9050919050565b60006020820190508181036000830152612b4a816128aa565b9050919050565b60006020820190508181036000830152612b6a816128ea565b9050919050565b6000602082019050612b866000830184612950565b92915050565b6000604082019050612ba16000830185612950565b612bae6020830184612950565b9392505050565b600081519050919050565b600082825260208201905092915050565b6000612bdc82612c1d565b9050919050565b6000612bee82612c1d565b9050919050565b60008115159050919050565b6000819050919050565b6000612c1682612be3565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000612c5f82612c66565b9050919050565b6000612c7182612c78565b9050919050565b6000612c8382612c1d565b9050919050565b60005b83811015612ca8578082015181840152602081019050612c8d565b83811115612cb7576000848401525b50505050565b6000601f19601f8301169050919050565b612cd781612bd1565b8114612ce257600080fd5b50565b612cee81612bf5565b8114612cf957600080fd5b50565b612d0581612c01565b8114612d1057600080fd5b50565b612d1c81612c0b565b8114612d2757600080fd5b50565b612d3381612c3d565b8114612d3e57600080fd5b50565b612d4a81612c47565b8114612d5557600080fd5b5056fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564417263683a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d626572206578636565647320333220626974735361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212206ae98067bde9bca2c37456cbb7152ccd4162d2d8e14a93387c1892fc6685e02664736f6c63430007040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80639bfd8d61116100715780639bfd8d611461014e578063a1194c8e1461017e578063a694fc3a1461019a578063b4b5ea57146101b6578063c7c73006146101e6578063ecd9ba8214610204576100a9565b80631efaa442146100ae5780632e1a7d4d146100ca578063485cc955146100e6578063782d6fe1146101025780639b92ac4a14610132575b600080fd5b6100c860048036038101906100c391906124e1565b610220565b005b6100e460048036038101906100df919061256f565b6103c8565b005b61010060048036038101906100fb91906124a5565b610502565b005b61011c600480360381019061011791906124e1565b61069d565b6040516101299190612b71565b60405180910390f35b61014c600480360381019061014791906124e1565b610a65565b005b61016860048036038101906101639190612453565b610c0d565b6040516101759190612b71565b60405180910390f35b61019860048036038101906101939190612546565b610c64565b005b6101b460048036038101906101af919061256f565b610e18565b005b6101d060048036038101906101cb9190612453565b611043565b6040516101dd9190612b71565b60405180910390f35b6101ee61112a565b6040516101fb9190612b71565b60405180910390f35b61021e600480360381019061021991906125c1565b61116a565b005b603360009054906101000a900460ff166102a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b6000603360006101000a81548160ff02191690831515021790555060006102c7611343565b90506000821161030c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030390612a91565b60405180910390fd5b8060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461039e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039590612a71565b60405180910390fd5b6103a88383611370565b506001603360006101000a81548160ff0219169083151502179055505050565b603360009054906101000a900460ff1661044a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b6000603360006101000a81548160ff021916908315150217905550600081116104a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049f90612ab1565b60405180910390fd5b60006104b2611343565b90506104e38160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16838461147b565b506001603360006101000a81548160ff02191690831515021790555050565b600060019054906101000a900460ff168061052157506105206115f9565b5b80610537575060008054906101000a900460ff16155b61058c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180612d7f602e913960400191505060405180910390fd5b60008060019054906101000a900460ff1615905080156105dc576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6105e4611610565b60006105ee611343565b9050838160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550828160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505080156106985760008060016101000a81548160ff0219169083151502179055505b505050565b60004382106106e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d890612ad1565b60405180910390fd5b60006106eb611729565b905060008160010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900463ffffffff16905060008163ffffffff16141561075d57600092505050610a5f565b838260000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001840363ffffffff1663ffffffff16815260200190815260200160002060000160009054906101000a900463ffffffff1663ffffffff161161084c578160000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001830363ffffffff1663ffffffff1681526020019081526020016000206001015492505050610a5f565b838260000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008063ffffffff16815260200190815260200160002060000160009054906101000a900463ffffffff1663ffffffff1611156108d057600092505050610a5f565b6000806001830390505b8163ffffffff168163ffffffff1611156109f6576000600283830363ffffffff168161090257fe5b048203905061090f61238b565b8560000160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008363ffffffff1663ffffffff1681526020019081526020016000206040518060400160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182015481525050905087816000015163ffffffff1614156109ce5780602001519650505050505050610a5f565b87816000015163ffffffff1610156109e8578193506109ef565b6001820392505b50506108da565b8360000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008363ffffffff1663ffffffff168152602001908152602001600020600101549450505050505b92915050565b603360009054906101000a900460ff16610ae7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b6000603360006101000a81548160ff0219169083151502179055506000610b0c611343565b905060008211610b51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4890612b11565b60405180910390fd5b8060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610be3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bda90612a71565b60405180910390fd5b610bed8383611756565b506001603360006101000a81548160ff0219169083151502179055505050565b600080610c18611861565b90508060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915050919050565b8073ffffffffffffffffffffffffffffffffffffffff16633e47158c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610caa57600080fd5b505afa158015610cbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce2919061247c565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4690612b51565b60405180910390fd5b600115158173ffffffffffffffffffffffffffffffffffffffff166315ba56e56040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610d9b57600080fd5b505af1158015610daf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd3919061251d565b151514610e15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0c90612b31565b60405180910390fd5b50565b603360009054906101000a900460ff16610e9a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b6000603360006101000a81548160ff0219169083151502179055506000610ebf611343565b905060008211610f04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efb90612a51565b60405180910390fd5b818160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401610f6492919061296e565b60206040518083038186803b158015610f7c57600080fd5b505afa158015610f90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb49190612598565b1015610ff5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fec90612af1565b60405180910390fd5b6110248160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16838461188e565b506001603360006101000a81548160ff02191690831515021790555050565b60008061104e611729565b905060008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900463ffffffff16905060008163ffffffff16116110bb576000611121565b8160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001830363ffffffff1663ffffffff168152602001908152602001600020600101545b92505050919050565b600080611135611343565b90506111648160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610c0d565b91505090565b603360009054906101000a900460ff166111ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b6000603360006101000a81548160ff0219169083151502179055506000851161124a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124190612a51565b60405180910390fd5b6000611254611343565b90508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d505accf333089898989896040518863ffffffff1660e01b81526004016112bf9796959493929190612997565b600060405180830381600087803b1580156112d957600080fd5b505af11580156112ed573d6000803e3d6000fd5b505050506113208160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16878861188e565b506001603360006101000a81548160ff0219169083151502179055505050505050565b6000807f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f2090508091505090565b600061137a611729565b905060008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900463ffffffff1690506000808263ffffffff16116113e857600061144e565b8260000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001840363ffffffff1663ffffffff168152602001908152602001600020600101545b905060006114658583611a0e90919063ffffffff16565b905061147386848484611a58565b505050505050565b6000611485611861565b90506114db838260000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a0e90919063ffffffff16565b5061156d838260010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a0e90919063ffffffff16565b5061159933848673ffffffffffffffffffffffffffffffffffffffff16611cfb9092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167fd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb85856040516115e1929190612a06565b60405180910390a26115f33383611370565b50505050565b6000803090506000813b9050600081149250505090565b600060019054906101000a900460ff168061162f575061162e6115f9565b5b80611645575060008054906101000a900460ff16155b61169a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180612d7f602e913960400191505060405180910390fd5b60008060019054906101000a900460ff1615905080156116ea576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6001603360006101000a81548160ff02191690831515021790555080156117265760008060016101000a81548160ff0219169083151502179055505b50565b6000807f97ada73c2617b57999fe0c39e0cd251038e142d18fa592f9135b3c4884c92cf190508091505090565b6000611760611729565b905060008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900463ffffffff1690506000808263ffffffff16116117ce576000611834565b8260000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001840363ffffffff1663ffffffff168152602001908152602001600020600101545b9050600061184b8583611d9d90919063ffffffff16565b905061185986848484611a58565b505050505050565b6000807fb436861a9ea50c2256cd6ef2eb5e3092874d3eddb554844f2d197b6df51da09890508091505090565b6000611898611861565b90506118ee838260000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d9d90919063ffffffff16565b50611980838260010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d9d90919063ffffffff16565b506119ae3330858773ffffffffffffffffffffffffffffffffffffffff16611e25909392919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f5dac0c1b1112564a045ba943c9d50270893e8e826c49be8e7073adc713ab7bd785856040516119f6929190612a06565b60405180910390a2611a083383611756565b50505050565b6000611a5083836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250611ee6565b905092915050565b6000611a7c43604051806060016040528060348152602001612dad60349139611fa6565b90506000611a88611729565b905060008563ffffffff16118015611b1f57508163ffffffff168160000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001880363ffffffff1663ffffffff16815260200190815260200160002060000160009054906101000a900463ffffffff1663ffffffff16145b15611b9257828160000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001880363ffffffff1663ffffffff16815260200190815260200160002060010181905550611ca3565b60405180604001604052808363ffffffff168152602001848152508160000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008763ffffffff1663ffffffff16815260200190815260200160002060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160010155905050600185018160010160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff1602179055505b8573ffffffffffffffffffffffffffffffffffffffff167f53ed7954de66613e30dd29b46ab783aa594e6309d021d8854c76bb3325d03aa38585604051611ceb929190612b8c565b60405180910390a2505050505050565b611d988363a9059cbb60e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ffc565b505050565b600080828401905083811015611e1b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b611ee0846323b872dd60e01b858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ffc565b50505050565b6000838311158290611f93576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611f58578082015181840152602081019050611f3d565b50505050905090810190601f168015611f855780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b600064010000000083108290611ff2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe99190612a2f565b60405180910390fd5b5082905092915050565b606061205e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166120eb9092919063ffffffff16565b90506000815111156120e65780806020019051602081101561207f57600080fd5b81019080805190602001909291905050506120e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180612de1602a913960400191505060405180910390fd5b5b505050565b60606120fa8484600085612103565b90509392505050565b60608247101561215e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180612d596026913960400191505060405180910390fd5b612167856122ac565b6121d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b602083106122295780518252602082019150602081019050602083039250612206565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461228b576040519150601f19603f3d011682016040523d82523d6000602084013e612290565b606091505b50915091506122a08282866122bf565b92505050949350505050565b600080823b905060008111915050919050565b606083156122cf57829050612384565b6000835111156122e25782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561234957808201518184015260208101905061232e565b50505050905090810190601f1680156123765780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9392505050565b6040518060400160405280600063ffffffff168152602001600081525090565b6000813590506123ba81612cce565b92915050565b6000815190506123cf81612cce565b92915050565b6000815190506123e481612ce5565b92915050565b6000813590506123f981612cfc565b92915050565b60008135905061240e81612d13565b92915050565b60008135905061242381612d2a565b92915050565b60008151905061243881612d2a565b92915050565b60008135905061244d81612d41565b92915050565b60006020828403121561246557600080fd5b6000612473848285016123ab565b91505092915050565b60006020828403121561248e57600080fd5b600061249c848285016123c0565b91505092915050565b600080604083850312156124b857600080fd5b60006124c6858286016123ab565b92505060206124d7858286016123ab565b9150509250929050565b600080604083850312156124f457600080fd5b6000612502858286016123ab565b925050602061251385828601612414565b9150509250929050565b60006020828403121561252f57600080fd5b600061253d848285016123d5565b91505092915050565b60006020828403121561255857600080fd5b6000612566848285016123ff565b91505092915050565b60006020828403121561258157600080fd5b600061258f84828501612414565b91505092915050565b6000602082840312156125aa57600080fd5b60006125b884828501612429565b91505092915050565b600080600080600060a086880312156125d957600080fd5b60006125e788828901612414565b95505060206125f888828901612414565b94505060406126098882890161243e565b935050606061261a888289016123ea565b925050608061262b888289016123ea565b9150509295509295909350565b61264181612c54565b82525050565b61265081612bd1565b82525050565b61265f81612c01565b82525050565b600061267082612bb5565b61267a8185612bc0565b935061268a818560208601612c8a565b61269381612cbd565b840191505092915050565b60006126ab600e83612bc0565b91507f43616e6e6f74207374616b6520300000000000000000000000000000000000006000830152602082019050919050565b60006126eb601583612bc0565b91507f4f6e6c792076657374696e6720636f6e747261637400000000000000000000006000830152602082019050919050565b600061272b601c83612bc0565b91507f43616e6e6f742072656d6f7665203020766f74696e6720706f776572000000006000830152602082019050919050565b600061276b601183612bc0565b91507f43616e6e6f7420776974686472617720300000000000000000000000000000006000830152602082019050919050565b60006127ab602783612bc0565b91507f417263683a3a6765745072696f72566f7465733a206e6f74207965742064657460008301527f65726d696e6564000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612811602283612bc0565b91507f4d75737420617070726f766520746f6b656e73206265666f7265207374616b6960008301527f6e670000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612877601983612bc0565b91507f43616e6e6f7420616464203020766f74696e6720706f776572000000000000006000830152602082019050919050565b60006128b7601583612bc0565b91507f6368616e6765206e6f7420617574686f72697a656400000000000000000000006000830152602082019050919050565b60006128f7602a83612bc0565b91507f6f6e6c792070726f78792061646d696e2063616e206368616e676520696d706c60008301527f656d656e746174696f6e000000000000000000000000000000000000000000006020830152604082019050919050565b61295981612c3d565b82525050565b61296881612c47565b82525050565b60006040820190506129836000830185612638565b6129906020830184612647565b9392505050565b600060e0820190506129ac600083018a612638565b6129b96020830189612647565b6129c66040830188612950565b6129d36060830187612950565b6129e0608083018661295f565b6129ed60a0830185612656565b6129fa60c0830184612656565b98975050505050505050565b6000604082019050612a1b6000830185612647565b612a286020830184612950565b9392505050565b60006020820190508181036000830152612a498184612665565b905092915050565b60006020820190508181036000830152612a6a8161269e565b9050919050565b60006020820190508181036000830152612a8a816126de565b9050919050565b60006020820190508181036000830152612aaa8161271e565b9050919050565b60006020820190508181036000830152612aca8161275e565b9050919050565b60006020820190508181036000830152612aea8161279e565b9050919050565b60006020820190508181036000830152612b0a81612804565b9050919050565b60006020820190508181036000830152612b2a8161286a565b9050919050565b60006020820190508181036000830152612b4a816128aa565b9050919050565b60006020820190508181036000830152612b6a816128ea565b9050919050565b6000602082019050612b866000830184612950565b92915050565b6000604082019050612ba16000830185612950565b612bae6020830184612950565b9392505050565b600081519050919050565b600082825260208201905092915050565b6000612bdc82612c1d565b9050919050565b6000612bee82612c1d565b9050919050565b60008115159050919050565b6000819050919050565b6000612c1682612be3565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000612c5f82612c66565b9050919050565b6000612c7182612c78565b9050919050565b6000612c8382612c1d565b9050919050565b60005b83811015612ca8578082015181840152602081019050612c8d565b83811115612cb7576000848401525b50505050565b6000601f19601f8301169050919050565b612cd781612bd1565b8114612ce257600080fd5b50565b612cee81612bf5565b8114612cf957600080fd5b50565b612d0581612c01565b8114612d1057600080fd5b50565b612d1c81612c0b565b8114612d2757600080fd5b50565b612d3381612c3d565b8114612d3e57600080fd5b50565b612d4a81612c47565b8114612d5557600080fd5b5056fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564417263683a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d626572206578636565647320333220626974735361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212206ae98067bde9bca2c37456cbb7152ccd4162d2d8e14a93387c1892fc6685e02664736f6c63430007040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addVotingPowerForVestingTokens(address,uint256)": {
        "params": {
          "account": "The recipient of voting power",
          "amount": "The amount of voting power to add"
        }
      },
      "getCurrentVotes(address)": {
        "params": {
          "account": "The address to get votes balance"
        },
        "returns": {
          "_0": "The number of current votes for `account`"
        }
      },
      "getPriorVotes(address,uint256)": {
        "details": "Block number must be a finalized block or else this function will revert to prevent misinformation.",
        "params": {
          "account": "The address of the account to check",
          "blockNumber": "The block number to get the vote balance at"
        },
        "returns": {
          "_0": "The number of votes the account had as of the given block"
        }
      },
      "removeVotingPowerForClaimedTokens(address,uint256)": {
        "params": {
          "account": "The account with voting power",
          "amount": "The amount of voting power to remove"
        }
      },
      "stake(uint256)": {
        "params": {
          "amount": "The amount to stake"
        }
      },
      "stakeWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "amount": "The amount to stake",
          "deadline": "The time at which to expire the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "totalStaked(address)": {
        "params": {
          "stakedToken": "The staked token"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "amount": "The amount to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Staked(address,address,uint256)": {
        "notice": "An event that's emitted when a user's staked balance increases"
      },
      "VotingPowerChanged(address,uint256,uint256)": {
        "notice": "An event that's emitted when an account's vote balance changes"
      },
      "Withdrawn(address,address,uint256)": {
        "notice": "An event that's emitted when a user's staked balance decreases"
      }
    },
    "kind": "user",
    "methods": {
      "addVotingPowerForVestingTokens(address,uint256)": {
        "notice": "Count vesting ARCH tokens toward voting power for `account`"
      },
      "getCurrentVotes(address)": {
        "notice": "Gets the current votes balance for `account`"
      },
      "getPriorVotes(address,uint256)": {
        "notice": "Determine the prior number of votes for an account as of a block number"
      },
      "removeVotingPowerForClaimedTokens(address,uint256)": {
        "notice": "Remove claimed vesting ARCH tokens from voting power for `account`"
      },
      "stake(uint256)": {
        "notice": "Stake ARCH tokens to unlock voting power for `msg.sender`"
      },
      "stakeWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Stake ARCH tokens using offchain approvals to unlock voting power"
      },
      "totalARCHStaked()": {
        "notice": "Get total amount of ARCH tokens staked in contract"
      },
      "totalStaked(address)": {
        "notice": "Get total amount of tokens staked in contract"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw staked ARCH tokens, removing voting power for `msg.sender`"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2902,
        "contract": "contracts/VotingPower.sol:VotingPower",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2905,
        "contract": "contracts/VotingPower.sol:VotingPower",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2970,
        "contract": "contracts/VotingPower.sol:VotingPower",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2979,
        "contract": "contracts/VotingPower.sol:VotingPower",
        "label": "_notEntered",
        "offset": 0,
        "slot": "51",
        "type": "t_bool"
      },
      {
        "astId": 3020,
        "contract": "contracts/VotingPower.sol:VotingPower",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}