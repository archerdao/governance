{
  "address": "0x90f5e5503EF5d08774b360D8AFfaeD846df2A27d",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "NewAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldImplementation",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "NewImplementation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPendingAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPendingAdmin",
          "type": "address"
        }
      ],
      "name": "NewPendingAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPendingImplementation",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPendingImplementation",
          "type": "address"
        }
      ],
      "name": "NewPendingImplementation",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "acceptAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptImplementation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingProxyAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingVotingPowerImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxyAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPendingAdmin",
          "type": "address"
        }
      ],
      "name": "setPendingAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPendingImplementation",
          "type": "address"
        }
      ],
      "name": "setPendingImplementation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingPowerImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb0e2e0ef4c324a8915e12a67b81125869b3a4e89ef1f998de20ea13ead9d7e99",
  "receipt": {
    "to": null,
    "from": "0xa52422BB8c29E4d55243d310fB6BAe793162452e",
    "contractAddress": "0x90f5e5503EF5d08774b360D8AFfaeD846df2A27d",
    "transactionIndex": 7,
    "gasUsed": "984888",
    "logsBloom": "0x
    "blockHash": "0xa7eaa51f3444aca720418a772b3ce49f0e4ff76130bf91f1ec8d0c09afaa1f86",
    "transactionHash": "0xb0e2e0ef4c324a8915e12a67b81125869b3a4e89ef1f998de20ea13ead9d7e99",
    "logs": [],
    "blockNumber": 7460193,
    "cumulativeGasUsed": "2378452",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "717d290eaa30525657880968a67e5e00",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldImplementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"NewImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingImplementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingImplementation\",\"type\":\"address\"}],\"name\":\"NewPendingImplementation\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"acceptAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptImplementation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingProxyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingVotingPowerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"setPendingAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingImplementation\",\"type\":\"address\"}],\"name\":\"setPendingImplementation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingPowerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Storage for voting power is at this address, while execution is delegated to the `votingPowerImplementation`. All contracts that use voting power should reference this contract.\",\"kind\":\"dev\",\"methods\":{\"acceptAdmin()\":{\"details\":\"Admin function for pending admin to accept role and update admin\",\"returns\":{\"_0\":\"boolean indicating success of operation\"}},\"acceptImplementation()\":{\"details\":\"Admin function for new implementation to accept it's role as implementation\",\"returns\":{\"_0\":\"boolean indicating success of operation\"}},\"setPendingAdmin(address)\":{\"details\":\"Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\",\"params\":{\"newPendingAdmin\":\"New pending admin.\"},\"returns\":{\"_0\":\"boolean indicating success of operation\"}},\"setPendingImplementation(address)\":{\"details\":\"Admin function for proposing new implementation contract\",\"returns\":{\"_0\":\"boolean indicating success of operation\"}}},\"title\":\"VotingPowerPrism\",\"version\":1},\"userdoc\":{\"events\":{\"NewAdmin(address,address)\":{\"notice\":\"Emitted when pendingAdmin is accepted, which means admin is updated\"},\"NewImplementation(address,address)\":{\"notice\":\"Emitted when pendingVotingPowerImplementation is accepted, which means voting power implementation is updated\"},\"NewPendingAdmin(address,address)\":{\"notice\":\"Emitted when pendingAdmin is changed\"},\"NewPendingImplementation(address,address)\":{\"notice\":\"Emitted when pendingVotingPowerImplementation is changed\"}},\"kind\":\"user\",\"methods\":{\"acceptAdmin()\":{\"notice\":\"Accepts transfer of admin rights. msg.sender must be pendingAdmin\"},\"acceptImplementation()\":{\"notice\":\"Accepts new implementation of voting power. msg.sender must be pendingImplementation\"},\"setPendingAdmin(address)\":{\"notice\":\"Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\"},\"setPendingImplementation(address)\":{\"notice\":\"Create new pending implementation of voting power. msg.sender must be admin\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VotingPowerPrism.sol\":\"VotingPowerPrism\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/VotingPowerPrism.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./lib/VotingPowerStorage.sol\\\";\\n\\n/**\\n * @title VotingPowerPrism\\n * @dev Storage for voting power is at this address, while execution is delegated to the `votingPowerImplementation`.\\n * All contracts that use voting power should reference this contract.\\n */\\ncontract VotingPowerPrism {\\n    /**\\n      * @notice Emitted when pendingVotingPowerImplementation is changed\\n      */\\n    event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\\n\\n    /**\\n      * @notice Emitted when pendingVotingPowerImplementation is accepted, which means voting power implementation is updated\\n      */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n      * @notice Emitted when pendingAdmin is changed\\n      */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n      * @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n      */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    constructor() {\\n        // Initialize storage\\n        AdminStorage storage s = VotingPowerStorage.adminStorage();\\n        // Set admin to caller\\n        s.admin = msg.sender;\\n    }\\n\\n    /*** Admin Functions ***/\\n     /**\\n    * @notice Create new pending implementation of voting power. msg.sender must be admin\\n    * @dev Admin function for proposing new implementation contract\\n    * @return boolean indicating success of operation\\n    */\\n    function setPendingImplementation(address newPendingImplementation) public returns (bool) {\\n        AdminStorage storage s = VotingPowerStorage.adminStorage();\\n        require(msg.sender == s.admin, \\\"VP::setPendingImp: caller must be admin\\\");\\n\\n        address oldPendingImplementation = s.pendingVotingPowerImplementation;\\n\\n        s.pendingVotingPowerImplementation = newPendingImplementation;\\n\\n        emit NewPendingImplementation(oldPendingImplementation, s.pendingVotingPowerImplementation);\\n\\n        return true;\\n    }\\n\\n    /**\\n    * @notice Accepts new implementation of voting power. msg.sender must be pendingImplementation\\n    * @dev Admin function for new implementation to accept it's role as implementation\\n    * @return boolean indicating success of operation\\n    */\\n    function acceptImplementation() public returns (bool) {\\n        AdminStorage storage s = VotingPowerStorage.adminStorage();\\n        // Check caller is pendingImplementation and pendingImplementation \\u2260 address(0)\\n        require(msg.sender == s.pendingVotingPowerImplementation && s.pendingVotingPowerImplementation != address(0), \\\"VP::acceptImp: caller must be pending implementation\\\");\\n \\n        // Save current values for inclusion in log\\n        address oldImplementation = s.votingPowerImplementation;\\n        address oldPendingImplementation = s.pendingVotingPowerImplementation;\\n\\n        s.votingPowerImplementation = s.pendingVotingPowerImplementation;\\n\\n        s.pendingVotingPowerImplementation = address(0);\\n        s.version++;\\n\\n        emit NewImplementation(oldImplementation, s.votingPowerImplementation);\\n        emit NewPendingImplementation(oldPendingImplementation, s.pendingVotingPowerImplementation);\\n\\n        return true;\\n    }\\n\\n\\n    /**\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @param newPendingAdmin New pending admin.\\n      * @return boolean indicating success of operation\\n      */\\n    function setPendingAdmin(address newPendingAdmin) public returns (bool) {\\n        AdminStorage storage s = VotingPowerStorage.adminStorage();\\n        // Check caller = admin\\n        require(msg.sender == s.admin, \\\"VP::setPendingAdmin: caller must be admin\\\");\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = s.pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        s.pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return true;\\n    }\\n\\n    /**\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n      * @dev Admin function for pending admin to accept role and update admin\\n      * @return boolean indicating success of operation\\n      */\\n    function acceptAdmin() public returns (bool) {\\n        AdminStorage storage s = VotingPowerStorage.adminStorage();\\n        // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n        require(msg.sender == s.pendingAdmin && msg.sender != address(0), \\\"VP::acceptAdmin: caller must be pending admin\\\");\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = s.admin;\\n        address oldPendingAdmin = s.pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        s.admin = s.pendingAdmin;\\n\\n        // Clear the pending value\\n        s.pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, s.admin);\\n        emit NewPendingAdmin(oldPendingAdmin, s.pendingAdmin);\\n\\n        return true;\\n    }\\n\\n    function proxyAdmin() public view returns (address) {\\n        AdminStorage storage s = VotingPowerStorage.adminStorage();\\n        return s.admin;\\n    }\\n\\n    function pendingProxyAdmin() public view returns (address) {\\n        AdminStorage storage s = VotingPowerStorage.adminStorage();\\n        return s.pendingAdmin;\\n    }\\n\\n    function votingPowerImplementation() public view returns (address) {\\n        AdminStorage storage s = VotingPowerStorage.adminStorage();\\n        return s.votingPowerImplementation;\\n    }\\n\\n    function pendingVotingPowerImplementation() public view returns (address) {\\n        AdminStorage storage s = VotingPowerStorage.adminStorage();\\n        return s.pendingVotingPowerImplementation;\\n    }\\n\\n    function version() public view returns (uint8) {\\n        AdminStorage storage s = VotingPowerStorage.adminStorage();\\n        return s.version;\\n    }\\n\\n    /**\\n     * @notice Forwards to internal _fallback function\\n     */\\n    fallback() external payable {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @notice Forwards to internal _fallback function\\n     */\\n    receive() external payable {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @notice Delegates execution to an implementation contract.\\n     * It returns to the external caller whatever the implementation returns\\n     * or forwards reverts.\\n     */\\n    function _fallback() internal {\\n        AdminStorage storage s = VotingPowerStorage.adminStorage();\\n        // delegate all other functions to current implementation\\n        (bool success, ) = s.votingPowerImplementation.delegatecall(msg.data);\\n\\n        assembly {\\n              let free_mem_ptr := mload(0x40)\\n              returndatacopy(free_mem_ptr, 0, returndatasize())\\n\\n              switch success\\n              case 0 { revert(free_mem_ptr, returndatasize()) }\\n              default { return(free_mem_ptr, returndatasize()) }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xec1bf542cf5036bd28d21972c15f2173eaccd3063ad7350fc5a1f24702d70282\",\"license\":\"MIT\"},\"contracts/interfaces/IArchToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IArchToken {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function mint(address dst, uint256 amount) external returns (bool);\\n    function burn(address src, uint256 amount) external returns (bool);\\n    function updateTokenMetadata(string memory tokenName, string memory tokenSymbol) external returns (bool);\\n    function supplyManager() external view returns (address);\\n    function metadataManager() external view returns (address);\\n    function supplyChangeAllowedAfter() external view returns (uint256);\\n    function supplyChangeWaitingPeriod() external view returns (uint32);\\n    function supplyChangeWaitingPeriodMinimum() external view returns (uint32);\\n    function mintCap() external view returns (uint16);\\n    function setSupplyManager(address newSupplyManager) external returns (bool);\\n    function setMetadataManager(address newMetadataManager) external returns (bool);\\n    function setSupplyChangeWaitingPeriod(uint32 period) external returns (bool);\\n    function setMintCap(uint16 newCap) external returns (bool);\\n}\",\"keccak256\":\"0x9c9856667f49f85a749bb73c5226271dc4b00a8213a84f9f1b5a02ae99adb59e\",\"license\":\"MIT\"},\"contracts/interfaces/IVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IVesting {\\n    function vestedBalance(address account) external view returns (uint256);\\n} \",\"keccak256\":\"0xc48dce08ab8eadbe1ffdd576c17b0f7ccf0e14123f2bf2648a5d665eca850c69\",\"license\":\"MIT\"},\"contracts/lib/VotingPowerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"../interfaces/IArchToken.sol\\\";\\r\\nimport \\\"../interfaces/IVesting.sol\\\";\\r\\n\\r\\n/// @notice Proxy admin storage variables\\r\\nstruct AdminStorage {\\r\\n    // Administrator for this contract\\r\\n    address admin;\\r\\n\\r\\n    // Pending administrator for this contract\\r\\n    address pendingAdmin;\\r\\n\\r\\n    // Active implementation of Voting Power contract\\r\\n    address votingPowerImplementation;\\r\\n\\r\\n    // Pending implementation of Voting Power contract\\r\\n    address pendingVotingPowerImplementation;\\r\\n\\r\\n    // Voting Power implementation version\\r\\n    uint8 version;\\r\\n}\\r\\n\\r\\n/// @notice App metadata storage\\r\\nstruct AppStorage {\\r\\n    // A record of states for signing / validating signatures\\r\\n    mapping (address => uint) nonces;\\r\\n\\r\\n    // ARCH token\\r\\n    IArchToken archToken;\\r\\n\\r\\n    // Vesting contract\\r\\n    IVesting vesting;\\r\\n}\\r\\n\\r\\n/// @notice A checkpoint for marking number of votes from a given block\\r\\nstruct Checkpoint {\\r\\n    uint32 fromBlock;\\r\\n    uint256 votes;\\r\\n}\\r\\n\\r\\n/// @notice All storage variables related to checkpoints\\r\\nstruct CheckpointStorage {\\r\\n     // A record of vote checkpoints for each account, by index\\r\\n    mapping (address => mapping (uint32 => Checkpoint)) checkpoints;\\r\\n\\r\\n    // The number of checkpoints for each account\\r\\n    mapping (address => uint32) numCheckpoints;\\r\\n}\\r\\n\\r\\n/// @notice All storage variables related to staking\\r\\nstruct StakeStorage {\\r\\n    // Total amount staked in the VotingPower contract for each token > amount\\r\\n    mapping (address => uint256) totalStaked;\\r\\n\\r\\n    // Official record of staked balances for each account > token > amount\\r\\n    mapping (address => mapping (address => uint256)) stakes;\\r\\n}\\r\\n\\r\\nlibrary VotingPowerStorage {\\r\\n    bytes32 constant VOTING_POWER_ADMIN_STORAGE_POSITION = keccak256(\\\"voting.power.admin.storage\\\");\\r\\n    bytes32 constant VOTING_POWER_APP_STORAGE_POSITION = keccak256(\\\"voting.power.app.storage\\\");\\r\\n    bytes32 constant VOTING_POWER_CHECKPOINT_STORAGE_POSITION = keccak256(\\\"voting.power.checkpoint.storage\\\");\\r\\n    bytes32 constant VOTING_POWER_STAKE_STORAGE_POSITION = keccak256(\\\"voting.power.stake.storage\\\");\\r\\n\\r\\n    function adminStorage() internal pure returns (AdminStorage storage adm) {        \\r\\n        bytes32 position = VOTING_POWER_ADMIN_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            adm.slot := position\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function appStorage() internal pure returns (AppStorage storage app) {        \\r\\n        bytes32 position = VOTING_POWER_APP_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            app.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function checkpointStorage() internal pure returns (CheckpointStorage storage cs) {        \\r\\n        bytes32 position = VOTING_POWER_CHECKPOINT_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            cs.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function stakeStorage() internal pure returns (StakeStorage storage ss) {        \\r\\n        bytes32 position = VOTING_POWER_STAKE_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            ss.slot := position\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0xaa064b71c0f7478d99115bf5018353545d74ade5b7872ecc09792924c1561c13\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600061002561007060201b610c521760201c565b9050338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061009d565b6000807f11f054be2564f2730b7085dc3db2944f046752747bd172c8fe02101b7bc19b3090508091505090565b61107d806100ac6000396000f3fe60806040526004361061008a5760003560e01c80633e47158c116100595780633e47158c146101615780634dd18bf51461018c578063519c167e146101c957806354fd4d50146101f4578063e424b4f51461021f57610099565b806309ed43c9146100a35780630e18b681146100e057806315ba56e51461010b57806325f86cbb1461013657610099565b366100995761009761024a565b005b6100a161024a565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610c94565b610301565b6040516100d79190610f04565b60405180910390f35b3480156100ec57600080fd5b506100f5610474565b6040516101029190610f04565b60405180910390f35b34801561011757600080fd5b5061012061070d565b60405161012d9190610f04565b60405180910390f35b34801561014257600080fd5b5061014b6109fe565b6040516101589190610ec0565b60405180910390f35b34801561016d57600080fd5b50610176610a36565b6040516101839190610ec0565b60405180910390f35b34801561019857600080fd5b506101b360048036038101906101ae9190610c94565b610a6e565b6040516101c09190610f04565b60405180910390f35b3480156101d557600080fd5b506101de610bbd565b6040516101eb9190610ec0565b60405180910390f35b34801561020057600080fd5b50610209610bf5565b6040516102169190610f9f565b60405180910390f35b34801561022b57600080fd5b50610234610c1a565b6040516102419190610ec0565b60405180910390f35b6000610254610c52565b905060008160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000366040516102a4929190610ea7565b600060405180830381855af49150503d80600081146102df576040519150601f19603f3d011682016040523d82523d6000602084013e6102e4565b606091505b505090506040513d6000823e81600081146102fd573d82f35b3d82fd5b60008061030c610c52565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039790610f3f565b60405180910390fd5b60008160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050838260030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fe945ccee5d701fc83f9b8aa8ca94ea4219ec1fcbd4f4cab4f0ea57c5c3e1d815818360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051610461929190610edb565b60405180910390a1600192505050919050565b60008061047f610c52565b90508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614801561050d5750600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b61054c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054390610f7f565b60405180910390fd5b60008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008360010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507ff9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dc828460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405161069e929190610edb565b60405180910390a17fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a9818460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516106fb929190610edb565b60405180910390a16001935050505090565b600080610718610c52565b90508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480156107ca5750600073ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b610809576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080090610f1f565b60405180910390fd5b60008160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008360030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600301601481819054906101000a900460ff168092919060010191906101000a81548160ff021916908360ff160217905550507fd604de94d45953f9138079ec1b82d533cb2160c906d1076d1f7ed54befbca97a828460020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405161098f929190610edb565b60405180910390a17fe945ccee5d701fc83f9b8aa8ca94ea4219ec1fcbd4f4cab4f0ea57c5c3e1d815818460030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516109ec929190610edb565b60405180910390a16001935050505090565b600080610a09610c52565b90508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b600080610a41610c52565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b600080610a79610c52565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0490610f5f565b60405180910390fd5b60008160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050838260010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a98185604051610baa929190610edb565b60405180910390a1600192505050919050565b600080610bc8610c52565b90508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b600080610c00610c52565b90508060030160149054906101000a900460ff1691505090565b600080610c25610c52565b90508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b6000807f11f054be2564f2730b7085dc3db2944f046752747bd172c8fe02101b7bc19b3090508091505090565b600081359050610c8e81611030565b92915050565b600060208284031215610ca657600080fd5b6000610cb484828501610c7f565b91505092915050565b610cc681610fd6565b82525050565b610cd581610fe8565b82525050565b6000610ce78385610fba565b9350610cf4838584611021565b82840190509392505050565b6000610d0d603483610fc5565b91507f56503a3a616363657074496d703a2063616c6c6572206d75737420626520706560008301527f6e64696e6720696d706c656d656e746174696f6e0000000000000000000000006020830152604082019050919050565b6000610d73602783610fc5565b91507f56503a3a73657450656e64696e67496d703a2063616c6c6572206d757374206260008301527f652061646d696e000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000610dd9602983610fc5565b91507f56503a3a73657450656e64696e6741646d696e3a2063616c6c6572206d75737460008301527f2062652061646d696e00000000000000000000000000000000000000000000006020830152604082019050919050565b6000610e3f602d83610fc5565b91507f56503a3a61636365707441646d696e3a2063616c6c6572206d7573742062652060008301527f70656e64696e672061646d696e000000000000000000000000000000000000006020830152604082019050919050565b610ea181611014565b82525050565b6000610eb4828486610cdb565b91508190509392505050565b6000602082019050610ed56000830184610cbd565b92915050565b6000604082019050610ef06000830185610cbd565b610efd6020830184610cbd565b9392505050565b6000602082019050610f196000830184610ccc565b92915050565b60006020820190508181036000830152610f3881610d00565b9050919050565b60006020820190508181036000830152610f5881610d66565b9050919050565b60006020820190508181036000830152610f7881610dcc565b9050919050565b60006020820190508181036000830152610f9881610e32565b9050919050565b6000602082019050610fb46000830184610e98565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610fe182610ff4565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600060ff82169050919050565b82818337600083830152505050565b61103981610fd6565b811461104457600080fd5b5056fea26469706673582212205703254f59e34dfbac9ec94a7f854031099be28d71d271aaa942846236afa9cd64736f6c63430007040033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c80633e47158c116100595780633e47158c146101615780634dd18bf51461018c578063519c167e146101c957806354fd4d50146101f4578063e424b4f51461021f57610099565b806309ed43c9146100a35780630e18b681146100e057806315ba56e51461010b57806325f86cbb1461013657610099565b366100995761009761024a565b005b6100a161024a565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610c94565b610301565b6040516100d79190610f04565b60405180910390f35b3480156100ec57600080fd5b506100f5610474565b6040516101029190610f04565b60405180910390f35b34801561011757600080fd5b5061012061070d565b60405161012d9190610f04565b60405180910390f35b34801561014257600080fd5b5061014b6109fe565b6040516101589190610ec0565b60405180910390f35b34801561016d57600080fd5b50610176610a36565b6040516101839190610ec0565b60405180910390f35b34801561019857600080fd5b506101b360048036038101906101ae9190610c94565b610a6e565b6040516101c09190610f04565b60405180910390f35b3480156101d557600080fd5b506101de610bbd565b6040516101eb9190610ec0565b60405180910390f35b34801561020057600080fd5b50610209610bf5565b6040516102169190610f9f565b60405180910390f35b34801561022b57600080fd5b50610234610c1a565b6040516102419190610ec0565b60405180910390f35b6000610254610c52565b905060008160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000366040516102a4929190610ea7565b600060405180830381855af49150503d80600081146102df576040519150601f19603f3d011682016040523d82523d6000602084013e6102e4565b606091505b505090506040513d6000823e81600081146102fd573d82f35b3d82fd5b60008061030c610c52565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039790610f3f565b60405180910390fd5b60008160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050838260030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fe945ccee5d701fc83f9b8aa8ca94ea4219ec1fcbd4f4cab4f0ea57c5c3e1d815818360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051610461929190610edb565b60405180910390a1600192505050919050565b60008061047f610c52565b90508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614801561050d5750600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b61054c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054390610f7f565b60405180910390fd5b60008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008360010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507ff9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dc828460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405161069e929190610edb565b60405180910390a17fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a9818460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516106fb929190610edb565b60405180910390a16001935050505090565b600080610718610c52565b90508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480156107ca5750600073ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b610809576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080090610f1f565b60405180910390fd5b60008160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008360030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600301601481819054906101000a900460ff168092919060010191906101000a81548160ff021916908360ff160217905550507fd604de94d45953f9138079ec1b82d533cb2160c906d1076d1f7ed54befbca97a828460020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405161098f929190610edb565b60405180910390a17fe945ccee5d701fc83f9b8aa8ca94ea4219ec1fcbd4f4cab4f0ea57c5c3e1d815818460030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516109ec929190610edb565b60405180910390a16001935050505090565b600080610a09610c52565b90508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b600080610a41610c52565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b600080610a79610c52565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0490610f5f565b60405180910390fd5b60008160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050838260010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a98185604051610baa929190610edb565b60405180910390a1600192505050919050565b600080610bc8610c52565b90508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b600080610c00610c52565b90508060030160149054906101000a900460ff1691505090565b600080610c25610c52565b90508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b6000807f11f054be2564f2730b7085dc3db2944f046752747bd172c8fe02101b7bc19b3090508091505090565b600081359050610c8e81611030565b92915050565b600060208284031215610ca657600080fd5b6000610cb484828501610c7f565b91505092915050565b610cc681610fd6565b82525050565b610cd581610fe8565b82525050565b6000610ce78385610fba565b9350610cf4838584611021565b82840190509392505050565b6000610d0d603483610fc5565b91507f56503a3a616363657074496d703a2063616c6c6572206d75737420626520706560008301527f6e64696e6720696d706c656d656e746174696f6e0000000000000000000000006020830152604082019050919050565b6000610d73602783610fc5565b91507f56503a3a73657450656e64696e67496d703a2063616c6c6572206d757374206260008301527f652061646d696e000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000610dd9602983610fc5565b91507f56503a3a73657450656e64696e6741646d696e3a2063616c6c6572206d75737460008301527f2062652061646d696e00000000000000000000000000000000000000000000006020830152604082019050919050565b6000610e3f602d83610fc5565b91507f56503a3a61636365707441646d696e3a2063616c6c6572206d7573742062652060008301527f70656e64696e672061646d696e000000000000000000000000000000000000006020830152604082019050919050565b610ea181611014565b82525050565b6000610eb4828486610cdb565b91508190509392505050565b6000602082019050610ed56000830184610cbd565b92915050565b6000604082019050610ef06000830185610cbd565b610efd6020830184610cbd565b9392505050565b6000602082019050610f196000830184610ccc565b92915050565b60006020820190508181036000830152610f3881610d00565b9050919050565b60006020820190508181036000830152610f5881610d66565b9050919050565b60006020820190508181036000830152610f7881610dcc565b9050919050565b60006020820190508181036000830152610f9881610e32565b9050919050565b6000602082019050610fb46000830184610e98565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610fe182610ff4565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600060ff82169050919050565b82818337600083830152505050565b61103981610fd6565b811461104457600080fd5b5056fea26469706673582212205703254f59e34dfbac9ec94a7f854031099be28d71d271aaa942846236afa9cd64736f6c63430007040033",
  "devdoc": {
    "details": "Storage for voting power is at this address, while execution is delegated to the `votingPowerImplementation`. All contracts that use voting power should reference this contract.",
    "kind": "dev",
    "methods": {
      "acceptAdmin()": {
        "details": "Admin function for pending admin to accept role and update admin",
        "returns": {
          "_0": "boolean indicating success of operation"
        }
      },
      "acceptImplementation()": {
        "details": "Admin function for new implementation to accept it's role as implementation",
        "returns": {
          "_0": "boolean indicating success of operation"
        }
      },
      "setPendingAdmin(address)": {
        "details": "Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.",
        "params": {
          "newPendingAdmin": "New pending admin."
        },
        "returns": {
          "_0": "boolean indicating success of operation"
        }
      },
      "setPendingImplementation(address)": {
        "details": "Admin function for proposing new implementation contract",
        "returns": {
          "_0": "boolean indicating success of operation"
        }
      }
    },
    "title": "VotingPowerPrism",
    "version": 1
  },
  "userdoc": {
    "events": {
      "NewAdmin(address,address)": {
        "notice": "Emitted when pendingAdmin is accepted, which means admin is updated"
      },
      "NewImplementation(address,address)": {
        "notice": "Emitted when pendingVotingPowerImplementation is accepted, which means voting power implementation is updated"
      },
      "NewPendingAdmin(address,address)": {
        "notice": "Emitted when pendingAdmin is changed"
      },
      "NewPendingImplementation(address,address)": {
        "notice": "Emitted when pendingVotingPowerImplementation is changed"
      }
    },
    "kind": "user",
    "methods": {
      "acceptAdmin()": {
        "notice": "Accepts transfer of admin rights. msg.sender must be pendingAdmin"
      },
      "acceptImplementation()": {
        "notice": "Accepts new implementation of voting power. msg.sender must be pendingImplementation"
      },
      "setPendingAdmin(address)": {
        "notice": "Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer."
      },
      "setPendingImplementation(address)": {
        "notice": "Create new pending implementation of voting power. msg.sender must be admin"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}